!function(t){var e={};function n(r){if(e[r])return e[r].exports;var o=e[r]={i:r,l:!1,exports:{}};return t[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var o in t)n.d(r,o,function(e){return t[e]}.bind(null,o));return r},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=13)}([function(t,e,n){"use strict";var r;n.d(e,"a",function(){return r}),function(t){t[t.Trace=0]="Trace",t[t.Debug=1]="Debug",t[t.Information=2]="Information",t[t.Warning=3]="Warning",t[t.Error=4]="Error",t[t.Critical=5]="Critical",t[t.None=6]="None"}(r||(r={}))},function(t,e,n){"use strict";n.d(e,"a",function(){return a}),n.d(e,"e",function(){return c}),n.d(e,"f",function(){return u}),n.d(e,"g",function(){return l}),n.d(e,"d",function(){return h}),n.d(e,"c",function(){return f}),n.d(e,"b",function(){return g});var r=n(0),o=n(4),i=function(t,e,n,r){return new(n||(n=Promise))(function(o,i){function s(t){try{c(r.next(t))}catch(t){i(t)}}function a(t){try{c(r.throw(t))}catch(t){i(t)}}function c(t){t.done?o(t.value):new n(function(e){e(t.value)}).then(s,a)}c((r=r.apply(t,e||[])).next())})},s=function(t,e){var n,r,o,i,s={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function a(i){return function(a){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;s;)try{if(n=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return s.label++,{value:i[1],done:!1};case 5:s.label++,r=i[1],i=[0];continue;case 7:i=s.ops.pop(),s.trys.pop();continue;default:if(!(o=(o=s.trys).length>0&&o[o.length-1])&&(6===i[0]||2===i[0])){s=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){s.label=i[1];break}if(6===i[0]&&s.label<o[1]){s.label=o[1],o=i;break}if(o&&s.label<o[2]){s.label=o[2],s.ops.push(i);break}o[2]&&s.ops.pop(),s.trys.pop();continue}i=e.call(t,s)}catch(t){i=[6,t],r=0}finally{n=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,a])}}},a=function(){function t(){}return t.isRequired=function(t,e){if(null==t)throw new Error("The '"+e+"' argument is required.")},t.isIn=function(t,e,n){if(!(t in e))throw new Error("Unknown "+n+" value: "+t+".")},t}();function c(t,e){var n="";return u(t)?(n="Binary data of length "+t.byteLength,e&&(n+=". Content: '"+function(t){var e=new Uint8Array(t),n="";return e.forEach(function(t){n+="0x"+(t<16?"0":"")+t.toString(16)+" "}),n.substr(0,n.length-1)}(t)+"'")):"string"==typeof t&&(n="String data of length "+t.length,e&&(n+=". Content: '"+t+"'")),n}function u(t){return t&&"undefined"!=typeof ArrayBuffer&&(t instanceof ArrayBuffer||t.constructor&&"ArrayBuffer"===t.constructor.name)}function l(t,e,n,o,a,l,h){return i(this,void 0,void 0,function(){var i,f,p,g,d;return s(this,function(s){switch(s.label){case 0:return a?[4,a()]:[3,2];case 1:(p=s.sent())&&((i={}).Authorization="Bearer "+p,f=i),s.label=2;case 2:return t.log(r.a.Trace,"("+e+" transport) sending data. "+c(l,h)+"."),g=u(l)?"arraybuffer":"text",[4,n.post(o,{content:l,headers:f,responseType:g})];case 3:return d=s.sent(),t.log(r.a.Trace,"("+e+" transport) request complete. Response status: "+d.statusCode+"."),[2]}})})}function h(t){return void 0===t?new g(r.a.Information):null===t?o.a.instance:t.log?t:new g(t)}var f=function(){function t(){this.observers=[]}return t.prototype.next=function(t){for(var e=0,n=this.observers;e<n.length;e++){n[e].next(t)}},t.prototype.error=function(t){for(var e=0,n=this.observers;e<n.length;e++){var r=n[e];r.error&&r.error(t)}},t.prototype.complete=function(){for(var t=0,e=this.observers;t<e.length;t++){var n=e[t];n.complete&&n.complete()}},t.prototype.subscribe=function(t){return this.observers.push(t),new p(this,t)},t}(),p=function(){function t(t,e){this.subject=t,this.observer=e}return t.prototype.dispose=function(){var t=this.subject.observers.indexOf(this.observer);t>-1&&this.subject.observers.splice(t,1),0===this.subject.observers.length&&this.subject.cancelCallback&&this.subject.cancelCallback().catch(function(t){})},t}(),g=function(){function t(t){this.minimumLogLevel=t}return t.prototype.log=function(t,e){if(t>=this.minimumLogLevel)switch(t){case r.a.Critical:case r.a.Error:console.error("["+(new Date).toISOString()+"] "+r.a[t]+": "+e);break;case r.a.Warning:console.warn("["+(new Date).toISOString()+"] "+r.a[t]+": "+e);break;case r.a.Information:console.info("["+(new Date).toISOString()+"] "+r.a[t]+": "+e);break;default:console.log("["+(new Date).toISOString()+"] "+r.a[t]+": "+e)}},t}()},function(t,e,n){"use strict";n.d(e,"b",function(){return i}),n.d(e,"c",function(){return s}),n.d(e,"a",function(){return a});var r,o=(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}),i=function(t){function e(e,n){var r=this,o=this.constructor.prototype;return(r=t.call(this,e)||this).statusCode=n,r.__proto__=o,r}return o(e,t),e}(Error),s=function(t){function e(e){void 0===e&&(e="A timeout occurred.");var n=this,r=this.constructor.prototype;return(n=t.call(this,e)||this).__proto__=r,n}return o(e,t),e}(Error),a=function(t){function e(e){void 0===e&&(e="An abort occurred.");var n=this,r=this.constructor.prototype;return(n=t.call(this,e)||this).__proto__=r,n}return o(e,t),e}(Error)},function(t,e,n){"use strict";n.d(e,"b",function(){return o}),n.d(e,"a",function(){return i});var r=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var o in e=arguments[n])Object.prototype.hasOwnProperty.call(e,o)&&(t[o]=e[o]);return t},o=function(){return function(t,e,n){this.statusCode=t,this.statusText=e,this.content=n}}(),i=function(){function t(){}return t.prototype.get=function(t,e){return this.send(r({},e,{method:"GET",url:t}))},t.prototype.post=function(t,e){return this.send(r({},e,{method:"POST",url:t}))},t.prototype.delete=function(t,e){return this.send(r({},e,{method:"DELETE",url:t}))},t.prototype.getCookieString=function(t){return""},t}()},function(t,e,n){"use strict";n.d(e,"a",function(){return r});var r=function(){function t(){}return t.prototype.log=function(t,e){},t.instance=new t,t}()},function(t,e,n){"use strict";n.d(e,"a",function(){return r});var r=function(){function t(){}return t.write=function(e){return""+e+t.RecordSeparator},t.parse=function(e){if(e[e.length-1]!==t.RecordSeparator)throw new Error("Message is incomplete.");var n=e.split(t.RecordSeparator);return n.pop(),n},t.RecordSeparatorCode=30,t.RecordSeparator=String.fromCharCode(t.RecordSeparatorCode),t}()},function(t,e,n){"use strict";(function(t){
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */
var r=n(10),o=n(11),i=n(12);function s(){return c.TYPED_ARRAY_SUPPORT?2147483647:1073741823}function a(t,e){if(s()<e)throw new RangeError("Invalid typed array length");return c.TYPED_ARRAY_SUPPORT?(t=new Uint8Array(e)).__proto__=c.prototype:(null===t&&(t=new c(e)),t.length=e),t}function c(t,e,n){if(!(c.TYPED_ARRAY_SUPPORT||this instanceof c))return new c(t,e,n);if("number"==typeof t){if("string"==typeof e)throw new Error("If encoding is specified then the first argument must be a string");return h(this,t)}return u(this,t,e,n)}function u(t,e,n,r){if("number"==typeof e)throw new TypeError('"value" argument must not be a number');return"undefined"!=typeof ArrayBuffer&&e instanceof ArrayBuffer?function(t,e,n,r){if(e.byteLength,n<0||e.byteLength<n)throw new RangeError("'offset' is out of bounds");if(e.byteLength<n+(r||0))throw new RangeError("'length' is out of bounds");e=void 0===n&&void 0===r?new Uint8Array(e):void 0===r?new Uint8Array(e,n):new Uint8Array(e,n,r);c.TYPED_ARRAY_SUPPORT?(t=e).__proto__=c.prototype:t=f(t,e);return t}(t,e,n,r):"string"==typeof e?function(t,e,n){"string"==typeof n&&""!==n||(n="utf8");if(!c.isEncoding(n))throw new TypeError('"encoding" must be a valid string encoding');var r=0|g(e,n),o=(t=a(t,r)).write(e,n);o!==r&&(t=t.slice(0,o));return t}(t,e,n):function(t,e){if(c.isBuffer(e)){var n=0|p(e.length);return 0===(t=a(t,n)).length?t:(e.copy(t,0,0,n),t)}if(e){if("undefined"!=typeof ArrayBuffer&&e.buffer instanceof ArrayBuffer||"length"in e)return"number"!=typeof e.length||(r=e.length)!=r?a(t,0):f(t,e);if("Buffer"===e.type&&i(e.data))return f(t,e.data)}var r;throw new TypeError("First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.")}(t,e)}function l(t){if("number"!=typeof t)throw new TypeError('"size" argument must be a number');if(t<0)throw new RangeError('"size" argument must not be negative')}function h(t,e){if(l(e),t=a(t,e<0?0:0|p(e)),!c.TYPED_ARRAY_SUPPORT)for(var n=0;n<e;++n)t[n]=0;return t}function f(t,e){var n=e.length<0?0:0|p(e.length);t=a(t,n);for(var r=0;r<n;r+=1)t[r]=255&e[r];return t}function p(t){if(t>=s())throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x"+s().toString(16)+" bytes");return 0|t}function g(t,e){if(c.isBuffer(t))return t.length;if("undefined"!=typeof ArrayBuffer&&"function"==typeof ArrayBuffer.isView&&(ArrayBuffer.isView(t)||t instanceof ArrayBuffer))return t.byteLength;"string"!=typeof t&&(t=""+t);var n=t.length;if(0===n)return 0;for(var r=!1;;)switch(e){case"ascii":case"latin1":case"binary":return n;case"utf8":case"utf-8":case void 0:return q(t).length;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return 2*n;case"hex":return n>>>1;case"base64":return Y(t).length;default:if(r)return q(t).length;e=(""+e).toLowerCase(),r=!0}}function d(t,e,n){var r=t[e];t[e]=t[n],t[n]=r}function y(t,e,n,r,o){if(0===t.length)return-1;if("string"==typeof n?(r=n,n=0):n>2147483647?n=2147483647:n<-2147483648&&(n=-2147483648),n=+n,isNaN(n)&&(n=o?0:t.length-1),n<0&&(n=t.length+n),n>=t.length){if(o)return-1;n=t.length-1}else if(n<0){if(!o)return-1;n=0}if("string"==typeof e&&(e=c.from(e,r)),c.isBuffer(e))return 0===e.length?-1:v(t,e,n,r,o);if("number"==typeof e)return e&=255,c.TYPED_ARRAY_SUPPORT&&"function"==typeof Uint8Array.prototype.indexOf?o?Uint8Array.prototype.indexOf.call(t,e,n):Uint8Array.prototype.lastIndexOf.call(t,e,n):v(t,[e],n,r,o);throw new TypeError("val must be string, number or Buffer")}function v(t,e,n,r,o){var i,s=1,a=t.length,c=e.length;if(void 0!==r&&("ucs2"===(r=String(r).toLowerCase())||"ucs-2"===r||"utf16le"===r||"utf-16le"===r)){if(t.length<2||e.length<2)return-1;s=2,a/=2,c/=2,n/=2}function u(t,e){return 1===s?t[e]:t.readUInt16BE(e*s)}if(o){var l=-1;for(i=n;i<a;i++)if(u(t,i)===u(e,-1===l?0:i-l)){if(-1===l&&(l=i),i-l+1===c)return l*s}else-1!==l&&(i-=i-l),l=-1}else for(n+c>a&&(n=a-c),i=n;i>=0;i--){for(var h=!0,f=0;f<c;f++)if(u(t,i+f)!==u(e,f)){h=!1;break}if(h)return i}return-1}function b(t,e,n,r){n=Number(n)||0;var o=t.length-n;r?(r=Number(r))>o&&(r=o):r=o;var i=e.length;if(i%2!=0)throw new TypeError("Invalid hex string");r>i/2&&(r=i/2);for(var s=0;s<r;++s){var a=parseInt(e.substr(2*s,2),16);if(isNaN(a))return s;t[n+s]=a}return s}function w(t,e,n,r){return F(q(e,t.length-n),t,n,r)}function m(t,e,n,r){return F(function(t){for(var e=[],n=0;n<t.length;++n)e.push(255&t.charCodeAt(n));return e}(e),t,n,r)}function S(t,e,n,r){return m(t,e,n,r)}function E(t,e,n,r){return F(Y(e),t,n,r)}function T(t,e,n,r){return F(function(t,e){for(var n,r,o,i=[],s=0;s<t.length&&!((e-=2)<0);++s)n=t.charCodeAt(s),r=n>>8,o=n%256,i.push(o),i.push(r);return i}(e,t.length-n),t,n,r)}function k(t,e,n){return 0===e&&n===t.length?r.fromByteArray(t):r.fromByteArray(t.slice(e,n))}function C(t,e,n){n=Math.min(t.length,n);for(var r=[],o=e;o<n;){var i,s,a,c,u=t[o],l=null,h=u>239?4:u>223?3:u>191?2:1;if(o+h<=n)switch(h){case 1:u<128&&(l=u);break;case 2:128==(192&(i=t[o+1]))&&(c=(31&u)<<6|63&i)>127&&(l=c);break;case 3:i=t[o+1],s=t[o+2],128==(192&i)&&128==(192&s)&&(c=(15&u)<<12|(63&i)<<6|63&s)>2047&&(c<55296||c>57343)&&(l=c);break;case 4:i=t[o+1],s=t[o+2],a=t[o+3],128==(192&i)&&128==(192&s)&&128==(192&a)&&(c=(15&u)<<18|(63&i)<<12|(63&s)<<6|63&a)>65535&&c<1114112&&(l=c)}null===l?(l=65533,h=1):l>65535&&(l-=65536,r.push(l>>>10&1023|55296),l=56320|1023&l),r.push(l),o+=h}return function(t){var e=t.length;if(e<=P)return String.fromCharCode.apply(String,t);var n="",r=0;for(;r<e;)n+=String.fromCharCode.apply(String,t.slice(r,r+=P));return n}(r)}e.Buffer=c,e.SlowBuffer=function(t){+t!=t&&(t=0);return c.alloc(+t)},e.INSPECT_MAX_BYTES=50,c.TYPED_ARRAY_SUPPORT=void 0!==t.TYPED_ARRAY_SUPPORT?t.TYPED_ARRAY_SUPPORT:function(){try{var t=new Uint8Array(1);return t.__proto__={__proto__:Uint8Array.prototype,foo:function(){return 42}},42===t.foo()&&"function"==typeof t.subarray&&0===t.subarray(1,1).byteLength}catch(t){return!1}}(),e.kMaxLength=s(),c.poolSize=8192,c._augment=function(t){return t.__proto__=c.prototype,t},c.from=function(t,e,n){return u(null,t,e,n)},c.TYPED_ARRAY_SUPPORT&&(c.prototype.__proto__=Uint8Array.prototype,c.__proto__=Uint8Array,"undefined"!=typeof Symbol&&Symbol.species&&c[Symbol.species]===c&&Object.defineProperty(c,Symbol.species,{value:null,configurable:!0})),c.alloc=function(t,e,n){return function(t,e,n,r){return l(e),e<=0?a(t,e):void 0!==n?"string"==typeof r?a(t,e).fill(n,r):a(t,e).fill(n):a(t,e)}(null,t,e,n)},c.allocUnsafe=function(t){return h(null,t)},c.allocUnsafeSlow=function(t){return h(null,t)},c.isBuffer=function(t){return!(null==t||!t._isBuffer)},c.compare=function(t,e){if(!c.isBuffer(t)||!c.isBuffer(e))throw new TypeError("Arguments must be Buffers");if(t===e)return 0;for(var n=t.length,r=e.length,o=0,i=Math.min(n,r);o<i;++o)if(t[o]!==e[o]){n=t[o],r=e[o];break}return n<r?-1:r<n?1:0},c.isEncoding=function(t){switch(String(t).toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"latin1":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return!0;default:return!1}},c.concat=function(t,e){if(!i(t))throw new TypeError('"list" argument must be an Array of Buffers');if(0===t.length)return c.alloc(0);var n;if(void 0===e)for(e=0,n=0;n<t.length;++n)e+=t[n].length;var r=c.allocUnsafe(e),o=0;for(n=0;n<t.length;++n){var s=t[n];if(!c.isBuffer(s))throw new TypeError('"list" argument must be an Array of Buffers');s.copy(r,o),o+=s.length}return r},c.byteLength=g,c.prototype._isBuffer=!0,c.prototype.swap16=function(){var t=this.length;if(t%2!=0)throw new RangeError("Buffer size must be a multiple of 16-bits");for(var e=0;e<t;e+=2)d(this,e,e+1);return this},c.prototype.swap32=function(){var t=this.length;if(t%4!=0)throw new RangeError("Buffer size must be a multiple of 32-bits");for(var e=0;e<t;e+=4)d(this,e,e+3),d(this,e+1,e+2);return this},c.prototype.swap64=function(){var t=this.length;if(t%8!=0)throw new RangeError("Buffer size must be a multiple of 64-bits");for(var e=0;e<t;e+=8)d(this,e,e+7),d(this,e+1,e+6),d(this,e+2,e+5),d(this,e+3,e+4);return this},c.prototype.toString=function(){var t=0|this.length;return 0===t?"":0===arguments.length?C(this,0,t):function(t,e,n){var r=!1;if((void 0===e||e<0)&&(e=0),e>this.length)return"";if((void 0===n||n>this.length)&&(n=this.length),n<=0)return"";if((n>>>=0)<=(e>>>=0))return"";for(t||(t="utf8");;)switch(t){case"hex":return A(this,e,n);case"utf8":case"utf-8":return C(this,e,n);case"ascii":return I(this,e,n);case"latin1":case"binary":return R(this,e,n);case"base64":return k(this,e,n);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return _(this,e,n);default:if(r)throw new TypeError("Unknown encoding: "+t);t=(t+"").toLowerCase(),r=!0}}.apply(this,arguments)},c.prototype.equals=function(t){if(!c.isBuffer(t))throw new TypeError("Argument must be a Buffer");return this===t||0===c.compare(this,t)},c.prototype.inspect=function(){var t="",n=e.INSPECT_MAX_BYTES;return this.length>0&&(t=this.toString("hex",0,n).match(/.{2}/g).join(" "),this.length>n&&(t+=" ... ")),"<Buffer "+t+">"},c.prototype.compare=function(t,e,n,r,o){if(!c.isBuffer(t))throw new TypeError("Argument must be a Buffer");if(void 0===e&&(e=0),void 0===n&&(n=t?t.length:0),void 0===r&&(r=0),void 0===o&&(o=this.length),e<0||n>t.length||r<0||o>this.length)throw new RangeError("out of range index");if(r>=o&&e>=n)return 0;if(r>=o)return-1;if(e>=n)return 1;if(this===t)return 0;for(var i=(o>>>=0)-(r>>>=0),s=(n>>>=0)-(e>>>=0),a=Math.min(i,s),u=this.slice(r,o),l=t.slice(e,n),h=0;h<a;++h)if(u[h]!==l[h]){i=u[h],s=l[h];break}return i<s?-1:s<i?1:0},c.prototype.includes=function(t,e,n){return-1!==this.indexOf(t,e,n)},c.prototype.indexOf=function(t,e,n){return y(this,t,e,n,!0)},c.prototype.lastIndexOf=function(t,e,n){return y(this,t,e,n,!1)},c.prototype.write=function(t,e,n,r){if(void 0===e)r="utf8",n=this.length,e=0;else if(void 0===n&&"string"==typeof e)r=e,n=this.length,e=0;else{if(!isFinite(e))throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");e|=0,isFinite(n)?(n|=0,void 0===r&&(r="utf8")):(r=n,n=void 0)}var o=this.length-e;if((void 0===n||n>o)&&(n=o),t.length>0&&(n<0||e<0)||e>this.length)throw new RangeError("Attempt to write outside buffer bounds");r||(r="utf8");for(var i=!1;;)switch(r){case"hex":return b(this,t,e,n);case"utf8":case"utf-8":return w(this,t,e,n);case"ascii":return m(this,t,e,n);case"latin1":case"binary":return S(this,t,e,n);case"base64":return E(this,t,e,n);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return T(this,t,e,n);default:if(i)throw new TypeError("Unknown encoding: "+r);r=(""+r).toLowerCase(),i=!0}},c.prototype.toJSON=function(){return{type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}};var P=4096;function I(t,e,n){var r="";n=Math.min(t.length,n);for(var o=e;o<n;++o)r+=String.fromCharCode(127&t[o]);return r}function R(t,e,n){var r="";n=Math.min(t.length,n);for(var o=e;o<n;++o)r+=String.fromCharCode(t[o]);return r}function A(t,e,n){var r=t.length;(!e||e<0)&&(e=0),(!n||n<0||n>r)&&(n=r);for(var o="",i=e;i<n;++i)o+=N(t[i]);return o}function _(t,e,n){for(var r=t.slice(e,n),o="",i=0;i<r.length;i+=2)o+=String.fromCharCode(r[i]+256*r[i+1]);return o}function O(t,e,n){if(t%1!=0||t<0)throw new RangeError("offset is not uint");if(t+e>n)throw new RangeError("Trying to access beyond buffer length")}function x(t,e,n,r,o,i){if(!c.isBuffer(t))throw new TypeError('"buffer" argument must be a Buffer instance');if(e>o||e<i)throw new RangeError('"value" argument is out of bounds');if(n+r>t.length)throw new RangeError("Index out of range")}function M(t,e,n,r){e<0&&(e=65535+e+1);for(var o=0,i=Math.min(t.length-n,2);o<i;++o)t[n+o]=(e&255<<8*(r?o:1-o))>>>8*(r?o:1-o)}function B(t,e,n,r){e<0&&(e=4294967295+e+1);for(var o=0,i=Math.min(t.length-n,4);o<i;++o)t[n+o]=e>>>8*(r?o:3-o)&255}function U(t,e,n,r,o,i){if(n+r>t.length)throw new RangeError("Index out of range");if(n<0)throw new RangeError("Index out of range")}function L(t,e,n,r,i){return i||U(t,0,n,4),o.write(t,e,n,r,23,4),n+4}function j(t,e,n,r,i){return i||U(t,0,n,8),o.write(t,e,n,r,52,8),n+8}c.prototype.slice=function(t,e){var n,r=this.length;if((t=~~t)<0?(t+=r)<0&&(t=0):t>r&&(t=r),(e=void 0===e?r:~~e)<0?(e+=r)<0&&(e=0):e>r&&(e=r),e<t&&(e=t),c.TYPED_ARRAY_SUPPORT)(n=this.subarray(t,e)).__proto__=c.prototype;else{var o=e-t;n=new c(o,void 0);for(var i=0;i<o;++i)n[i]=this[i+t]}return n},c.prototype.readUIntLE=function(t,e,n){t|=0,e|=0,n||O(t,e,this.length);for(var r=this[t],o=1,i=0;++i<e&&(o*=256);)r+=this[t+i]*o;return r},c.prototype.readUIntBE=function(t,e,n){t|=0,e|=0,n||O(t,e,this.length);for(var r=this[t+--e],o=1;e>0&&(o*=256);)r+=this[t+--e]*o;return r},c.prototype.readUInt8=function(t,e){return e||O(t,1,this.length),this[t]},c.prototype.readUInt16LE=function(t,e){return e||O(t,2,this.length),this[t]|this[t+1]<<8},c.prototype.readUInt16BE=function(t,e){return e||O(t,2,this.length),this[t]<<8|this[t+1]},c.prototype.readUInt32LE=function(t,e){return e||O(t,4,this.length),(this[t]|this[t+1]<<8|this[t+2]<<16)+16777216*this[t+3]},c.prototype.readUInt32BE=function(t,e){return e||O(t,4,this.length),16777216*this[t]+(this[t+1]<<16|this[t+2]<<8|this[t+3])},c.prototype.readIntLE=function(t,e,n){t|=0,e|=0,n||O(t,e,this.length);for(var r=this[t],o=1,i=0;++i<e&&(o*=256);)r+=this[t+i]*o;return r>=(o*=128)&&(r-=Math.pow(2,8*e)),r},c.prototype.readIntBE=function(t,e,n){t|=0,e|=0,n||O(t,e,this.length);for(var r=e,o=1,i=this[t+--r];r>0&&(o*=256);)i+=this[t+--r]*o;return i>=(o*=128)&&(i-=Math.pow(2,8*e)),i},c.prototype.readInt8=function(t,e){return e||O(t,1,this.length),128&this[t]?-1*(255-this[t]+1):this[t]},c.prototype.readInt16LE=function(t,e){e||O(t,2,this.length);var n=this[t]|this[t+1]<<8;return 32768&n?4294901760|n:n},c.prototype.readInt16BE=function(t,e){e||O(t,2,this.length);var n=this[t+1]|this[t]<<8;return 32768&n?4294901760|n:n},c.prototype.readInt32LE=function(t,e){return e||O(t,4,this.length),this[t]|this[t+1]<<8|this[t+2]<<16|this[t+3]<<24},c.prototype.readInt32BE=function(t,e){return e||O(t,4,this.length),this[t]<<24|this[t+1]<<16|this[t+2]<<8|this[t+3]},c.prototype.readFloatLE=function(t,e){return e||O(t,4,this.length),o.read(this,t,!0,23,4)},c.prototype.readFloatBE=function(t,e){return e||O(t,4,this.length),o.read(this,t,!1,23,4)},c.prototype.readDoubleLE=function(t,e){return e||O(t,8,this.length),o.read(this,t,!0,52,8)},c.prototype.readDoubleBE=function(t,e){return e||O(t,8,this.length),o.read(this,t,!1,52,8)},c.prototype.writeUIntLE=function(t,e,n,r){(t=+t,e|=0,n|=0,r)||x(this,t,e,n,Math.pow(2,8*n)-1,0);var o=1,i=0;for(this[e]=255&t;++i<n&&(o*=256);)this[e+i]=t/o&255;return e+n},c.prototype.writeUIntBE=function(t,e,n,r){(t=+t,e|=0,n|=0,r)||x(this,t,e,n,Math.pow(2,8*n)-1,0);var o=n-1,i=1;for(this[e+o]=255&t;--o>=0&&(i*=256);)this[e+o]=t/i&255;return e+n},c.prototype.writeUInt8=function(t,e,n){return t=+t,e|=0,n||x(this,t,e,1,255,0),c.TYPED_ARRAY_SUPPORT||(t=Math.floor(t)),this[e]=255&t,e+1},c.prototype.writeUInt16LE=function(t,e,n){return t=+t,e|=0,n||x(this,t,e,2,65535,0),c.TYPED_ARRAY_SUPPORT?(this[e]=255&t,this[e+1]=t>>>8):M(this,t,e,!0),e+2},c.prototype.writeUInt16BE=function(t,e,n){return t=+t,e|=0,n||x(this,t,e,2,65535,0),c.TYPED_ARRAY_SUPPORT?(this[e]=t>>>8,this[e+1]=255&t):M(this,t,e,!1),e+2},c.prototype.writeUInt32LE=function(t,e,n){return t=+t,e|=0,n||x(this,t,e,4,4294967295,0),c.TYPED_ARRAY_SUPPORT?(this[e+3]=t>>>24,this[e+2]=t>>>16,this[e+1]=t>>>8,this[e]=255&t):B(this,t,e,!0),e+4},c.prototype.writeUInt32BE=function(t,e,n){return t=+t,e|=0,n||x(this,t,e,4,4294967295,0),c.TYPED_ARRAY_SUPPORT?(this[e]=t>>>24,this[e+1]=t>>>16,this[e+2]=t>>>8,this[e+3]=255&t):B(this,t,e,!1),e+4},c.prototype.writeIntLE=function(t,e,n,r){if(t=+t,e|=0,!r){var o=Math.pow(2,8*n-1);x(this,t,e,n,o-1,-o)}var i=0,s=1,a=0;for(this[e]=255&t;++i<n&&(s*=256);)t<0&&0===a&&0!==this[e+i-1]&&(a=1),this[e+i]=(t/s>>0)-a&255;return e+n},c.prototype.writeIntBE=function(t,e,n,r){if(t=+t,e|=0,!r){var o=Math.pow(2,8*n-1);x(this,t,e,n,o-1,-o)}var i=n-1,s=1,a=0;for(this[e+i]=255&t;--i>=0&&(s*=256);)t<0&&0===a&&0!==this[e+i+1]&&(a=1),this[e+i]=(t/s>>0)-a&255;return e+n},c.prototype.writeInt8=function(t,e,n){return t=+t,e|=0,n||x(this,t,e,1,127,-128),c.TYPED_ARRAY_SUPPORT||(t=Math.floor(t)),t<0&&(t=255+t+1),this[e]=255&t,e+1},c.prototype.writeInt16LE=function(t,e,n){return t=+t,e|=0,n||x(this,t,e,2,32767,-32768),c.TYPED_ARRAY_SUPPORT?(this[e]=255&t,this[e+1]=t>>>8):M(this,t,e,!0),e+2},c.prototype.writeInt16BE=function(t,e,n){return t=+t,e|=0,n||x(this,t,e,2,32767,-32768),c.TYPED_ARRAY_SUPPORT?(this[e]=t>>>8,this[e+1]=255&t):M(this,t,e,!1),e+2},c.prototype.writeInt32LE=function(t,e,n){return t=+t,e|=0,n||x(this,t,e,4,2147483647,-2147483648),c.TYPED_ARRAY_SUPPORT?(this[e]=255&t,this[e+1]=t>>>8,this[e+2]=t>>>16,this[e+3]=t>>>24):B(this,t,e,!0),e+4},c.prototype.writeInt32BE=function(t,e,n){return t=+t,e|=0,n||x(this,t,e,4,2147483647,-2147483648),t<0&&(t=4294967295+t+1),c.TYPED_ARRAY_SUPPORT?(this[e]=t>>>24,this[e+1]=t>>>16,this[e+2]=t>>>8,this[e+3]=255&t):B(this,t,e,!1),e+4},c.prototype.writeFloatLE=function(t,e,n){return L(this,t,e,!0,n)},c.prototype.writeFloatBE=function(t,e,n){return L(this,t,e,!1,n)},c.prototype.writeDoubleLE=function(t,e,n){return j(this,t,e,!0,n)},c.prototype.writeDoubleBE=function(t,e,n){return j(this,t,e,!1,n)},c.prototype.copy=function(t,e,n,r){if(n||(n=0),r||0===r||(r=this.length),e>=t.length&&(e=t.length),e||(e=0),r>0&&r<n&&(r=n),r===n)return 0;if(0===t.length||0===this.length)return 0;if(e<0)throw new RangeError("targetStart out of bounds");if(n<0||n>=this.length)throw new RangeError("sourceStart out of bounds");if(r<0)throw new RangeError("sourceEnd out of bounds");r>this.length&&(r=this.length),t.length-e<r-n&&(r=t.length-e+n);var o,i=r-n;if(this===t&&n<e&&e<r)for(o=i-1;o>=0;--o)t[o+e]=this[o+n];else if(i<1e3||!c.TYPED_ARRAY_SUPPORT)for(o=0;o<i;++o)t[o+e]=this[o+n];else Uint8Array.prototype.set.call(t,this.subarray(n,n+i),e);return i},c.prototype.fill=function(t,e,n,r){if("string"==typeof t){if("string"==typeof e?(r=e,e=0,n=this.length):"string"==typeof n&&(r=n,n=this.length),1===t.length){var o=t.charCodeAt(0);o<256&&(t=o)}if(void 0!==r&&"string"!=typeof r)throw new TypeError("encoding must be a string");if("string"==typeof r&&!c.isEncoding(r))throw new TypeError("Unknown encoding: "+r)}else"number"==typeof t&&(t&=255);if(e<0||this.length<e||this.length<n)throw new RangeError("Out of range index");if(n<=e)return this;var i;if(e>>>=0,n=void 0===n?this.length:n>>>0,t||(t=0),"number"==typeof t)for(i=e;i<n;++i)this[i]=t;else{var s=c.isBuffer(t)?t:q(new c(t,r).toString()),a=s.length;for(i=0;i<n-e;++i)this[i+e]=s[i%a]}return this};var D=/[^+\/0-9A-Za-z-_]/g;function N(t){return t<16?"0"+t.toString(16):t.toString(16)}function q(t,e){var n;e=e||1/0;for(var r=t.length,o=null,i=[],s=0;s<r;++s){if((n=t.charCodeAt(s))>55295&&n<57344){if(!o){if(n>56319){(e-=3)>-1&&i.push(239,191,189);continue}if(s+1===r){(e-=3)>-1&&i.push(239,191,189);continue}o=n;continue}if(n<56320){(e-=3)>-1&&i.push(239,191,189),o=n;continue}n=65536+(o-55296<<10|n-56320)}else o&&(e-=3)>-1&&i.push(239,191,189);if(o=null,n<128){if((e-=1)<0)break;i.push(n)}else if(n<2048){if((e-=2)<0)break;i.push(n>>6|192,63&n|128)}else if(n<65536){if((e-=3)<0)break;i.push(n>>12|224,n>>6&63|128,63&n|128)}else{if(!(n<1114112))throw new Error("Invalid code point");if((e-=4)<0)break;i.push(n>>18|240,n>>12&63|128,n>>6&63|128,63&n|128)}}return i}function Y(t){return r.toByteArray(function(t){if((t=function(t){return t.trim?t.trim():t.replace(/^\s+|\s+$/g,"")}(t).replace(D,"")).length<2)return"";for(;t.length%4!=0;)t+="=";return t}(t))}function F(t,e,n,r){for(var o=0;o<r&&!(o+n>=e.length||o>=t.length);++o)e[o+n]=t[o];return o}}).call(this,n(9))},function(t,e,n){"use strict";(function(t){n.d(e,"a",function(){return f});var r,o,i=n(2),s=n(3),a=n(0),c=n(1),u=(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}),l=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var o in e=arguments[n])Object.prototype.hasOwnProperty.call(e,o)&&(t[o]=e[o]);return t};if("undefined"==typeof XMLHttpRequest){var h=require;o=h("request")}var f=function(e){function n(t){var n=e.call(this)||this;if(void 0===o)throw new Error("The 'request' module could not be loaded.");return n.logger=t,n.cookieJar=o.jar(),n.request=o.defaults({jar:n.cookieJar}),n}return u(n,e),n.prototype.send=function(e){var n=this;return new Promise(function(r,o){var u;u=Object(c.f)(e.content)?t.from(e.content):e.content||"";var h=n.request(e.url,{body:u,encoding:"arraybuffer"===e.responseType?null:"utf8",headers:l({"X-Requested-With":"XMLHttpRequest"},e.headers),method:e.method,timeout:e.timeout},function(t,c,u){if(e.abortSignal&&(e.abortSignal.onabort=null),t)return"ETIMEDOUT"===t.code&&(n.logger.log(a.a.Warning,"Timeout from HTTP request."),o(new i.c)),n.logger.log(a.a.Warning,"Error from HTTP request. "+t),void o(t);c.statusCode>=200&&c.statusCode<300?r(new s.b(c.statusCode,c.statusMessage||"",u)):o(new i.b(c.statusMessage||"",c.statusCode||0))});e.abortSignal&&(e.abortSignal.onabort=function(){h.abort(),o(new i.a)})})},n.prototype.getCookieString=function(t){return this.cookieJar.getCookieString(t)},n}(s.a)}).call(this,n(6).Buffer)},function(t,e,n){"use strict";(function(t){n.d(e,"a",function(){return i});var r=n(5),o=n(1),i=function(){function e(){}return e.prototype.writeHandshakeRequest=function(t){return r.a.write(JSON.stringify(t))},e.prototype.parseHandshakeResponse=function(e){var n,i;if(Object(o.f)(e)||void 0!==t&&e instanceof t){var s=new Uint8Array(e);if(-1===(c=s.indexOf(r.a.RecordSeparatorCode)))throw new Error("Message is incomplete.");var a=c+1;n=String.fromCharCode.apply(null,s.slice(0,a)),i=s.byteLength>a?s.slice(a).buffer:null}else{var c,u=e;if(-1===(c=u.indexOf(r.a.RecordSeparator)))throw new Error("Message is incomplete.");a=c+1;n=u.substring(0,a),i=u.length>a?u.substring(a):null}var l=r.a.parse(n),h=JSON.parse(l[0]);if(h.type)throw new Error("Expected a handshake response from the server.");return[i,h]},e}()}).call(this,n(6).Buffer)},function(t,e){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(t){"object"==typeof window&&(n=window)}t.exports=n},function(t,e,n){"use strict";e.byteLength=function(t){var e=u(t),n=e[0],r=e[1];return 3*(n+r)/4-r},e.toByteArray=function(t){for(var e,n=u(t),r=n[0],s=n[1],a=new i(function(t,e,n){return 3*(e+n)/4-n}(0,r,s)),c=0,l=s>0?r-4:r,h=0;h<l;h+=4)e=o[t.charCodeAt(h)]<<18|o[t.charCodeAt(h+1)]<<12|o[t.charCodeAt(h+2)]<<6|o[t.charCodeAt(h+3)],a[c++]=e>>16&255,a[c++]=e>>8&255,a[c++]=255&e;2===s&&(e=o[t.charCodeAt(h)]<<2|o[t.charCodeAt(h+1)]>>4,a[c++]=255&e);1===s&&(e=o[t.charCodeAt(h)]<<10|o[t.charCodeAt(h+1)]<<4|o[t.charCodeAt(h+2)]>>2,a[c++]=e>>8&255,a[c++]=255&e);return a},e.fromByteArray=function(t){for(var e,n=t.length,o=n%3,i=[],s=0,a=n-o;s<a;s+=16383)i.push(l(t,s,s+16383>a?a:s+16383));1===o?(e=t[n-1],i.push(r[e>>2]+r[e<<4&63]+"==")):2===o&&(e=(t[n-2]<<8)+t[n-1],i.push(r[e>>10]+r[e>>4&63]+r[e<<2&63]+"="));return i.join("")};for(var r=[],o=[],i="undefined"!=typeof Uint8Array?Uint8Array:Array,s="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",a=0,c=s.length;a<c;++a)r[a]=s[a],o[s.charCodeAt(a)]=a;function u(t){var e=t.length;if(e%4>0)throw new Error("Invalid string. Length must be a multiple of 4");var n=t.indexOf("=");return-1===n&&(n=e),[n,n===e?0:4-n%4]}function l(t,e,n){for(var o,i,s=[],a=e;a<n;a+=3)o=(t[a]<<16&16711680)+(t[a+1]<<8&65280)+(255&t[a+2]),s.push(r[(i=o)>>18&63]+r[i>>12&63]+r[i>>6&63]+r[63&i]);return s.join("")}o["-".charCodeAt(0)]=62,o["_".charCodeAt(0)]=63},function(t,e){e.read=function(t,e,n,r,o){var i,s,a=8*o-r-1,c=(1<<a)-1,u=c>>1,l=-7,h=n?o-1:0,f=n?-1:1,p=t[e+h];for(h+=f,i=p&(1<<-l)-1,p>>=-l,l+=a;l>0;i=256*i+t[e+h],h+=f,l-=8);for(s=i&(1<<-l)-1,i>>=-l,l+=r;l>0;s=256*s+t[e+h],h+=f,l-=8);if(0===i)i=1-u;else{if(i===c)return s?NaN:1/0*(p?-1:1);s+=Math.pow(2,r),i-=u}return(p?-1:1)*s*Math.pow(2,i-r)},e.write=function(t,e,n,r,o,i){var s,a,c,u=8*i-o-1,l=(1<<u)-1,h=l>>1,f=23===o?Math.pow(2,-24)-Math.pow(2,-77):0,p=r?0:i-1,g=r?1:-1,d=e<0||0===e&&1/e<0?1:0;for(e=Math.abs(e),isNaN(e)||e===1/0?(a=isNaN(e)?1:0,s=l):(s=Math.floor(Math.log(e)/Math.LN2),e*(c=Math.pow(2,-s))<1&&(s--,c*=2),(e+=s+h>=1?f/c:f*Math.pow(2,1-h))*c>=2&&(s++,c/=2),s+h>=l?(a=0,s=l):s+h>=1?(a=(e*c-1)*Math.pow(2,o),s+=h):(a=e*Math.pow(2,h-1)*Math.pow(2,o),s=0));o>=8;t[n+p]=255&a,p+=g,a/=256,o-=8);for(s=s<<o|a,u+=o;u>0;t[n+p]=255&s,p+=g,s/=256,u-=8);t[n+p-g]|=128*d}},function(t,e){var n={}.toString;t.exports=Array.isArray||function(t){return"[object Array]"==n.call(t)}},function(t,e,n){"use strict";n.r(e);var r,o,i=n(2),s=n(3),a=n(7),c=n(0),u=(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}),l=function(t){function e(e){var n=t.call(this)||this;return n.logger=e,n}return u(e,t),e.prototype.send=function(t){var e=this;return t.abortSignal&&t.abortSignal.aborted?Promise.reject(new i.a):t.method?t.url?new Promise(function(n,r){var o=new XMLHttpRequest;o.open(t.method,t.url,!0),o.withCredentials=!0,o.setRequestHeader("X-Requested-With","XMLHttpRequest"),o.setRequestHeader("Content-Type","text/plain;charset=UTF-8");var a=t.headers;a&&Object.keys(a).forEach(function(t){o.setRequestHeader(t,a[t])}),t.responseType&&(o.responseType=t.responseType),t.abortSignal&&(t.abortSignal.onabort=function(){o.abort(),r(new i.a)}),t.timeout&&(o.timeout=t.timeout),o.onload=function(){t.abortSignal&&(t.abortSignal.onabort=null),o.status>=200&&o.status<300?n(new s.b(o.status,o.statusText,o.response||o.responseText)):r(new i.b(o.statusText,o.status))},o.onerror=function(){e.logger.log(c.a.Warning,"Error from HTTP request. "+o.status+": "+o.statusText+"."),r(new i.b(o.statusText,o.status))},o.ontimeout=function(){e.logger.log(c.a.Warning,"Timeout from HTTP request."),r(new i.c)},o.send(t.content||"")}):Promise.reject(new Error("No url defined.")):Promise.reject(new Error("No method defined."))},e}(s.a),h=function(){var t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])};return function(e,n){function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),f=function(t){function e(e){var n=t.call(this)||this;return"undefined"!=typeof XMLHttpRequest?n.httpClient=new l(e):n.httpClient=new a.a(e),n}return h(e,t),e.prototype.send=function(t){return t.abortSignal&&t.abortSignal.aborted?Promise.reject(new i.a):t.method?t.url?this.httpClient.send(t):Promise.reject(new Error("No url defined.")):Promise.reject(new Error("No method defined."))},e.prototype.getCookieString=function(t){return this.httpClient.getCookieString(t)},e}(s.a),p=n(8);!function(t){t[t.Invocation=1]="Invocation",t[t.StreamItem=2]="StreamItem",t[t.Completion=3]="Completion",t[t.StreamInvocation=4]="StreamInvocation",t[t.CancelInvocation=5]="CancelInvocation",t[t.Ping=6]="Ping",t[t.Close=7]="Close"}(o||(o={}));var g,d=n(1),y=function(t,e,n,r){return new(n||(n=Promise))(function(o,i){function s(t){try{c(r.next(t))}catch(t){i(t)}}function a(t){try{c(r.throw(t))}catch(t){i(t)}}function c(t){t.done?o(t.value):new n(function(e){e(t.value)}).then(s,a)}c((r=r.apply(t,e||[])).next())})},v=function(t,e){var n,r,o,i,s={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function a(i){return function(a){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;s;)try{if(n=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return s.label++,{value:i[1],done:!1};case 5:s.label++,r=i[1],i=[0];continue;case 7:i=s.ops.pop(),s.trys.pop();continue;default:if(!(o=(o=s.trys).length>0&&o[o.length-1])&&(6===i[0]||2===i[0])){s=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){s.label=i[1];break}if(6===i[0]&&s.label<o[1]){s.label=o[1],o=i;break}if(o&&s.label<o[2]){s.label=o[2],s.ops.push(i);break}o[2]&&s.ops.pop(),s.trys.pop();continue}i=e.call(t,s)}catch(t){i=[6,t],r=0}finally{n=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,a])}}},b=3e4,w=15e3;!function(t){t[t.Disconnected=0]="Disconnected",t[t.Connected=1]="Connected"}(g||(g={}));var m,S,E=function(){function t(t,e,n){var r=this;d.a.isRequired(t,"connection"),d.a.isRequired(e,"logger"),d.a.isRequired(n,"protocol"),this.serverTimeoutInMilliseconds=b,this.keepAliveIntervalInMilliseconds=w,this.logger=e,this.protocol=n,this.connection=t,this.handshakeProtocol=new p.a,this.connection.onreceive=function(t){return r.processIncomingData(t)},this.connection.onclose=function(t){return r.connectionClosed(t)},this.callbacks={},this.methods={},this.closedCallbacks=[],this.id=0,this.receivedHandshakeResponse=!1,this.connectionState=g.Disconnected,this.cachedPingMessage=this.protocol.writeMessage({type:o.Ping})}return t.create=function(e,n,r){return new t(e,n,r)},Object.defineProperty(t.prototype,"state",{get:function(){return this.connectionState},enumerable:!0,configurable:!0}),t.prototype.start=function(){return y(this,void 0,void 0,function(){var t,e,n=this;return v(this,function(r){switch(r.label){case 0:return t={protocol:this.protocol.name,version:this.protocol.version},this.logger.log(c.a.Debug,"Starting HubConnection."),this.receivedHandshakeResponse=!1,e=new Promise(function(t,e){n.handshakeResolver=t,n.handshakeRejecter=e}),[4,this.connection.start(this.protocol.transferFormat)];case 1:return r.sent(),this.logger.log(c.a.Debug,"Sending handshake request."),[4,this.sendMessage(this.handshakeProtocol.writeHandshakeRequest(t))];case 2:return r.sent(),this.logger.log(c.a.Information,"Using HubProtocol '"+this.protocol.name+"'."),this.cleanupTimeout(),this.resetTimeoutPeriod(),this.resetKeepAliveInterval(),[4,e];case 3:return r.sent(),this.connectionState=g.Connected,[2]}})})},t.prototype.stop=function(){return this.logger.log(c.a.Debug,"Stopping HubConnection."),this.cleanupTimeout(),this.cleanupPingTimer(),this.connection.stop()},t.prototype.stream=function(t){for(var e=this,n=[],r=1;r<arguments.length;r++)n[r-1]=arguments[r];var i,s=this.createStreamInvocation(t,n),a=new d.c;a.cancelCallback=function(){var t=e.createCancelInvocation(s.invocationId),n=e.protocol.writeMessage(t);return delete e.callbacks[s.invocationId],i.then(function(){return e.sendMessage(n)})},this.callbacks[s.invocationId]=function(t,e){e?a.error(e):t&&(t.type===o.Completion?t.error?a.error(new Error(t.error)):a.complete():a.next(t.item))};var c=this.protocol.writeMessage(s);return i=this.sendMessage(c).catch(function(t){a.error(t),delete e.callbacks[s.invocationId]}),a},t.prototype.sendMessage=function(t){return this.resetKeepAliveInterval(),this.connection.send(t)},t.prototype.send=function(t){for(var e=[],n=1;n<arguments.length;n++)e[n-1]=arguments[n];var r=this.createInvocation(t,e,!0),o=this.protocol.writeMessage(r);return this.sendMessage(o)},t.prototype.invoke=function(t){for(var e=this,n=[],r=1;r<arguments.length;r++)n[r-1]=arguments[r];var i=this.createInvocation(t,n,!1);return new Promise(function(t,n){e.callbacks[i.invocationId]=function(e,r){r?n(r):e&&(e.type===o.Completion?e.error?n(new Error(e.error)):t(e.result):n(new Error("Unexpected message type: "+e.type)))};var r=e.protocol.writeMessage(i);e.sendMessage(r).catch(function(t){n(t),delete e.callbacks[i.invocationId]})})},t.prototype.on=function(t,e){t&&e&&(t=t.toLowerCase(),this.methods[t]||(this.methods[t]=[]),-1===this.methods[t].indexOf(e)&&this.methods[t].push(e))},t.prototype.off=function(t,e){if(t){t=t.toLowerCase();var n=this.methods[t];if(n)if(e){var r=n.indexOf(e);-1!==r&&(n.splice(r,1),0===n.length&&delete this.methods[t])}else delete this.methods[t]}},t.prototype.onclose=function(t){t&&this.closedCallbacks.push(t)},t.prototype.processIncomingData=function(t){if(this.cleanupTimeout(),this.receivedHandshakeResponse||(t=this.processHandshakeResponse(t),this.receivedHandshakeResponse=!0),t)for(var e=0,n=this.protocol.parseMessages(t,this.logger);e<n.length;e++){var r=n[e];switch(r.type){case o.Invocation:this.invokeClientMethod(r);break;case o.StreamItem:case o.Completion:var i=this.callbacks[r.invocationId];null!=i&&(r.type===o.Completion&&delete this.callbacks[r.invocationId],i(r));break;case o.Ping:break;case o.Close:this.logger.log(c.a.Information,"Close message received from server."),this.connection.stop(r.error?new Error("Server returned an error on close: "+r.error):void 0);break;default:this.logger.log(c.a.Warning,"Invalid message type: "+r.type+".")}}this.resetTimeoutPeriod()},t.prototype.processHandshakeResponse=function(t){var e,n,r;try{r=(e=this.handshakeProtocol.parseHandshakeResponse(t))[0],n=e[1]}catch(t){var o="Error parsing handshake response: "+t;this.logger.log(c.a.Error,o);var i=new Error(o);throw this.connection.stop(i),this.handshakeRejecter(i),i}if(n.error){o="Server returned handshake error: "+n.error;throw this.logger.log(c.a.Error,o),this.handshakeRejecter(o),this.connection.stop(new Error(o)),new Error(o)}return this.logger.log(c.a.Debug,"Server handshake complete."),this.handshakeResolver(),r},t.prototype.resetKeepAliveInterval=function(){var t=this;this.cleanupPingTimer(),this.pingServerHandle=setTimeout(function(){return y(t,void 0,void 0,function(){return v(this,function(t){switch(t.label){case 0:if(this.connectionState!==g.Connected)return[3,4];t.label=1;case 1:return t.trys.push([1,3,,4]),[4,this.sendMessage(this.cachedPingMessage)];case 2:return t.sent(),[3,4];case 3:return t.sent(),this.cleanupPingTimer(),[3,4];case 4:return[2]}})})},this.keepAliveIntervalInMilliseconds)},t.prototype.resetTimeoutPeriod=function(){var t=this;this.connection.features&&this.connection.features.inherentKeepAlive||(this.timeoutHandle=setTimeout(function(){return t.serverTimeout()},this.serverTimeoutInMilliseconds))},t.prototype.serverTimeout=function(){this.connection.stop(new Error("Server timeout elapsed without receiving a message from the server."))},t.prototype.invokeClientMethod=function(t){var e=this,n=this.methods[t.target.toLowerCase()];if(n){if(n.forEach(function(n){return n.apply(e,t.arguments)}),t.invocationId){var r="Server requested a response, which is not supported in this version of the client.";this.logger.log(c.a.Error,r),this.connection.stop(new Error(r))}}else this.logger.log(c.a.Warning,"No client method with the name '"+t.target+"' found.")},t.prototype.connectionClosed=function(t){var e=this,n=this.callbacks;this.callbacks={},this.connectionState=g.Disconnected,this.handshakeRejecter&&this.handshakeRejecter(t),Object.keys(n).forEach(function(e){(0,n[e])(null,t||new Error("Invocation canceled due to connection being closed."))}),this.cleanupTimeout(),this.cleanupPingTimer(),this.closedCallbacks.forEach(function(n){return n.apply(e,[t])})},t.prototype.cleanupPingTimer=function(){this.pingServerHandle&&clearTimeout(this.pingServerHandle)},t.prototype.cleanupTimeout=function(){this.timeoutHandle&&clearTimeout(this.timeoutHandle)},t.prototype.createInvocation=function(t,e,n){if(n)return{arguments:e,target:t,type:o.Invocation};var r=this.id;return this.id++,{arguments:e,invocationId:r.toString(),target:t,type:o.Invocation}},t.prototype.createStreamInvocation=function(t,e){var n=this.id;return this.id++,{arguments:e,invocationId:n.toString(),target:t,type:o.StreamInvocation}},t.prototype.createCancelInvocation=function(t){return{invocationId:t,type:o.CancelInvocation}},t}();!function(t){t[t.None=0]="None",t[t.WebSockets=1]="WebSockets",t[t.ServerSentEvents=2]="ServerSentEvents",t[t.LongPolling=4]="LongPolling"}(m||(m={})),function(t){t[t.Text=1]="Text",t[t.Binary=2]="Binary"}(S||(S={}));var T=function(){function t(){this.isAborted=!1,this.onabort=null}return t.prototype.abort=function(){this.isAborted||(this.isAborted=!0,this.onabort&&this.onabort())},Object.defineProperty(t.prototype,"signal",{get:function(){return this},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"aborted",{get:function(){return this.isAborted},enumerable:!0,configurable:!0}),t}(),k=function(t,e,n,r){return new(n||(n=Promise))(function(o,i){function s(t){try{c(r.next(t))}catch(t){i(t)}}function a(t){try{c(r.throw(t))}catch(t){i(t)}}function c(t){t.done?o(t.value):new n(function(e){e(t.value)}).then(s,a)}c((r=r.apply(t,e||[])).next())})},C=function(t,e){var n,r,o,i,s={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function a(i){return function(a){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;s;)try{if(n=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return s.label++,{value:i[1],done:!1};case 5:s.label++,r=i[1],i=[0];continue;case 7:i=s.ops.pop(),s.trys.pop();continue;default:if(!(o=(o=s.trys).length>0&&o[o.length-1])&&(6===i[0]||2===i[0])){s=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){s.label=i[1];break}if(6===i[0]&&s.label<o[1]){s.label=o[1],o=i;break}if(o&&s.label<o[2]){s.label=o[2],s.ops.push(i);break}o[2]&&s.ops.pop(),s.trys.pop();continue}i=e.call(t,s)}catch(t){i=[6,t],r=0}finally{n=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,a])}}},P=function(){function t(t,e,n,r){this.httpClient=t,this.accessTokenFactory=e,this.logger=n,this.pollAbort=new T,this.logMessageContent=r,this.running=!1,this.onreceive=null,this.onclose=null}return Object.defineProperty(t.prototype,"pollAborted",{get:function(){return this.pollAbort.aborted},enumerable:!0,configurable:!0}),t.prototype.connect=function(t,e){return k(this,void 0,void 0,function(){var n,r,o,s;return C(this,function(a){switch(a.label){case 0:if(d.a.isRequired(t,"url"),d.a.isRequired(e,"transferFormat"),d.a.isIn(e,S,"transferFormat"),this.url=t,this.logger.log(c.a.Trace,"(LongPolling transport) Connecting."),e===S.Binary&&"undefined"!=typeof XMLHttpRequest&&"string"!=typeof(new XMLHttpRequest).responseType)throw new Error("Binary protocols over XmlHttpRequest not implementing advanced features are not supported.");return n={abortSignal:this.pollAbort.signal,headers:{},timeout:1e5},e===S.Binary&&(n.responseType="arraybuffer"),[4,this.getAccessToken()];case 1:return r=a.sent(),this.updateHeaderToken(n,r),o=t+"&_="+Date.now(),this.logger.log(c.a.Trace,"(LongPolling transport) polling: "+o+"."),[4,this.httpClient.get(o,n)];case 2:return 200!==(s=a.sent()).statusCode?(this.logger.log(c.a.Error,"(LongPolling transport) Unexpected response code: "+s.statusCode+"."),this.closeError=new i.b(s.statusText||"",s.statusCode),this.running=!1):this.running=!0,this.receiving=this.poll(this.url,n),[2]}})})},t.prototype.getAccessToken=function(){return k(this,void 0,void 0,function(){return C(this,function(t){switch(t.label){case 0:return this.accessTokenFactory?[4,this.accessTokenFactory()]:[3,2];case 1:return[2,t.sent()];case 2:return[2,null]}})})},t.prototype.updateHeaderToken=function(t,e){t.headers||(t.headers={}),e?t.headers.Authorization="Bearer "+e:t.headers.Authorization&&delete t.headers.Authorization},t.prototype.poll=function(t,e){return k(this,void 0,void 0,function(){var n,r,o,s;return C(this,function(a){switch(a.label){case 0:a.trys.push([0,,8,9]),a.label=1;case 1:return this.running?[4,this.getAccessToken()]:[3,7];case 2:n=a.sent(),this.updateHeaderToken(e,n),a.label=3;case 3:return a.trys.push([3,5,,6]),r=t+"&_="+Date.now(),this.logger.log(c.a.Trace,"(LongPolling transport) polling: "+r+"."),[4,this.httpClient.get(r,e)];case 4:return 204===(o=a.sent()).statusCode?(this.logger.log(c.a.Information,"(LongPolling transport) Poll terminated by server."),this.running=!1):200!==o.statusCode?(this.logger.log(c.a.Error,"(LongPolling transport) Unexpected response code: "+o.statusCode+"."),this.closeError=new i.b(o.statusText||"",o.statusCode),this.running=!1):o.content?(this.logger.log(c.a.Trace,"(LongPolling transport) data received. "+Object(d.e)(o.content,this.logMessageContent)+"."),this.onreceive&&this.onreceive(o.content)):this.logger.log(c.a.Trace,"(LongPolling transport) Poll timed out, reissuing."),[3,6];case 5:return s=a.sent(),this.running?s instanceof i.c?this.logger.log(c.a.Trace,"(LongPolling transport) Poll timed out, reissuing."):(this.closeError=s,this.running=!1):this.logger.log(c.a.Trace,"(LongPolling transport) Poll errored after shutdown: "+s.message),[3,6];case 6:return[3,1];case 7:return[3,9];case 8:return this.logger.log(c.a.Trace,"(LongPolling transport) Polling complete."),this.pollAborted||this.raiseOnClose(),[7];case 9:return[2]}})})},t.prototype.send=function(t){return k(this,void 0,void 0,function(){return C(this,function(e){return this.running?[2,Object(d.g)(this.logger,"LongPolling",this.httpClient,this.url,this.accessTokenFactory,t,this.logMessageContent)]:[2,Promise.reject(new Error("Cannot send until the transport is connected"))]})})},t.prototype.stop=function(){return k(this,void 0,void 0,function(){var t,e;return C(this,function(n){switch(n.label){case 0:this.logger.log(c.a.Trace,"(LongPolling transport) Stopping polling."),this.running=!1,this.pollAbort.abort(),n.label=1;case 1:return n.trys.push([1,,5,6]),[4,this.receiving];case 2:return n.sent(),this.logger.log(c.a.Trace,"(LongPolling transport) sending DELETE request to "+this.url+"."),t={headers:{}},[4,this.getAccessToken()];case 3:return e=n.sent(),this.updateHeaderToken(t,e),[4,this.httpClient.delete(this.url,t)];case 4:return n.sent(),this.logger.log(c.a.Trace,"(LongPolling transport) DELETE request sent."),[3,6];case 5:return this.logger.log(c.a.Trace,"(LongPolling transport) Stop finished."),this.raiseOnClose(),[7];case 6:return[2]}})})},t.prototype.raiseOnClose=function(){if(this.onclose){var t="(LongPolling transport) Firing onclose event.";this.closeError&&(t+=" Error: "+this.closeError),this.logger.log(c.a.Trace,t),this.onclose(this.closeError)}},t}(),I=function(t,e,n,r){return new(n||(n=Promise))(function(o,i){function s(t){try{c(r.next(t))}catch(t){i(t)}}function a(t){try{c(r.throw(t))}catch(t){i(t)}}function c(t){t.done?o(t.value):new n(function(e){e(t.value)}).then(s,a)}c((r=r.apply(t,e||[])).next())})},R=function(t,e){var n,r,o,i,s={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function a(i){return function(a){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;s;)try{if(n=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return s.label++,{value:i[1],done:!1};case 5:s.label++,r=i[1],i=[0];continue;case 7:i=s.ops.pop(),s.trys.pop();continue;default:if(!(o=(o=s.trys).length>0&&o[o.length-1])&&(6===i[0]||2===i[0])){s=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){s.label=i[1];break}if(6===i[0]&&s.label<o[1]){s.label=o[1],o=i;break}if(o&&s.label<o[2]){s.label=o[2],s.ops.push(i);break}o[2]&&s.ops.pop(),s.trys.pop();continue}i=e.call(t,s)}catch(t){i=[6,t],r=0}finally{n=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,a])}}},A=function(){function t(t,e,n,r,o){this.httpClient=t,this.accessTokenFactory=e,this.logger=n,this.logMessageContent=r,this.eventSourceConstructor=o,this.onreceive=null,this.onclose=null}return t.prototype.connect=function(t,e){return I(this,void 0,void 0,function(){var n,r=this;return R(this,function(o){switch(o.label){case 0:return d.a.isRequired(t,"url"),d.a.isRequired(e,"transferFormat"),d.a.isIn(e,S,"transferFormat"),this.logger.log(c.a.Trace,"(SSE transport) Connecting."),this.url=t,this.accessTokenFactory?[4,this.accessTokenFactory()]:[3,2];case 1:(n=o.sent())&&(t+=(t.indexOf("?")<0?"?":"&")+"access_token="+encodeURIComponent(n)),o.label=2;case 2:return[2,new Promise(function(n,o){var i=!1;if(e===S.Text){var s;if("undefined"!=typeof window)s=new r.eventSourceConstructor(t,{withCredentials:!0});else{var a=r.httpClient.getCookieString(t);s=new r.eventSourceConstructor(t,{withCredentials:!0,headers:{Cookie:a}})}try{s.onmessage=function(t){if(r.onreceive)try{r.logger.log(c.a.Trace,"(SSE transport) data received. "+Object(d.e)(t.data,r.logMessageContent)+"."),r.onreceive(t.data)}catch(t){return void r.close(t)}},s.onerror=function(t){var e=new Error(t.data||"Error occurred");i?r.close(e):o(e)},s.onopen=function(){r.logger.log(c.a.Information,"SSE connected to "+r.url),r.eventSource=s,i=!0,n()}}catch(t){return void o(t)}}else o(new Error("The Server-Sent Events transport only supports the 'Text' transfer format"))})]}})})},t.prototype.send=function(t){return I(this,void 0,void 0,function(){return R(this,function(e){return this.eventSource?[2,Object(d.g)(this.logger,"SSE",this.httpClient,this.url,this.accessTokenFactory,t,this.logMessageContent)]:[2,Promise.reject(new Error("Cannot send until the transport is connected"))]})})},t.prototype.stop=function(){return this.close(),Promise.resolve()},t.prototype.close=function(t){this.eventSource&&(this.eventSource.close(),this.eventSource=void 0,this.onclose&&this.onclose(t))},t}(),_=function(t,e,n,r){return new(n||(n=Promise))(function(o,i){function s(t){try{c(r.next(t))}catch(t){i(t)}}function a(t){try{c(r.throw(t))}catch(t){i(t)}}function c(t){t.done?o(t.value):new n(function(e){e(t.value)}).then(s,a)}c((r=r.apply(t,e||[])).next())})},O=function(t,e){var n,r,o,i,s={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function a(i){return function(a){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;s;)try{if(n=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return s.label++,{value:i[1],done:!1};case 5:s.label++,r=i[1],i=[0];continue;case 7:i=s.ops.pop(),s.trys.pop();continue;default:if(!(o=(o=s.trys).length>0&&o[o.length-1])&&(6===i[0]||2===i[0])){s=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){s.label=i[1];break}if(6===i[0]&&s.label<o[1]){s.label=o[1],o=i;break}if(o&&s.label<o[2]){s.label=o[2],s.ops.push(i);break}o[2]&&s.ops.pop(),s.trys.pop();continue}i=e.call(t,s)}catch(t){i=[6,t],r=0}finally{n=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,a])}}},x=function(){function t(t,e,n,r,o){this.logger=n,this.accessTokenFactory=e,this.logMessageContent=r,this.webSocketConstructor=o,this.httpClient=t,this.onreceive=null,this.onclose=null}return t.prototype.connect=function(t,e){return _(this,void 0,void 0,function(){var n,r=this;return O(this,function(o){switch(o.label){case 0:return d.a.isRequired(t,"url"),d.a.isRequired(e,"transferFormat"),d.a.isIn(e,S,"transferFormat"),this.logger.log(c.a.Trace,"(WebSockets transport) Connecting."),this.accessTokenFactory?[4,this.accessTokenFactory()]:[3,2];case 1:(n=o.sent())&&(t+=(t.indexOf("?")<0?"?":"&")+"access_token="+encodeURIComponent(n)),o.label=2;case 2:return[2,new Promise(function(n,o){var i;t=t.replace(/^http/,"ws");var s=r.httpClient.getCookieString(t);"undefined"==typeof window&&s&&(i=new r.webSocketConstructor(t,void 0,{headers:{Cookie:""+s}})),i||(i=new r.webSocketConstructor(t)),e===S.Binary&&(i.binaryType="arraybuffer"),i.onopen=function(e){r.logger.log(c.a.Information,"WebSocket connected to "+t+"."),r.webSocket=i,n()},i.onerror=function(t){var e=null;"undefined"!=typeof ErrorEvent&&t instanceof ErrorEvent&&(e=t.error),o(e)},i.onmessage=function(t){r.logger.log(c.a.Trace,"(WebSockets transport) data received. "+Object(d.e)(t.data,r.logMessageContent)+"."),r.onreceive&&r.onreceive(t.data)},i.onclose=function(t){return r.close(t)}})]}})})},t.prototype.send=function(t){return this.webSocket&&this.webSocket.readyState===this.webSocketConstructor.OPEN?(this.logger.log(c.a.Trace,"(WebSockets transport) sending data. "+Object(d.e)(t,this.logMessageContent)+"."),this.webSocket.send(t),Promise.resolve()):Promise.reject("WebSocket is not in the OPEN state")},t.prototype.stop=function(){return this.webSocket&&(this.webSocket.onclose=function(){},this.webSocket.onmessage=function(){},this.webSocket.onerror=function(){},this.webSocket.close(),this.webSocket=void 0,this.close(void 0)),Promise.resolve()},t.prototype.close=function(t){this.logger.log(c.a.Trace,"(WebSockets transport) socket closed."),this.onclose&&(!t||!1!==t.wasClean&&1e3===t.code?this.onclose():this.onclose(new Error("WebSocket closed with status code: "+t.code+" ("+t.reason+").")))},t}(),M=function(t,e,n,r){return new(n||(n=Promise))(function(o,i){function s(t){try{c(r.next(t))}catch(t){i(t)}}function a(t){try{c(r.throw(t))}catch(t){i(t)}}function c(t){t.done?o(t.value):new n(function(e){e(t.value)}).then(s,a)}c((r=r.apply(t,e||[])).next())})},B=function(t,e){var n,r,o,i,s={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function a(i){return function(a){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;s;)try{if(n=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return s.label++,{value:i[1],done:!1};case 5:s.label++,r=i[1],i=[0];continue;case 7:i=s.ops.pop(),s.trys.pop();continue;default:if(!(o=(o=s.trys).length>0&&o[o.length-1])&&(6===i[0]||2===i[0])){s=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){s.label=i[1];break}if(6===i[0]&&s.label<o[1]){s.label=o[1],o=i;break}if(o&&s.label<o[2]){s.label=o[2],s.ops.push(i);break}o[2]&&s.ops.pop(),s.trys.pop();continue}i=e.call(t,s)}catch(t){i=[6,t],r=0}finally{n=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,a])}}},U=null,L=null;if("undefined"==typeof window){var j=require;U=j("ws"),L=j("eventsource")}var D=function(){function t(t,e){void 0===e&&(e={}),this.features={},d.a.isRequired(t,"url"),this.logger=Object(d.d)(e.logger),this.baseUrl=this.resolveUrl(t),(e=e||{}).logMessageContent=e.logMessageContent||!1;var n="undefined"==typeof window;n||"undefined"==typeof WebSocket||e.WebSocket?n&&!e.WebSocket&&U&&(e.WebSocket=U):e.WebSocket=WebSocket,n||"undefined"==typeof EventSource||e.EventSource?n&&!e.EventSource&&void 0!==L&&(e.EventSource=L):e.EventSource=EventSource,this.httpClient=e.httpClient||new f(this.logger),this.connectionState=2,this.options=e,this.onreceive=null,this.onclose=null}return t.prototype.start=function(t){return t=t||S.Binary,d.a.isIn(t,S,"transferFormat"),this.logger.log(c.a.Debug,"Starting connection with transfer format '"+S[t]+"'."),2!==this.connectionState?Promise.reject(new Error("Cannot start a connection that is not in the 'Disconnected' state.")):(this.connectionState=0,this.startPromise=this.startInternal(t),this.startPromise)},t.prototype.send=function(t){if(1!==this.connectionState)throw new Error("Cannot send data if the connection is not in the 'Connected' State.");return this.transport.send(t)},t.prototype.stop=function(t){return M(this,void 0,void 0,function(){return B(this,function(e){switch(e.label){case 0:this.connectionState=2,this.stopError=t,e.label=1;case 1:return e.trys.push([1,3,,4]),[4,this.startPromise];case 2:return e.sent(),[3,4];case 3:return e.sent(),[3,4];case 4:return this.transport?[4,this.transport.stop()]:[3,6];case 5:e.sent(),this.transport=void 0,e.label=6;case 6:return[2]}})})},t.prototype.startInternal=function(t){return M(this,void 0,void 0,function(){var e,n,r,o,i,s,a,u=this;return B(this,function(l){switch(l.label){case 0:e=this.baseUrl,this.accessTokenFactory=this.options.accessTokenFactory,l.label=1;case 1:return l.trys.push([1,12,,13]),this.options.skipNegotiation?this.options.transport!==m.WebSockets?[3,3]:(this.transport=this.constructTransport(m.WebSockets),[4,this.transport.connect(e,t)]):[3,5];case 2:return l.sent(),[3,4];case 3:throw Error("Negotiation can only be skipped when using the WebSocket transport directly.");case 4:return[3,11];case 5:n=null,r=0,o=function(){var t;return B(this,function(o){switch(o.label){case 0:return[4,i.getNegotiationResponse(e)];case 1:if(n=o.sent(),2===i.connectionState)return[2,{value:void 0}];if(n.error)throw Error(n.error);if(n.ProtocolVersion)throw Error("Detected a connection attempt to an ASP.NET SignalR Server. This client only supports connecting to an ASP.NET Core SignalR Server. See https://aka.ms/signalr-core-differences for details.");return n.url&&(e=n.url),n.accessToken&&(t=n.accessToken,i.accessTokenFactory=function(){return t}),r++,[2]}})},i=this,l.label=6;case 6:return[5,o()];case 7:if("object"==typeof(s=l.sent()))return[2,s.value];l.label=8;case 8:if(n.url&&r<100)return[3,6];l.label=9;case 9:if(100===r&&n.url)throw Error("Negotiate redirection limit exceeded.");return[4,this.createTransport(e,this.options.transport,n,t)];case 10:l.sent(),l.label=11;case 11:return this.transport instanceof P&&(this.features.inherentKeepAlive=!0),this.transport.onreceive=this.onreceive,this.transport.onclose=function(t){return u.stopConnection(t)},this.changeState(0,1),[3,13];case 12:throw a=l.sent(),this.logger.log(c.a.Error,"Failed to start the connection: "+a),this.connectionState=2,this.transport=void 0,a;case 13:return[2]}})})},t.prototype.getNegotiationResponse=function(t){return M(this,void 0,void 0,function(){var e,n,r,o,i,s;return B(this,function(a){switch(a.label){case 0:return this.accessTokenFactory?[4,this.accessTokenFactory()]:[3,2];case 1:(r=a.sent())&&((e={}).Authorization="Bearer "+r,n=e),a.label=2;case 2:o=this.resolveNegotiateUrl(t),this.logger.log(c.a.Debug,"Sending negotiation request: "+o+"."),a.label=3;case 3:return a.trys.push([3,5,,6]),[4,this.httpClient.post(o,{content:"",headers:n})];case 4:if(200!==(i=a.sent()).statusCode)throw Error("Unexpected status code returned from negotiate "+i.statusCode);return[2,JSON.parse(i.content)];case 5:throw s=a.sent(),this.logger.log(c.a.Error,"Failed to complete negotiation with the server: "+s),s;case 6:return[2]}})})},t.prototype.createConnectUrl=function(t,e){return e?t+(-1===t.indexOf("?")?"?":"&")+"id="+e:t},t.prototype.createTransport=function(t,e,n,r){return M(this,void 0,void 0,function(){var o,i,s,a,u,l,h;return B(this,function(f){switch(f.label){case 0:return o=this.createConnectUrl(t,n.connectionId),this.isITransport(e)?(this.logger.log(c.a.Debug,"Connection was provided an instance of ITransport, using that directly."),this.transport=e,[4,this.transport.connect(o,r)]):[3,2];case 1:return f.sent(),this.changeState(0,1),[2];case 2:i=n.availableTransports||[],s=0,a=i,f.label=3;case 3:return s<a.length?(u=a[s],this.connectionState=0,"number"!=typeof(l=this.resolveTransport(u,e,r))?[3,8]:(this.transport=this.constructTransport(l),n.connectionId?[3,5]:[4,this.getNegotiationResponse(t)])):[3,9];case 4:n=f.sent(),o=this.createConnectUrl(t,n.connectionId),f.label=5;case 5:return f.trys.push([5,7,,8]),[4,this.transport.connect(o,r)];case 6:return f.sent(),this.changeState(0,1),[2];case 7:return h=f.sent(),this.logger.log(c.a.Error,"Failed to start the transport '"+m[l]+"': "+h),this.connectionState=2,n.connectionId=void 0,[3,8];case 8:return s++,[3,3];case 9:throw new Error("Unable to initialize any of the available transports.")}})})},t.prototype.constructTransport=function(t){switch(t){case m.WebSockets:if(!this.options.WebSocket)throw new Error("'WebSocket' is not supported in your environment.");return new x(this.httpClient,this.accessTokenFactory,this.logger,this.options.logMessageContent||!1,this.options.WebSocket);case m.ServerSentEvents:if(!this.options.EventSource)throw new Error("'EventSource' is not supported in your environment.");return new A(this.httpClient,this.accessTokenFactory,this.logger,this.options.logMessageContent||!1,this.options.EventSource);case m.LongPolling:return new P(this.httpClient,this.accessTokenFactory,this.logger,this.options.logMessageContent||!1);default:throw new Error("Unknown transport: "+t+".")}},t.prototype.resolveTransport=function(t,e,n){var r=m[t.transport];if(null==r)this.logger.log(c.a.Debug,"Skipping transport '"+t.transport+"' because it is not supported by this client.");else{var o=t.transferFormats.map(function(t){return S[t]});if(function(t,e){return!t||0!=(e&t)}(e,r))if(o.indexOf(n)>=0){if((r!==m.WebSockets||this.options.WebSocket)&&(r!==m.ServerSentEvents||this.options.EventSource))return this.logger.log(c.a.Debug,"Selecting transport '"+m[r]+"'."),r;this.logger.log(c.a.Debug,"Skipping transport '"+m[r]+"' because it is not supported in your environment.'")}else this.logger.log(c.a.Debug,"Skipping transport '"+m[r]+"' because it does not support the requested transfer format '"+S[n]+"'.");else this.logger.log(c.a.Debug,"Skipping transport '"+m[r]+"' because it was disabled by the client.")}return null},t.prototype.isITransport=function(t){return t&&"object"==typeof t&&"connect"in t},t.prototype.changeState=function(t,e){return this.connectionState===t&&(this.connectionState=e,!0)},t.prototype.stopConnection=function(t){this.transport=void 0,(t=this.stopError||t)?this.logger.log(c.a.Error,"Connection disconnected with error '"+t+"'."):this.logger.log(c.a.Information,"Connection disconnected."),this.connectionState=2,this.onclose&&this.onclose(t)},t.prototype.resolveUrl=function(t){if(0===t.lastIndexOf("https://",0)||0===t.lastIndexOf("http://",0))return t;if("undefined"==typeof window||!window||!window.document)throw new Error("Cannot resolve '"+t+"'.");var e=window.document.createElement("a");return e.href=t,this.logger.log(c.a.Information,"Normalizing '"+t+"' to '"+e.href+"'."),e.href},t.prototype.resolveNegotiateUrl=function(t){var e=t.indexOf("?"),n=t.substring(0,-1===e?t.length:e);return"/"!==n[n.length-1]&&(n+="/"),n+="negotiate",n+=-1===e?"":t.substring(e)},t}();var N=n(4),q=n(5),Y="json",F=function(){function t(){this.name=Y,this.version=1,this.transferFormat=S.Text}return t.prototype.parseMessages=function(t,e){if("string"!=typeof t)throw new Error("Invalid input for JSON hub protocol. Expected a string.");if(!t)return[];null===e&&(e=N.a.instance);for(var n=[],r=0,i=q.a.parse(t);r<i.length;r++){var s=i[r],a=JSON.parse(s);if("number"!=typeof a.type)throw new Error("Invalid payload.");switch(a.type){case o.Invocation:this.isInvocationMessage(a);break;case o.StreamItem:this.isStreamItemMessage(a);break;case o.Completion:this.isCompletionMessage(a);break;case o.Ping:case o.Close:break;default:e.log(c.a.Information,"Unknown message type '"+a.type+"' ignored.");continue}n.push(a)}return n},t.prototype.writeMessage=function(t){return q.a.write(JSON.stringify(t))},t.prototype.isInvocationMessage=function(t){this.assertNotEmptyString(t.target,"Invalid payload for Invocation message."),void 0!==t.invocationId&&this.assertNotEmptyString(t.invocationId,"Invalid payload for Invocation message.")},t.prototype.isStreamItemMessage=function(t){if(this.assertNotEmptyString(t.invocationId,"Invalid payload for StreamItem message."),void 0===t.item)throw new Error("Invalid payload for StreamItem message.")},t.prototype.isCompletionMessage=function(t){if(t.result&&t.error)throw new Error("Invalid payload for Completion message.");!t.result&&t.error&&this.assertNotEmptyString(t.error,"Invalid payload for Completion message."),this.assertNotEmptyString(t.invocationId,"Invalid payload for Completion message.")},t.prototype.assertNotEmptyString=function(t,e){if("string"!=typeof t||""===t)throw new Error(e)},t}(),H=function(){function t(){}return t.prototype.configureLogging=function(t){return d.a.isRequired(t,"logging"),void 0!==t.log?this.logger=t:this.logger=new d.b(t),this},t.prototype.withUrl=function(t,e){return d.a.isRequired(t,"url"),this.url=t,this.httpConnectionOptions="object"==typeof e?e:{transport:e},this},t.prototype.withHubProtocol=function(t){return d.a.isRequired(t,"protocol"),this.protocol=t,this},t.prototype.build=function(){var t=this.httpConnectionOptions||{};if(void 0===t.logger&&(t.logger=this.logger),!this.url)throw new Error("The 'HubConnectionBuilder.withUrl' method must be called before building the connection.");var e=new D(this.url,t);return E.create(e,this.logger||N.a.instance,this.protocol||new F)},t}();(()=>{const t=(new H).withUrl("/hub").configureLogging(c.a.Information).build();t.start().catch(t=>console.log("Caught error: ",t)),t.on("showTitleCard",t=>{console.log("Got showTitleCard message, model:",t),document.getElementById("title").innerText=t.title,document.getElementById("subTitle").innerText=t.subTitle,document.getElementById("titleCard").classList.add("visible")}),t.on("hideTitleCard",()=>{console.log("Got hideTitleCard message, hiding..."),document.getElementById("titleCard").classList.remove("visible")})})()}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0Bhc3BuZXQvc2lnbmFsci9kaXN0L2VzbS9JTG9nZ2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYXNwbmV0L3NpZ25hbHIvZGlzdC9lc20vVXRpbHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0Bhc3BuZXQvc2lnbmFsci9kaXN0L2VzbS9FcnJvcnMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0Bhc3BuZXQvc2lnbmFsci9kaXN0L2VzbS9IdHRwQ2xpZW50LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYXNwbmV0L3NpZ25hbHIvZGlzdC9lc20vTG9nZ2Vycy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGFzcG5ldC9zaWduYWxyL2Rpc3QvZXNtL1RleHRNZXNzYWdlRm9ybWF0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9idWZmZXIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0Bhc3BuZXQvc2lnbmFsci9kaXN0L2VzbS9Ob2RlSHR0cENsaWVudC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGFzcG5ldC9zaWduYWxyL2Rpc3QvZXNtL0hhbmRzaGFrZVByb3RvY29sLmpzIiwid2VicGFjazovLy8od2VicGFjaykvYnVpbGRpbi9nbG9iYWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Jhc2U2NC1qcy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaWVlZTc1NC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaXNhcnJheS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGFzcG5ldC9zaWduYWxyL2Rpc3QvZXNtL1hockh0dHBDbGllbnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0Bhc3BuZXQvc2lnbmFsci9kaXN0L2VzbS9JSHViUHJvdG9jb2wuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0Bhc3BuZXQvc2lnbmFsci9kaXN0L2VzbS9EZWZhdWx0SHR0cENsaWVudC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGFzcG5ldC9zaWduYWxyL2Rpc3QvZXNtL0h1YkNvbm5lY3Rpb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0Bhc3BuZXQvc2lnbmFsci9kaXN0L2VzbS9JVHJhbnNwb3J0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYXNwbmV0L3NpZ25hbHIvZGlzdC9lc20vQWJvcnRDb250cm9sbGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYXNwbmV0L3NpZ25hbHIvZGlzdC9lc20vTG9uZ1BvbGxpbmdUcmFuc3BvcnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0Bhc3BuZXQvc2lnbmFsci9kaXN0L2VzbS9TZXJ2ZXJTZW50RXZlbnRzVHJhbnNwb3J0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYXNwbmV0L3NpZ25hbHIvZGlzdC9lc20vV2ViU29ja2V0VHJhbnNwb3J0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYXNwbmV0L3NpZ25hbHIvZGlzdC9lc20vSHR0cENvbm5lY3Rpb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0Bhc3BuZXQvc2lnbmFsci9kaXN0L2VzbS9Kc29uSHViUHJvdG9jb2wuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0Bhc3BuZXQvc2lnbmFsci9kaXN0L2VzbS9IdWJDb25uZWN0aW9uQnVpbGRlci5qcyIsIndlYnBhY2s6Ly8vLi9TY3JpcHRzL2hhbmRsZUNvbm5lY3Rpb24udHMiLCJ3ZWJwYWNrOi8vLy4vU2NyaXB0cy9tYWluLnRzIl0sIm5hbWVzIjpbImluc3RhbGxlZE1vZHVsZXMiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJleHBvcnRzIiwibW9kdWxlIiwiaSIsImwiLCJtb2R1bGVzIiwiY2FsbCIsIm0iLCJjIiwiZCIsIm5hbWUiLCJnZXR0ZXIiLCJvIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiciIsIlN5bWJvbCIsInRvU3RyaW5nVGFnIiwidmFsdWUiLCJ0IiwibW9kZSIsIl9fZXNNb2R1bGUiLCJucyIsImNyZWF0ZSIsImtleSIsImJpbmQiLCJuIiwib2JqZWN0IiwicHJvcGVydHkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsInAiLCJzIiwiTG9nTGV2ZWwiLCJfX3dlYnBhY2tfZXhwb3J0c19fIiwiQXJnIiwiZ2V0RGF0YURldGFpbCIsImlzQXJyYXlCdWZmZXIiLCJzZW5kTWVzc2FnZSIsImNyZWF0ZUxvZ2dlciIsIlN1YmplY3QiLCJDb25zb2xlTG9nZ2VyIiwiX0lMb2dnZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXyIsIl9Mb2dnZXJzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX18iLCJfX2F3YWl0ZXIiLCJ0aGlzQXJnIiwiX2FyZ3VtZW50cyIsIlAiLCJnZW5lcmF0b3IiLCJQcm9taXNlIiwicmVzb2x2ZSIsInJlamVjdCIsImZ1bGZpbGxlZCIsInN0ZXAiLCJuZXh0IiwiZSIsInJlamVjdGVkIiwicmVzdWx0IiwiZG9uZSIsInRoZW4iLCJhcHBseSIsIl9fZ2VuZXJhdG9yIiwiYm9keSIsImYiLCJ5IiwiZyIsIl8iLCJsYWJlbCIsInNlbnQiLCJ0cnlzIiwib3BzIiwidmVyYiIsInRocm93IiwicmV0dXJuIiwiaXRlcmF0b3IiLCJ0aGlzIiwidiIsIm9wIiwiVHlwZUVycm9yIiwicG9wIiwibGVuZ3RoIiwicHVzaCIsImlzUmVxdWlyZWQiLCJ2YWwiLCJFcnJvciIsImlzSW4iLCJ2YWx1ZXMiLCJkYXRhIiwiaW5jbHVkZUNvbnRlbnQiLCJkZXRhaWwiLCJieXRlTGVuZ3RoIiwidmlldyIsIlVpbnQ4QXJyYXkiLCJzdHIiLCJmb3JFYWNoIiwibnVtIiwidG9TdHJpbmciLCJzdWJzdHIiLCJmb3JtYXRBcnJheUJ1ZmZlciIsIkFycmF5QnVmZmVyIiwiY29uc3RydWN0b3IiLCJsb2dnZXIiLCJ0cmFuc3BvcnROYW1lIiwiaHR0cENsaWVudCIsInVybCIsImFjY2Vzc1Rva2VuRmFjdG9yeSIsImNvbnRlbnQiLCJsb2dNZXNzYWdlQ29udGVudCIsIl9hIiwiaGVhZGVycyIsInRva2VuIiwicmVzcG9uc2VUeXBlIiwicmVzcG9uc2UiLCJfYiIsImxvZyIsIlRyYWNlIiwicG9zdCIsInN0YXR1c0NvZGUiLCJ1bmRlZmluZWQiLCJJbmZvcm1hdGlvbiIsImluc3RhbmNlIiwib2JzZXJ2ZXJzIiwiaXRlbSIsIl9pIiwiZXJyb3IiLCJlcnIiLCJvYnNlcnZlciIsImNvbXBsZXRlIiwic3Vic2NyaWJlIiwiU3ViamVjdFN1YnNjcmlwdGlvbiIsInN1YmplY3QiLCJkaXNwb3NlIiwiaW5kZXgiLCJpbmRleE9mIiwic3BsaWNlIiwiY2FuY2VsQ2FsbGJhY2siLCJjYXRjaCIsIm1pbmltdW1Mb2dMZXZlbCIsImxvZ0xldmVsIiwibWVzc2FnZSIsIkNyaXRpY2FsIiwiY29uc29sZSIsIkRhdGUiLCJ0b0lTT1N0cmluZyIsIldhcm5pbmciLCJ3YXJuIiwiaW5mbyIsIkh0dHBFcnJvciIsIlRpbWVvdXRFcnJvciIsIkFib3J0RXJyb3IiLCJleHRlbmRTdGF0aWNzIiwiX19leHRlbmRzIiwic2V0UHJvdG90eXBlT2YiLCJfX3Byb3RvX18iLCJBcnJheSIsImIiLCJfXyIsIl9zdXBlciIsImVycm9yTWVzc2FnZSIsIl90aGlzIiwidHJ1ZVByb3RvIiwiSHR0cFJlc3BvbnNlIiwiSHR0cENsaWVudCIsIl9fYXNzaWduIiwiYXNzaWduIiwiYXJndW1lbnRzIiwic3RhdHVzVGV4dCIsIm9wdGlvbnMiLCJzZW5kIiwibWV0aG9kIiwiZGVsZXRlIiwiZ2V0Q29va2llU3RyaW5nIiwiTnVsbExvZ2dlciIsIl9sb2dMZXZlbCIsIl9tZXNzYWdlIiwiVGV4dE1lc3NhZ2VGb3JtYXQiLCJ3cml0ZSIsIm91dHB1dCIsIlJlY29yZFNlcGFyYXRvciIsInBhcnNlIiwiaW5wdXQiLCJtZXNzYWdlcyIsInNwbGl0IiwiUmVjb3JkU2VwYXJhdG9yQ29kZSIsIlN0cmluZyIsImZyb21DaGFyQ29kZSIsImdsb2JhbCIsImJhc2U2NCIsImllZWU3NTQiLCJpc0FycmF5Iiwia01heExlbmd0aCIsIkJ1ZmZlciIsIlRZUEVEX0FSUkFZX1NVUFBPUlQiLCJjcmVhdGVCdWZmZXIiLCJ0aGF0IiwiUmFuZ2VFcnJvciIsImFyZyIsImVuY29kaW5nT3JPZmZzZXQiLCJhbGxvY1Vuc2FmZSIsImZyb20iLCJhcnJheSIsImJ5dGVPZmZzZXQiLCJmcm9tQXJyYXlMaWtlIiwiZnJvbUFycmF5QnVmZmVyIiwic3RyaW5nIiwiZW5jb2RpbmciLCJpc0VuY29kaW5nIiwiYWN0dWFsIiwic2xpY2UiLCJmcm9tU3RyaW5nIiwib2JqIiwiaXNCdWZmZXIiLCJsZW4iLCJjaGVja2VkIiwiY29weSIsImJ1ZmZlciIsInR5cGUiLCJmcm9tT2JqZWN0IiwiYXNzZXJ0U2l6ZSIsInNpemUiLCJpc1ZpZXciLCJsb3dlcmVkQ2FzZSIsInV0ZjhUb0J5dGVzIiwiYmFzZTY0VG9CeXRlcyIsInRvTG93ZXJDYXNlIiwic3dhcCIsImJpZGlyZWN0aW9uYWxJbmRleE9mIiwiZGlyIiwiaXNOYU4iLCJhcnJheUluZGV4T2YiLCJsYXN0SW5kZXhPZiIsImFyciIsImluZGV4U2l6ZSIsImFyckxlbmd0aCIsInZhbExlbmd0aCIsInJlYWQiLCJidWYiLCJyZWFkVUludDE2QkUiLCJmb3VuZEluZGV4IiwiZm91bmQiLCJqIiwiaGV4V3JpdGUiLCJvZmZzZXQiLCJOdW1iZXIiLCJyZW1haW5pbmciLCJzdHJMZW4iLCJwYXJzZWQiLCJwYXJzZUludCIsInV0ZjhXcml0ZSIsImJsaXRCdWZmZXIiLCJhc2NpaVdyaXRlIiwiYnl0ZUFycmF5IiwiY2hhckNvZGVBdCIsImFzY2lpVG9CeXRlcyIsImxhdGluMVdyaXRlIiwiYmFzZTY0V3JpdGUiLCJ1Y3MyV3JpdGUiLCJ1bml0cyIsImhpIiwibG8iLCJ1dGYxNmxlVG9CeXRlcyIsImJhc2U2NFNsaWNlIiwic3RhcnQiLCJlbmQiLCJmcm9tQnl0ZUFycmF5IiwidXRmOFNsaWNlIiwiTWF0aCIsIm1pbiIsInJlcyIsInNlY29uZEJ5dGUiLCJ0aGlyZEJ5dGUiLCJmb3VydGhCeXRlIiwidGVtcENvZGVQb2ludCIsImZpcnN0Qnl0ZSIsImNvZGVQb2ludCIsImJ5dGVzUGVyU2VxdWVuY2UiLCJjb2RlUG9pbnRzIiwiTUFYX0FSR1VNRU5UU19MRU5HVEgiLCJkZWNvZGVDb2RlUG9pbnRzQXJyYXkiLCJTbG93QnVmZmVyIiwiYWxsb2MiLCJJTlNQRUNUX01BWF9CWVRFUyIsImZvbyIsInN1YmFycmF5IiwidHlwZWRBcnJheVN1cHBvcnQiLCJwb29sU2l6ZSIsIl9hdWdtZW50Iiwic3BlY2llcyIsImNvbmZpZ3VyYWJsZSIsImZpbGwiLCJhbGxvY1Vuc2FmZVNsb3ciLCJfaXNCdWZmZXIiLCJjb21wYXJlIiwiYSIsIngiLCJjb25jYXQiLCJsaXN0IiwicG9zIiwic3dhcDE2Iiwic3dhcDMyIiwic3dhcDY0IiwiaGV4U2xpY2UiLCJhc2NpaVNsaWNlIiwibGF0aW4xU2xpY2UiLCJ1dGYxNmxlU2xpY2UiLCJlcXVhbHMiLCJpbnNwZWN0IiwibWF4IiwibWF0Y2giLCJqb2luIiwidGFyZ2V0IiwidGhpc1N0YXJ0IiwidGhpc0VuZCIsInRoaXNDb3B5IiwidGFyZ2V0Q29weSIsImluY2x1ZGVzIiwiaXNGaW5pdGUiLCJ0b0pTT04iLCJfYXJyIiwicmV0Iiwib3V0IiwidG9IZXgiLCJieXRlcyIsImNoZWNrT2Zmc2V0IiwiZXh0IiwiY2hlY2tJbnQiLCJvYmplY3RXcml0ZVVJbnQxNiIsImxpdHRsZUVuZGlhbiIsIm9iamVjdFdyaXRlVUludDMyIiwiY2hlY2tJRUVFNzU0Iiwid3JpdGVGbG9hdCIsIm5vQXNzZXJ0Iiwid3JpdGVEb3VibGUiLCJuZXdCdWYiLCJzbGljZUxlbiIsInJlYWRVSW50TEUiLCJtdWwiLCJyZWFkVUludEJFIiwicmVhZFVJbnQ4IiwicmVhZFVJbnQxNkxFIiwicmVhZFVJbnQzMkxFIiwicmVhZFVJbnQzMkJFIiwicmVhZEludExFIiwicG93IiwicmVhZEludEJFIiwicmVhZEludDgiLCJyZWFkSW50MTZMRSIsInJlYWRJbnQxNkJFIiwicmVhZEludDMyTEUiLCJyZWFkSW50MzJCRSIsInJlYWRGbG9hdExFIiwicmVhZEZsb2F0QkUiLCJyZWFkRG91YmxlTEUiLCJyZWFkRG91YmxlQkUiLCJ3cml0ZVVJbnRMRSIsIndyaXRlVUludEJFIiwid3JpdGVVSW50OCIsImZsb29yIiwid3JpdGVVSW50MTZMRSIsIndyaXRlVUludDE2QkUiLCJ3cml0ZVVJbnQzMkxFIiwid3JpdGVVSW50MzJCRSIsIndyaXRlSW50TEUiLCJsaW1pdCIsInN1YiIsIndyaXRlSW50QkUiLCJ3cml0ZUludDgiLCJ3cml0ZUludDE2TEUiLCJ3cml0ZUludDE2QkUiLCJ3cml0ZUludDMyTEUiLCJ3cml0ZUludDMyQkUiLCJ3cml0ZUZsb2F0TEUiLCJ3cml0ZUZsb2F0QkUiLCJ3cml0ZURvdWJsZUxFIiwid3JpdGVEb3VibGVCRSIsInRhcmdldFN0YXJ0Iiwic2V0IiwiY29kZSIsIklOVkFMSURfQkFTRTY0X1JFIiwiSW5maW5pdHkiLCJsZWFkU3Vycm9nYXRlIiwidG9CeXRlQXJyYXkiLCJ0cmltIiwicmVwbGFjZSIsInN0cmluZ3RyaW0iLCJiYXNlNjRjbGVhbiIsInNyYyIsImRzdCIsIk5vZGVIdHRwQ2xpZW50IiwicmVxdWVzdE1vZHVsZSIsIl9FcnJvcnNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXyIsIl9IdHRwQ2xpZW50X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX18iLCJfSUxvZ2dlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fIiwiX1V0aWxzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8zX18iLCJYTUxIdHRwUmVxdWVzdCIsInJlcXVpcmVGdW5jIiwicmVxdWlyZSIsImNvb2tpZUphciIsImphciIsInJlcXVlc3QiLCJkZWZhdWx0cyIsImh0dHBSZXF1ZXN0IiwicmVxdWVzdEJvZHkiLCJjdXJyZW50UmVxdWVzdCIsIlgtUmVxdWVzdGVkLVdpdGgiLCJ0aW1lb3V0IiwiYWJvcnRTaWduYWwiLCJvbmFib3J0Iiwic3RhdHVzTWVzc2FnZSIsImFib3J0IiwiSGFuZHNoYWtlUHJvdG9jb2wiLCJfVGV4dE1lc3NhZ2VGb3JtYXRfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXyIsIl9VdGlsc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fIiwid3JpdGVIYW5kc2hha2VSZXF1ZXN0IiwiaGFuZHNoYWtlUmVxdWVzdCIsIkpTT04iLCJzdHJpbmdpZnkiLCJwYXJzZUhhbmRzaGFrZVJlc3BvbnNlIiwibWVzc2FnZURhdGEiLCJyZW1haW5pbmdEYXRhIiwiYmluYXJ5RGF0YSIsInNlcGFyYXRvckluZGV4IiwicmVzcG9uc2VMZW5ndGgiLCJ0ZXh0RGF0YSIsInN1YnN0cmluZyIsIkZ1bmN0aW9uIiwid2luZG93IiwiYjY0IiwibGVucyIsImdldExlbnMiLCJ2YWxpZExlbiIsInBsYWNlSG9sZGVyc0xlbiIsInRtcCIsIkFyciIsIl9ieXRlTGVuZ3RoIiwiY3VyQnl0ZSIsInJldkxvb2t1cCIsInVpbnQ4IiwiZXh0cmFCeXRlcyIsInBhcnRzIiwibGVuMiIsImVuY29kZUNodW5rIiwibG9va3VwIiwiaXNMRSIsIm1MZW4iLCJuQnl0ZXMiLCJlTGVuIiwiZU1heCIsImVCaWFzIiwibkJpdHMiLCJOYU4iLCJydCIsImFicyIsIkxOMiIsIk1lc3NhZ2VUeXBlIiwiWGhySHR0cENsaWVudF9YaHJIdHRwQ2xpZW50IiwiWGhySHR0cENsaWVudCIsImFib3J0ZWQiLCJFcnJvcnMiLCJ4aHIiLCJvcGVuIiwid2l0aENyZWRlbnRpYWxzIiwic2V0UmVxdWVzdEhlYWRlciIsImtleXMiLCJoZWFkZXIiLCJvbmxvYWQiLCJzdGF0dXMiLCJyZXNwb25zZVRleHQiLCJvbmVycm9yIiwiSUxvZ2dlciIsIm9udGltZW91dCIsIkRlZmF1bHRIdHRwQ2xpZW50X2V4dGVuZHMiLCJEZWZhdWx0SHR0cENsaWVudF9EZWZhdWx0SHR0cENsaWVudCIsIkRlZmF1bHRIdHRwQ2xpZW50IiwiSHViQ29ubmVjdGlvblN0YXRlIiwiREVGQVVMVF9USU1FT1VUX0lOX01TIiwiREVGQVVMVF9QSU5HX0lOVEVSVkFMX0lOX01TIiwiSHR0cFRyYW5zcG9ydFR5cGUiLCJUcmFuc2ZlckZvcm1hdCIsIkh1YkNvbm5lY3Rpb25fSHViQ29ubmVjdGlvbiIsIkh1YkNvbm5lY3Rpb24iLCJjb25uZWN0aW9uIiwicHJvdG9jb2wiLCJVdGlscyIsInNlcnZlclRpbWVvdXRJbk1pbGxpc2Vjb25kcyIsImtlZXBBbGl2ZUludGVydmFsSW5NaWxsaXNlY29uZHMiLCJoYW5kc2hha2VQcm90b2NvbCIsIm9ucmVjZWl2ZSIsInByb2Nlc3NJbmNvbWluZ0RhdGEiLCJvbmNsb3NlIiwiY29ubmVjdGlvbkNsb3NlZCIsImNhbGxiYWNrcyIsIm1ldGhvZHMiLCJjbG9zZWRDYWxsYmFja3MiLCJpZCIsInJlY2VpdmVkSGFuZHNoYWtlUmVzcG9uc2UiLCJjb25uZWN0aW9uU3RhdGUiLCJEaXNjb25uZWN0ZWQiLCJjYWNoZWRQaW5nTWVzc2FnZSIsIndyaXRlTWVzc2FnZSIsIlBpbmciLCJoYW5kc2hha2VQcm9taXNlIiwidmVyc2lvbiIsIkRlYnVnIiwiaGFuZHNoYWtlUmVzb2x2ZXIiLCJoYW5kc2hha2VSZWplY3RlciIsInRyYW5zZmVyRm9ybWF0IiwiY2xlYW51cFRpbWVvdXQiLCJyZXNldFRpbWVvdXRQZXJpb2QiLCJyZXNldEtlZXBBbGl2ZUludGVydmFsIiwiQ29ubmVjdGVkIiwic3RvcCIsImNsZWFudXBQaW5nVGltZXIiLCJzdHJlYW0iLCJtZXRob2ROYW1lIiwiYXJncyIsInByb21pc2VRdWV1ZSIsImludm9jYXRpb25EZXNjcmlwdG9yIiwiY3JlYXRlU3RyZWFtSW52b2NhdGlvbiIsImNhbmNlbEludm9jYXRpb24iLCJjcmVhdGVDYW5jZWxJbnZvY2F0aW9uIiwiaW52b2NhdGlvbklkIiwiY2FuY2VsTWVzc2FnZSIsImludm9jYXRpb25FdmVudCIsIkNvbXBsZXRpb24iLCJjcmVhdGVJbnZvY2F0aW9uIiwiaW52b2tlIiwib24iLCJuZXdNZXRob2QiLCJvZmYiLCJoYW5kbGVycyIsInJlbW92ZUlkeCIsImNhbGxiYWNrIiwicHJvY2Vzc0hhbmRzaGFrZVJlc3BvbnNlIiwibWVzc2FnZXNfMSIsInBhcnNlTWVzc2FnZXMiLCJJbnZvY2F0aW9uIiwiaW52b2tlQ2xpZW50TWV0aG9kIiwiU3RyZWFtSXRlbSIsIkNsb3NlIiwicmVzcG9uc2VNZXNzYWdlIiwicGluZ1NlcnZlckhhbmRsZSIsInNldFRpbWVvdXQiLCJmZWF0dXJlcyIsImluaGVyZW50S2VlcEFsaXZlIiwidGltZW91dEhhbmRsZSIsInNlcnZlclRpbWVvdXQiLCJpbnZvY2F0aW9uTWVzc2FnZSIsImNsZWFyVGltZW91dCIsIm5vbmJsb2NraW5nIiwiU3RyZWFtSW52b2NhdGlvbiIsIkNhbmNlbEludm9jYXRpb24iLCJBYm9ydENvbnRyb2xsZXIiLCJpc0Fib3J0ZWQiLCJMb25nUG9sbGluZ1RyYW5zcG9ydF9hd2FpdGVyIiwiTG9uZ1BvbGxpbmdUcmFuc3BvcnRfZ2VuZXJhdG9yIiwiTG9uZ1BvbGxpbmdUcmFuc3BvcnRfTG9uZ1BvbGxpbmdUcmFuc3BvcnQiLCJMb25nUG9sbGluZ1RyYW5zcG9ydCIsInBvbGxBYm9ydCIsInJ1bm5pbmciLCJjb25uZWN0IiwicG9sbE9wdGlvbnMiLCJwb2xsVXJsIiwiQmluYXJ5Iiwic2lnbmFsIiwiZ2V0QWNjZXNzVG9rZW4iLCJ1cGRhdGVIZWFkZXJUb2tlbiIsIm5vdyIsImNsb3NlRXJyb3IiLCJyZWNlaXZpbmciLCJwb2xsIiwiZV8xIiwicG9sbEFib3J0ZWQiLCJyYWlzZU9uQ2xvc2UiLCJkZWxldGVPcHRpb25zIiwibG9nTWVzc2FnZSIsIlNlcnZlclNlbnRFdmVudHNUcmFuc3BvcnRfYXdhaXRlciIsIlNlcnZlclNlbnRFdmVudHNUcmFuc3BvcnRfZ2VuZXJhdG9yIiwiU2VydmVyU2VudEV2ZW50c1RyYW5zcG9ydF9TZXJ2ZXJTZW50RXZlbnRzVHJhbnNwb3J0IiwiU2VydmVyU2VudEV2ZW50c1RyYW5zcG9ydCIsImV2ZW50U291cmNlQ29uc3RydWN0b3IiLCJlbmNvZGVVUklDb21wb25lbnQiLCJvcGVuZWQiLCJUZXh0IiwiZXZlbnRTb3VyY2UiLCJjb29raWVzIiwiQ29va2llIiwib25tZXNzYWdlIiwiY2xvc2UiLCJvbm9wZW4iLCJXZWJTb2NrZXRUcmFuc3BvcnRfYXdhaXRlciIsIldlYlNvY2tldFRyYW5zcG9ydF9nZW5lcmF0b3IiLCJXZWJTb2NrZXRUcmFuc3BvcnRfV2ViU29ja2V0VHJhbnNwb3J0IiwiV2ViU29ja2V0VHJhbnNwb3J0Iiwid2ViU29ja2V0Q29uc3RydWN0b3IiLCJ3ZWJTb2NrZXQiLCJiaW5hcnlUeXBlIiwiX2V2ZW50IiwiZXZlbnQiLCJFcnJvckV2ZW50IiwicmVhZHlTdGF0ZSIsIk9QRU4iLCJ3YXNDbGVhbiIsInJlYXNvbiIsIkh0dHBDb25uZWN0aW9uX2F3YWl0ZXIiLCJIdHRwQ29ubmVjdGlvbl9nZW5lcmF0b3IiLCJXZWJTb2NrZXRNb2R1bGUiLCJFdmVudFNvdXJjZU1vZHVsZSIsIkh0dHBDb25uZWN0aW9uX0h0dHBDb25uZWN0aW9uIiwiSHR0cENvbm5lY3Rpb24iLCJiYXNlVXJsIiwicmVzb2x2ZVVybCIsImlzTm9kZSIsIldlYlNvY2tldCIsIkV2ZW50U291cmNlIiwic3RhcnRQcm9taXNlIiwic3RhcnRJbnRlcm5hbCIsInRyYW5zcG9ydCIsInN0b3BFcnJvciIsIm5lZ290aWF0ZVJlc3BvbnNlIiwicmVkaXJlY3RzIiwiX2xvb3BfMSIsInRoaXNfMSIsInN0YXRlXzEiLCJlXzIiLCJza2lwTmVnb3RpYXRpb24iLCJXZWJTb2NrZXRzIiwiY29uc3RydWN0VHJhbnNwb3J0IiwiYWNjZXNzVG9rZW5fMSIsImdldE5lZ290aWF0aW9uUmVzcG9uc2UiLCJQcm90b2NvbFZlcnNpb24iLCJhY2Nlc3NUb2tlbiIsImNyZWF0ZVRyYW5zcG9ydCIsInN0b3BDb25uZWN0aW9uIiwiY2hhbmdlU3RhdGUiLCJuZWdvdGlhdGVVcmwiLCJlXzMiLCJyZXNvbHZlTmVnb3RpYXRlVXJsIiwiY3JlYXRlQ29ubmVjdFVybCIsImNvbm5lY3Rpb25JZCIsInJlcXVlc3RlZFRyYW5zcG9ydCIsInJlcXVlc3RlZFRyYW5zZmVyRm9ybWF0IiwiY29ubmVjdFVybCIsInRyYW5zcG9ydHMiLCJ0cmFuc3BvcnRzXzEiLCJlbmRwb2ludCIsImV4XzEiLCJpc0lUcmFuc3BvcnQiLCJhdmFpbGFibGVUcmFuc3BvcnRzIiwicmVzb2x2ZVRyYW5zcG9ydCIsIlNlcnZlclNlbnRFdmVudHMiLCJMb25nUG9sbGluZyIsInRyYW5zZmVyRm9ybWF0cyIsIm1hcCIsImFjdHVhbFRyYW5zcG9ydCIsInRyYW5zcG9ydE1hdGNoZXMiLCJ0byIsImRvY3VtZW50IiwiYVRhZyIsImNyZWF0ZUVsZW1lbnQiLCJocmVmIiwiSlNPTl9IVUJfUFJPVE9DT0xfTkFNRSIsIkpzb25IdWJQcm90b2NvbF9Kc29uSHViUHJvdG9jb2wiLCJKc29uSHViUHJvdG9jb2wiLCJMb2dnZXJzIiwiaHViTWVzc2FnZXMiLCJwYXJzZWRNZXNzYWdlIiwiaXNJbnZvY2F0aW9uTWVzc2FnZSIsImlzU3RyZWFtSXRlbU1lc3NhZ2UiLCJpc0NvbXBsZXRpb25NZXNzYWdlIiwiYXNzZXJ0Tm90RW1wdHlTdHJpbmciLCJIdWJDb25uZWN0aW9uQnVpbGRlcl9IdWJDb25uZWN0aW9uQnVpbGRlciIsIkh1YkNvbm5lY3Rpb25CdWlsZGVyIiwiY29uZmlndXJlTG9nZ2luZyIsImxvZ2dpbmciLCJ3aXRoVXJsIiwidHJhbnNwb3J0VHlwZU9yT3B0aW9ucyIsImh0dHBDb25uZWN0aW9uT3B0aW9ucyIsIndpdGhIdWJQcm90b2NvbCIsImJ1aWxkIiwidGl0bGVDYXJkIiwiZ2V0RWxlbWVudEJ5SWQiLCJpbm5lclRleHQiLCJ0aXRs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RUF6RHdCLEdDTEEsTUFFcEIsTUFBTS9MLEdBQWEsSUFBSThMLEdBQ2xCSSxRQUFRLFFBQ1JGLGlCQUFpQjVNLEVBQUEsRUFBaUI5VixhQUNsQ2dqQixRQUVMdE0sRUFBVzNOLFFBQVE5SCxNQUFNWCxHQUFPZ0IsUUFBUTNCLElBQUksaUJBQWtCVyxJQUU5RG9XLEVBQVc4QyxHQUFHLGdCQUFrQnlKLElBRTVCM2hCLFFBQVEzQixJQUFJLG9DQUFxQ3NqQixHQUNqRHZCLFNBQVN3QixlQUFlLFNBQVNDLFVBQVlGLEVBQVVHLE1BQ3ZEMUIsU0FBU3dCLGVBQWUsWUFBWUMsVUFBWUYsRUFBVUksU0FDMUQzQixTQUFTd0IsZUFBZSxhQUFhSSxVQUFVQyxJQUFJLGFBR3ZEN00sRUFBVzhDLEdBQUcsZ0JBQWlCLEtBQzNCbFksUUFBUTNCLElBQUksd0NBQ1oraEIsU0FBU3dCLGVBQWUsYUFBYUksVUFBVUUsT0FBTyxjQ3BCOURDIiwiZmlsZSI6ImJ1bmRsZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIiBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbiBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG5cbiBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cbiBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4gXHRcdH1cbiBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbiBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuIFx0XHRcdGk6IG1vZHVsZUlkLFxuIFx0XHRcdGw6IGZhbHNlLFxuIFx0XHRcdGV4cG9ydHM6IHt9XG4gXHRcdH07XG5cbiBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG4gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbiBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuXG4gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbiBcdH1cblxuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbiBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG5cbiBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XG4gXHRcdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGdldHRlciB9KTtcbiBcdFx0fVxuIFx0fTtcblxuIFx0Ly8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yID0gZnVuY3Rpb24oZXhwb3J0cykge1xuIFx0XHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcbiBcdFx0fVxuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuIFx0fTtcblxuIFx0Ly8gY3JlYXRlIGEgZmFrZSBuYW1lc3BhY2Ugb2JqZWN0XG4gXHQvLyBtb2RlICYgMTogdmFsdWUgaXMgYSBtb2R1bGUgaWQsIHJlcXVpcmUgaXRcbiBcdC8vIG1vZGUgJiAyOiBtZXJnZSBhbGwgcHJvcGVydGllcyBvZiB2YWx1ZSBpbnRvIHRoZSBuc1xuIFx0Ly8gbW9kZSAmIDQ6IHJldHVybiB2YWx1ZSB3aGVuIGFscmVhZHkgbnMgb2JqZWN0XG4gXHQvLyBtb2RlICYgOHwxOiBiZWhhdmUgbGlrZSByZXF1aXJlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnQgPSBmdW5jdGlvbih2YWx1ZSwgbW9kZSkge1xuIFx0XHRpZihtb2RlICYgMSkgdmFsdWUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKHZhbHVlKTtcbiBcdFx0aWYobW9kZSAmIDgpIHJldHVybiB2YWx1ZTtcbiBcdFx0aWYoKG1vZGUgJiA0KSAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIHZhbHVlICYmIHZhbHVlLl9fZXNNb2R1bGUpIHJldHVybiB2YWx1ZTtcbiBcdFx0dmFyIG5zID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yKG5zKTtcbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG5zLCAnZGVmYXVsdCcsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHZhbHVlIH0pO1xuIFx0XHRpZihtb2RlICYgMiAmJiB0eXBlb2YgdmFsdWUgIT0gJ3N0cmluZycpIGZvcih2YXIga2V5IGluIHZhbHVlKSBfX3dlYnBhY2tfcmVxdWlyZV9fLmQobnMsIGtleSwgZnVuY3Rpb24oa2V5KSB7IHJldHVybiB2YWx1ZVtrZXldOyB9LmJpbmQobnVsbCwga2V5KSk7XG4gXHRcdHJldHVybiBucztcbiBcdH07XG5cbiBcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcbiBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbiBcdFx0XHRmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4gXHRcdHJldHVybiBnZXR0ZXI7XG4gXHR9O1xuXG4gXHQvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGxcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcblxuIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG5cblxuIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSAxMyk7XG4iLCIvLyBDb3B5cmlnaHQgKGMpIC5ORVQgRm91bmRhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMC4gU2VlIExpY2Vuc2UudHh0IGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXHJcbi8vIFRoZXNlIHZhbHVlcyBhcmUgZGVzaWduZWQgdG8gbWF0Y2ggdGhlIEFTUC5ORVQgTG9nIExldmVscyBzaW5jZSB0aGF0J3MgdGhlIHBhdHRlcm4gd2UncmUgZW11bGF0aW5nIGhlcmUuXHJcbi8qKiBJbmRpY2F0ZXMgdGhlIHNldmVyaXR5IG9mIGEgbG9nIG1lc3NhZ2UuXHJcbiAqXHJcbiAqIExvZyBMZXZlbHMgYXJlIG9yZGVyZWQgaW4gaW5jcmVhc2luZyBzZXZlcml0eS4gU28gYERlYnVnYCBpcyBtb3JlIHNldmVyZSB0aGFuIGBUcmFjZWAsIGV0Yy5cclxuICovXHJcbmV4cG9ydCB2YXIgTG9nTGV2ZWw7XHJcbihmdW5jdGlvbiAoTG9nTGV2ZWwpIHtcclxuICAgIC8qKiBMb2cgbGV2ZWwgZm9yIHZlcnkgbG93IHNldmVyaXR5IGRpYWdub3N0aWMgbWVzc2FnZXMuICovXHJcbiAgICBMb2dMZXZlbFtMb2dMZXZlbFtcIlRyYWNlXCJdID0gMF0gPSBcIlRyYWNlXCI7XHJcbiAgICAvKiogTG9nIGxldmVsIGZvciBsb3cgc2V2ZXJpdHkgZGlhZ25vc3RpYyBtZXNzYWdlcy4gKi9cclxuICAgIExvZ0xldmVsW0xvZ0xldmVsW1wiRGVidWdcIl0gPSAxXSA9IFwiRGVidWdcIjtcclxuICAgIC8qKiBMb2cgbGV2ZWwgZm9yIGluZm9ybWF0aW9uYWwgZGlhZ25vc3RpYyBtZXNzYWdlcy4gKi9cclxuICAgIExvZ0xldmVsW0xvZ0xldmVsW1wiSW5mb3JtYXRpb25cIl0gPSAyXSA9IFwiSW5mb3JtYXRpb25cIjtcclxuICAgIC8qKiBMb2cgbGV2ZWwgZm9yIGRpYWdub3N0aWMgbWVzc2FnZXMgdGhhdCBpbmRpY2F0ZSBhIG5vbi1mYXRhbCBwcm9ibGVtLiAqL1xyXG4gICAgTG9nTGV2ZWxbTG9nTGV2ZWxbXCJXYXJuaW5nXCJdID0gM10gPSBcIldhcm5pbmdcIjtcclxuICAgIC8qKiBMb2cgbGV2ZWwgZm9yIGRpYWdub3N0aWMgbWVzc2FnZXMgdGhhdCBpbmRpY2F0ZSBhIGZhaWx1cmUgaW4gdGhlIGN1cnJlbnQgb3BlcmF0aW9uLiAqL1xyXG4gICAgTG9nTGV2ZWxbTG9nTGV2ZWxbXCJFcnJvclwiXSA9IDRdID0gXCJFcnJvclwiO1xyXG4gICAgLyoqIExvZyBsZXZlbCBmb3IgZGlhZ25vc3RpYyBtZXNzYWdlcyB0aGF0IGluZGljYXRlIGEgZmFpbHVyZSB0aGF0IHdpbGwgdGVybWluYXRlIHRoZSBlbnRpcmUgYXBwbGljYXRpb24uICovXHJcbiAgICBMb2dMZXZlbFtMb2dMZXZlbFtcIkNyaXRpY2FsXCJdID0gNV0gPSBcIkNyaXRpY2FsXCI7XHJcbiAgICAvKiogVGhlIGhpZ2hlc3QgcG9zc2libGUgbG9nIGxldmVsLiBVc2VkIHdoZW4gY29uZmlndXJpbmcgbG9nZ2luZyB0byBpbmRpY2F0ZSB0aGF0IG5vIGxvZyBtZXNzYWdlcyBzaG91bGQgYmUgZW1pdHRlZC4gKi9cclxuICAgIExvZ0xldmVsW0xvZ0xldmVsW1wiTm9uZVwiXSA9IDZdID0gXCJOb25lXCI7XHJcbn0pKExvZ0xldmVsIHx8IChMb2dMZXZlbCA9IHt9KSk7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUlMb2dnZXIuanMubWFwIiwiLy8gQ29weXJpZ2h0IChjKSAuTkVUIEZvdW5kYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAuIFNlZSBMaWNlbnNlLnR4dCBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxyXG52YXIgX19hd2FpdGVyID0gKHRoaXMgJiYgdGhpcy5fX2F3YWl0ZXIpIHx8IGZ1bmN0aW9uICh0aGlzQXJnLCBfYXJndW1lbnRzLCBQLCBnZW5lcmF0b3IpIHtcclxuICAgIHJldHVybiBuZXcgKFAgfHwgKFAgPSBQcm9taXNlKSkoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xyXG4gICAgICAgIGZ1bmN0aW9uIGZ1bGZpbGxlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvci5uZXh0KHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cclxuICAgICAgICBmdW5jdGlvbiByZWplY3RlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvcltcInRocm93XCJdKHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cclxuICAgICAgICBmdW5jdGlvbiBzdGVwKHJlc3VsdCkgeyByZXN1bHQuZG9uZSA/IHJlc29sdmUocmVzdWx0LnZhbHVlKSA6IG5ldyBQKGZ1bmN0aW9uIChyZXNvbHZlKSB7IHJlc29sdmUocmVzdWx0LnZhbHVlKTsgfSkudGhlbihmdWxmaWxsZWQsIHJlamVjdGVkKTsgfVxyXG4gICAgICAgIHN0ZXAoKGdlbmVyYXRvciA9IGdlbmVyYXRvci5hcHBseSh0aGlzQXJnLCBfYXJndW1lbnRzIHx8IFtdKSkubmV4dCgpKTtcclxuICAgIH0pO1xyXG59O1xyXG52YXIgX19nZW5lcmF0b3IgPSAodGhpcyAmJiB0aGlzLl9fZ2VuZXJhdG9yKSB8fCBmdW5jdGlvbiAodGhpc0FyZywgYm9keSkge1xyXG4gICAgdmFyIF8gPSB7IGxhYmVsOiAwLCBzZW50OiBmdW5jdGlvbigpIHsgaWYgKHRbMF0gJiAxKSB0aHJvdyB0WzFdOyByZXR1cm4gdFsxXTsgfSwgdHJ5czogW10sIG9wczogW10gfSwgZiwgeSwgdCwgZztcclxuICAgIHJldHVybiBnID0geyBuZXh0OiB2ZXJiKDApLCBcInRocm93XCI6IHZlcmIoMSksIFwicmV0dXJuXCI6IHZlcmIoMikgfSwgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIChnW1N5bWJvbC5pdGVyYXRvcl0gPSBmdW5jdGlvbigpIHsgcmV0dXJuIHRoaXM7IH0pLCBnO1xyXG4gICAgZnVuY3Rpb24gdmVyYihuKSB7IHJldHVybiBmdW5jdGlvbiAodikgeyByZXR1cm4gc3RlcChbbiwgdl0pOyB9OyB9XHJcbiAgICBmdW5jdGlvbiBzdGVwKG9wKSB7XHJcbiAgICAgICAgaWYgKGYpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJHZW5lcmF0b3IgaXMgYWxyZWFkeSBleGVjdXRpbmcuXCIpO1xyXG4gICAgICAgIHdoaWxlIChfKSB0cnkge1xyXG4gICAgICAgICAgICBpZiAoZiA9IDEsIHkgJiYgKHQgPSBvcFswXSAmIDIgPyB5W1wicmV0dXJuXCJdIDogb3BbMF0gPyB5W1widGhyb3dcIl0gfHwgKCh0ID0geVtcInJldHVyblwiXSkgJiYgdC5jYWxsKHkpLCAwKSA6IHkubmV4dCkgJiYgISh0ID0gdC5jYWxsKHksIG9wWzFdKSkuZG9uZSkgcmV0dXJuIHQ7XHJcbiAgICAgICAgICAgIGlmICh5ID0gMCwgdCkgb3AgPSBbb3BbMF0gJiAyLCB0LnZhbHVlXTtcclxuICAgICAgICAgICAgc3dpdGNoIChvcFswXSkge1xyXG4gICAgICAgICAgICAgICAgY2FzZSAwOiBjYXNlIDE6IHQgPSBvcDsgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDQ6IF8ubGFiZWwrKzsgcmV0dXJuIHsgdmFsdWU6IG9wWzFdLCBkb25lOiBmYWxzZSB9O1xyXG4gICAgICAgICAgICAgICAgY2FzZSA1OiBfLmxhYmVsKys7IHkgPSBvcFsxXTsgb3AgPSBbMF07IGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgY2FzZSA3OiBvcCA9IF8ub3BzLnBvcCgpOyBfLnRyeXMucG9wKCk7IGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgICAgICBpZiAoISh0ID0gXy50cnlzLCB0ID0gdC5sZW5ndGggPiAwICYmIHRbdC5sZW5ndGggLSAxXSkgJiYgKG9wWzBdID09PSA2IHx8IG9wWzBdID09PSAyKSkgeyBfID0gMDsgY29udGludWU7IH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAob3BbMF0gPT09IDMgJiYgKCF0IHx8IChvcFsxXSA+IHRbMF0gJiYgb3BbMV0gPCB0WzNdKSkpIHsgXy5sYWJlbCA9IG9wWzFdOyBicmVhazsgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChvcFswXSA9PT0gNiAmJiBfLmxhYmVsIDwgdFsxXSkgeyBfLmxhYmVsID0gdFsxXTsgdCA9IG9wOyBicmVhazsgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0ICYmIF8ubGFiZWwgPCB0WzJdKSB7IF8ubGFiZWwgPSB0WzJdOyBfLm9wcy5wdXNoKG9wKTsgYnJlYWs7IH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAodFsyXSkgXy5vcHMucG9wKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgXy50cnlzLnBvcCgpOyBjb250aW51ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBvcCA9IGJvZHkuY2FsbCh0aGlzQXJnLCBfKTtcclxuICAgICAgICB9IGNhdGNoIChlKSB7IG9wID0gWzYsIGVdOyB5ID0gMDsgfSBmaW5hbGx5IHsgZiA9IHQgPSAwOyB9XHJcbiAgICAgICAgaWYgKG9wWzBdICYgNSkgdGhyb3cgb3BbMV07IHJldHVybiB7IHZhbHVlOiBvcFswXSA/IG9wWzFdIDogdm9pZCAwLCBkb25lOiB0cnVlIH07XHJcbiAgICB9XHJcbn07XHJcbmltcG9ydCB7IExvZ0xldmVsIH0gZnJvbSBcIi4vSUxvZ2dlclwiO1xyXG5pbXBvcnQgeyBOdWxsTG9nZ2VyIH0gZnJvbSBcIi4vTG9nZ2Vyc1wiO1xyXG4vKiogQHByaXZhdGUgKi9cclxudmFyIEFyZyA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIEFyZygpIHtcclxuICAgIH1cclxuICAgIEFyZy5pc1JlcXVpcmVkID0gZnVuY3Rpb24gKHZhbCwgbmFtZSkge1xyXG4gICAgICAgIGlmICh2YWwgPT09IG51bGwgfHwgdmFsID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVGhlICdcIiArIG5hbWUgKyBcIicgYXJndW1lbnQgaXMgcmVxdWlyZWQuXCIpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBBcmcuaXNJbiA9IGZ1bmN0aW9uICh2YWwsIHZhbHVlcywgbmFtZSkge1xyXG4gICAgICAgIC8vIFR5cGVTY3JpcHQgZW51bXMgaGF2ZSBrZXlzIGZvciAqKmJvdGgqKiB0aGUgbmFtZSBhbmQgdGhlIHZhbHVlIG9mIGVhY2ggZW51bSBtZW1iZXIgb24gdGhlIHR5cGUgaXRzZWxmLlxyXG4gICAgICAgIGlmICghKHZhbCBpbiB2YWx1ZXMpKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIlVua25vd24gXCIgKyBuYW1lICsgXCIgdmFsdWU6IFwiICsgdmFsICsgXCIuXCIpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICByZXR1cm4gQXJnO1xyXG59KCkpO1xyXG5leHBvcnQgeyBBcmcgfTtcclxuLyoqIEBwcml2YXRlICovXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXREYXRhRGV0YWlsKGRhdGEsIGluY2x1ZGVDb250ZW50KSB7XHJcbiAgICB2YXIgZGV0YWlsID0gXCJcIjtcclxuICAgIGlmIChpc0FycmF5QnVmZmVyKGRhdGEpKSB7XHJcbiAgICAgICAgZGV0YWlsID0gXCJCaW5hcnkgZGF0YSBvZiBsZW5ndGggXCIgKyBkYXRhLmJ5dGVMZW5ndGg7XHJcbiAgICAgICAgaWYgKGluY2x1ZGVDb250ZW50KSB7XHJcbiAgICAgICAgICAgIGRldGFpbCArPSBcIi4gQ29udGVudDogJ1wiICsgZm9ybWF0QXJyYXlCdWZmZXIoZGF0YSkgKyBcIidcIjtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmICh0eXBlb2YgZGF0YSA9PT0gXCJzdHJpbmdcIikge1xyXG4gICAgICAgIGRldGFpbCA9IFwiU3RyaW5nIGRhdGEgb2YgbGVuZ3RoIFwiICsgZGF0YS5sZW5ndGg7XHJcbiAgICAgICAgaWYgKGluY2x1ZGVDb250ZW50KSB7XHJcbiAgICAgICAgICAgIGRldGFpbCArPSBcIi4gQ29udGVudDogJ1wiICsgZGF0YSArIFwiJ1wiO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiBkZXRhaWw7XHJcbn1cclxuLyoqIEBwcml2YXRlICovXHJcbmV4cG9ydCBmdW5jdGlvbiBmb3JtYXRBcnJheUJ1ZmZlcihkYXRhKSB7XHJcbiAgICB2YXIgdmlldyA9IG5ldyBVaW50OEFycmF5KGRhdGEpO1xyXG4gICAgLy8gVWludDhBcnJheS5tYXAgb25seSBzdXBwb3J0cyByZXR1cm5pbmcgYW5vdGhlciBVaW50OEFycmF5P1xyXG4gICAgdmFyIHN0ciA9IFwiXCI7XHJcbiAgICB2aWV3LmZvckVhY2goZnVuY3Rpb24gKG51bSkge1xyXG4gICAgICAgIHZhciBwYWQgPSBudW0gPCAxNiA/IFwiMFwiIDogXCJcIjtcclxuICAgICAgICBzdHIgKz0gXCIweFwiICsgcGFkICsgbnVtLnRvU3RyaW5nKDE2KSArIFwiIFwiO1xyXG4gICAgfSk7XHJcbiAgICAvLyBUcmltIG9mIHRyYWlsaW5nIHNwYWNlLlxyXG4gICAgcmV0dXJuIHN0ci5zdWJzdHIoMCwgc3RyLmxlbmd0aCAtIDEpO1xyXG59XHJcbi8vIEFsc28gaW4gc2lnbmFsci1wcm90b2NvbC1tc2dwYWNrL1V0aWxzLnRzXHJcbi8qKiBAcHJpdmF0ZSAqL1xyXG5leHBvcnQgZnVuY3Rpb24gaXNBcnJheUJ1ZmZlcih2YWwpIHtcclxuICAgIHJldHVybiB2YWwgJiYgdHlwZW9mIEFycmF5QnVmZmVyICE9PSBcInVuZGVmaW5lZFwiICYmXHJcbiAgICAgICAgKHZhbCBpbnN0YW5jZW9mIEFycmF5QnVmZmVyIHx8XHJcbiAgICAgICAgICAgIC8vIFNvbWV0aW1lcyB3ZSBnZXQgYW4gQXJyYXlCdWZmZXIgdGhhdCBkb2Vzbid0IHNhdGlzZnkgaW5zdGFuY2VvZlxyXG4gICAgICAgICAgICAodmFsLmNvbnN0cnVjdG9yICYmIHZhbC5jb25zdHJ1Y3Rvci5uYW1lID09PSBcIkFycmF5QnVmZmVyXCIpKTtcclxufVxyXG4vKiogQHByaXZhdGUgKi9cclxuZXhwb3J0IGZ1bmN0aW9uIHNlbmRNZXNzYWdlKGxvZ2dlciwgdHJhbnNwb3J0TmFtZSwgaHR0cENsaWVudCwgdXJsLCBhY2Nlc3NUb2tlbkZhY3RvcnksIGNvbnRlbnQsIGxvZ01lc3NhZ2VDb250ZW50KSB7XHJcbiAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIF9hLCBoZWFkZXJzLCB0b2tlbiwgcmVzcG9uc2VUeXBlLCByZXNwb25zZTtcclxuICAgICAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9iKSB7XHJcbiAgICAgICAgICAgIHN3aXRjaCAoX2IubGFiZWwpIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgMDpcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIWFjY2Vzc1Rva2VuRmFjdG9yeSkgcmV0dXJuIFszIC8qYnJlYWsqLywgMl07XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgYWNjZXNzVG9rZW5GYWN0b3J5KCldO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAxOlxyXG4gICAgICAgICAgICAgICAgICAgIHRva2VuID0gX2Iuc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0b2tlbikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBoZWFkZXJzID0gKF9hID0ge30sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYVtcIkF1dGhvcml6YXRpb25cIl0gPSBcIkJlYXJlciBcIiArIHRva2VuLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX2EpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBfYi5sYWJlbCA9IDI7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDI6XHJcbiAgICAgICAgICAgICAgICAgICAgbG9nZ2VyLmxvZyhMb2dMZXZlbC5UcmFjZSwgXCIoXCIgKyB0cmFuc3BvcnROYW1lICsgXCIgdHJhbnNwb3J0KSBzZW5kaW5nIGRhdGEuIFwiICsgZ2V0RGF0YURldGFpbChjb250ZW50LCBsb2dNZXNzYWdlQ29udGVudCkgKyBcIi5cIik7XHJcbiAgICAgICAgICAgICAgICAgICAgcmVzcG9uc2VUeXBlID0gaXNBcnJheUJ1ZmZlcihjb250ZW50KSA/IFwiYXJyYXlidWZmZXJcIiA6IFwidGV4dFwiO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIGh0dHBDbGllbnQucG9zdCh1cmwsIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRlbnQ6IGNvbnRlbnQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBoZWFkZXJzOiBoZWFkZXJzLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzcG9uc2VUeXBlOiByZXNwb25zZVR5cGUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pXTtcclxuICAgICAgICAgICAgICAgIGNhc2UgMzpcclxuICAgICAgICAgICAgICAgICAgICByZXNwb25zZSA9IF9iLnNlbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICBsb2dnZXIubG9nKExvZ0xldmVsLlRyYWNlLCBcIihcIiArIHRyYW5zcG9ydE5hbWUgKyBcIiB0cmFuc3BvcnQpIHJlcXVlc3QgY29tcGxldGUuIFJlc3BvbnNlIHN0YXR1czogXCIgKyByZXNwb25zZS5zdGF0dXNDb2RlICsgXCIuXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovXTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfSk7XHJcbn1cclxuLyoqIEBwcml2YXRlICovXHJcbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVMb2dnZXIobG9nZ2VyKSB7XHJcbiAgICBpZiAobG9nZ2VyID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICByZXR1cm4gbmV3IENvbnNvbGVMb2dnZXIoTG9nTGV2ZWwuSW5mb3JtYXRpb24pO1xyXG4gICAgfVxyXG4gICAgaWYgKGxvZ2dlciA9PT0gbnVsbCkge1xyXG4gICAgICAgIHJldHVybiBOdWxsTG9nZ2VyLmluc3RhbmNlO1xyXG4gICAgfVxyXG4gICAgaWYgKGxvZ2dlci5sb2cpIHtcclxuICAgICAgICByZXR1cm4gbG9nZ2VyO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIG5ldyBDb25zb2xlTG9nZ2VyKGxvZ2dlcik7XHJcbn1cclxuLyoqIEBwcml2YXRlICovXHJcbnZhciBTdWJqZWN0ID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gU3ViamVjdCgpIHtcclxuICAgICAgICB0aGlzLm9ic2VydmVycyA9IFtdO1xyXG4gICAgfVxyXG4gICAgU3ViamVjdC5wcm90b3R5cGUubmV4dCA9IGZ1bmN0aW9uIChpdGVtKSB7XHJcbiAgICAgICAgZm9yICh2YXIgX2kgPSAwLCBfYSA9IHRoaXMub2JzZXJ2ZXJzOyBfaSA8IF9hLmxlbmd0aDsgX2krKykge1xyXG4gICAgICAgICAgICB2YXIgb2JzZXJ2ZXIgPSBfYVtfaV07XHJcbiAgICAgICAgICAgIG9ic2VydmVyLm5leHQoaXRlbSk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIFN1YmplY3QucHJvdG90eXBlLmVycm9yID0gZnVuY3Rpb24gKGVycikge1xyXG4gICAgICAgIGZvciAodmFyIF9pID0gMCwgX2EgPSB0aGlzLm9ic2VydmVyczsgX2kgPCBfYS5sZW5ndGg7IF9pKyspIHtcclxuICAgICAgICAgICAgdmFyIG9ic2VydmVyID0gX2FbX2ldO1xyXG4gICAgICAgICAgICBpZiAob2JzZXJ2ZXIuZXJyb3IpIHtcclxuICAgICAgICAgICAgICAgIG9ic2VydmVyLmVycm9yKGVycik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgU3ViamVjdC5wcm90b3R5cGUuY29tcGxldGUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgZm9yICh2YXIgX2kgPSAwLCBfYSA9IHRoaXMub2JzZXJ2ZXJzOyBfaSA8IF9hLmxlbmd0aDsgX2krKykge1xyXG4gICAgICAgICAgICB2YXIgb2JzZXJ2ZXIgPSBfYVtfaV07XHJcbiAgICAgICAgICAgIGlmIChvYnNlcnZlci5jb21wbGV0ZSkge1xyXG4gICAgICAgICAgICAgICAgb2JzZXJ2ZXIuY29tcGxldGUoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBTdWJqZWN0LnByb3RvdHlwZS5zdWJzY3JpYmUgPSBmdW5jdGlvbiAob2JzZXJ2ZXIpIHtcclxuICAgICAgICB0aGlzLm9ic2VydmVycy5wdXNoKG9ic2VydmVyKTtcclxuICAgICAgICByZXR1cm4gbmV3IFN1YmplY3RTdWJzY3JpcHRpb24odGhpcywgb2JzZXJ2ZXIpO1xyXG4gICAgfTtcclxuICAgIHJldHVybiBTdWJqZWN0O1xyXG59KCkpO1xyXG5leHBvcnQgeyBTdWJqZWN0IH07XHJcbi8qKiBAcHJpdmF0ZSAqL1xyXG52YXIgU3ViamVjdFN1YnNjcmlwdGlvbiA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIFN1YmplY3RTdWJzY3JpcHRpb24oc3ViamVjdCwgb2JzZXJ2ZXIpIHtcclxuICAgICAgICB0aGlzLnN1YmplY3QgPSBzdWJqZWN0O1xyXG4gICAgICAgIHRoaXMub2JzZXJ2ZXIgPSBvYnNlcnZlcjtcclxuICAgIH1cclxuICAgIFN1YmplY3RTdWJzY3JpcHRpb24ucHJvdG90eXBlLmRpc3Bvc2UgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIGluZGV4ID0gdGhpcy5zdWJqZWN0Lm9ic2VydmVycy5pbmRleE9mKHRoaXMub2JzZXJ2ZXIpO1xyXG4gICAgICAgIGlmIChpbmRleCA+IC0xKSB7XHJcbiAgICAgICAgICAgIHRoaXMuc3ViamVjdC5vYnNlcnZlcnMuc3BsaWNlKGluZGV4LCAxKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHRoaXMuc3ViamVjdC5vYnNlcnZlcnMubGVuZ3RoID09PSAwICYmIHRoaXMuc3ViamVjdC5jYW5jZWxDYWxsYmFjaykge1xyXG4gICAgICAgICAgICB0aGlzLnN1YmplY3QuY2FuY2VsQ2FsbGJhY2soKS5jYXRjaChmdW5jdGlvbiAoXykgeyB9KTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIFN1YmplY3RTdWJzY3JpcHRpb247XHJcbn0oKSk7XHJcbmV4cG9ydCB7IFN1YmplY3RTdWJzY3JpcHRpb24gfTtcclxuLyoqIEBwcml2YXRlICovXHJcbnZhciBDb25zb2xlTG9nZ2VyID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gQ29uc29sZUxvZ2dlcihtaW5pbXVtTG9nTGV2ZWwpIHtcclxuICAgICAgICB0aGlzLm1pbmltdW1Mb2dMZXZlbCA9IG1pbmltdW1Mb2dMZXZlbDtcclxuICAgIH1cclxuICAgIENvbnNvbGVMb2dnZXIucHJvdG90eXBlLmxvZyA9IGZ1bmN0aW9uIChsb2dMZXZlbCwgbWVzc2FnZSkge1xyXG4gICAgICAgIGlmIChsb2dMZXZlbCA+PSB0aGlzLm1pbmltdW1Mb2dMZXZlbCkge1xyXG4gICAgICAgICAgICBzd2l0Y2ggKGxvZ0xldmVsKSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlIExvZ0xldmVsLkNyaXRpY2FsOlxyXG4gICAgICAgICAgICAgICAgY2FzZSBMb2dMZXZlbC5FcnJvcjpcclxuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKFwiW1wiICsgbmV3IERhdGUoKS50b0lTT1N0cmluZygpICsgXCJdIFwiICsgTG9nTGV2ZWxbbG9nTGV2ZWxdICsgXCI6IFwiICsgbWVzc2FnZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIExvZ0xldmVsLldhcm5pbmc6XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS53YXJuKFwiW1wiICsgbmV3IERhdGUoKS50b0lTT1N0cmluZygpICsgXCJdIFwiICsgTG9nTGV2ZWxbbG9nTGV2ZWxdICsgXCI6IFwiICsgbWVzc2FnZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIExvZ0xldmVsLkluZm9ybWF0aW9uOlxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuaW5mbyhcIltcIiArIG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKSArIFwiXSBcIiArIExvZ0xldmVsW2xvZ0xldmVsXSArIFwiOiBcIiArIG1lc3NhZ2UpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmRlYnVnIG9ubHkgZ29lcyB0byBhdHRhY2hlZCBkZWJ1Z2dlcnMgaW4gTm9kZSwgc28gd2UgdXNlIGNvbnNvbGUubG9nIGZvciBUcmFjZSBhbmQgRGVidWdcclxuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIltcIiArIG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKSArIFwiXSBcIiArIExvZ0xldmVsW2xvZ0xldmVsXSArIFwiOiBcIiArIG1lc3NhZ2UpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIHJldHVybiBDb25zb2xlTG9nZ2VyO1xyXG59KCkpO1xyXG5leHBvcnQgeyBDb25zb2xlTG9nZ2VyIH07XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVV0aWxzLmpzLm1hcCIsIi8vIENvcHlyaWdodCAoYykgLk5FVCBGb3VuZGF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wLiBTZWUgTGljZW5zZS50eHQgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cclxudmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCAoZnVuY3Rpb24gKCkge1xyXG4gICAgdmFyIGV4dGVuZFN0YXRpY3MgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHxcclxuICAgICAgICAoeyBfX3Byb3RvX186IFtdIH0gaW5zdGFuY2VvZiBBcnJheSAmJiBmdW5jdGlvbiAoZCwgYikgeyBkLl9fcHJvdG9fXyA9IGI7IH0pIHx8XHJcbiAgICAgICAgZnVuY3Rpb24gKGQsIGIpIHsgZm9yICh2YXIgcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgZFtwXSA9IGJbcF07IH07XHJcbiAgICByZXR1cm4gZnVuY3Rpb24gKGQsIGIpIHtcclxuICAgICAgICBleHRlbmRTdGF0aWNzKGQsIGIpO1xyXG4gICAgICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxyXG4gICAgICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcclxuICAgIH07XHJcbn0pKCk7XHJcbi8qKiBFcnJvciB0aHJvd24gd2hlbiBhbiBIVFRQIHJlcXVlc3QgZmFpbHMuICovXHJcbnZhciBIdHRwRXJyb3IgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XHJcbiAgICBfX2V4dGVuZHMoSHR0cEVycm9yLCBfc3VwZXIpO1xyXG4gICAgLyoqIENvbnN0cnVjdHMgYSBuZXcgaW5zdGFuY2Ugb2Yge0BsaW5rIEBhc3BuZXQvc2lnbmFsci5IdHRwRXJyb3J9LlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBlcnJvck1lc3NhZ2UgQSBkZXNjcmlwdGl2ZSBlcnJvciBtZXNzYWdlLlxyXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHN0YXR1c0NvZGUgVGhlIEhUVFAgc3RhdHVzIGNvZGUgcmVwcmVzZW50ZWQgYnkgdGhpcyBlcnJvci5cclxuICAgICAqL1xyXG4gICAgZnVuY3Rpb24gSHR0cEVycm9yKGVycm9yTWVzc2FnZSwgc3RhdHVzQ29kZSkge1xyXG4gICAgICAgIHZhciBfbmV3VGFyZ2V0ID0gdGhpcy5jb25zdHJ1Y3RvcjtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIHZhciB0cnVlUHJvdG8gPSBfbmV3VGFyZ2V0LnByb3RvdHlwZTtcclxuICAgICAgICBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIGVycm9yTWVzc2FnZSkgfHwgdGhpcztcclxuICAgICAgICBfdGhpcy5zdGF0dXNDb2RlID0gc3RhdHVzQ29kZTtcclxuICAgICAgICAvLyBXb3JrYXJvdW5kIGlzc3VlIGluIFR5cGVzY3JpcHQgY29tcGlsZXJcclxuICAgICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vTWljcm9zb2Z0L1R5cGVTY3JpcHQvaXNzdWVzLzEzOTY1I2lzc3VlY29tbWVudC0yNzg1NzAyMDBcclxuICAgICAgICBfdGhpcy5fX3Byb3RvX18gPSB0cnVlUHJvdG87XHJcbiAgICAgICAgcmV0dXJuIF90aGlzO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIEh0dHBFcnJvcjtcclxufShFcnJvcikpO1xyXG5leHBvcnQgeyBIdHRwRXJyb3IgfTtcclxuLyoqIEVycm9yIHRocm93biB3aGVuIGEgdGltZW91dCBlbGFwc2VzLiAqL1xyXG52YXIgVGltZW91dEVycm9yID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xyXG4gICAgX19leHRlbmRzKFRpbWVvdXRFcnJvciwgX3N1cGVyKTtcclxuICAgIC8qKiBDb25zdHJ1Y3RzIGEgbmV3IGluc3RhbmNlIG9mIHtAbGluayBAYXNwbmV0L3NpZ25hbHIuVGltZW91dEVycm9yfS5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gZXJyb3JNZXNzYWdlIEEgZGVzY3JpcHRpdmUgZXJyb3IgbWVzc2FnZS5cclxuICAgICAqL1xyXG4gICAgZnVuY3Rpb24gVGltZW91dEVycm9yKGVycm9yTWVzc2FnZSkge1xyXG4gICAgICAgIHZhciBfbmV3VGFyZ2V0ID0gdGhpcy5jb25zdHJ1Y3RvcjtcclxuICAgICAgICBpZiAoZXJyb3JNZXNzYWdlID09PSB2b2lkIDApIHsgZXJyb3JNZXNzYWdlID0gXCJBIHRpbWVvdXQgb2NjdXJyZWQuXCI7IH1cclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIHZhciB0cnVlUHJvdG8gPSBfbmV3VGFyZ2V0LnByb3RvdHlwZTtcclxuICAgICAgICBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIGVycm9yTWVzc2FnZSkgfHwgdGhpcztcclxuICAgICAgICAvLyBXb3JrYXJvdW5kIGlzc3VlIGluIFR5cGVzY3JpcHQgY29tcGlsZXJcclxuICAgICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vTWljcm9zb2Z0L1R5cGVTY3JpcHQvaXNzdWVzLzEzOTY1I2lzc3VlY29tbWVudC0yNzg1NzAyMDBcclxuICAgICAgICBfdGhpcy5fX3Byb3RvX18gPSB0cnVlUHJvdG87XHJcbiAgICAgICAgcmV0dXJuIF90aGlzO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIFRpbWVvdXRFcnJvcjtcclxufShFcnJvcikpO1xyXG5leHBvcnQgeyBUaW1lb3V0RXJyb3IgfTtcclxuLyoqIEVycm9yIHRocm93biB3aGVuIGFuIGFjdGlvbiBpcyBhYm9ydGVkLiAqL1xyXG52YXIgQWJvcnRFcnJvciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcclxuICAgIF9fZXh0ZW5kcyhBYm9ydEVycm9yLCBfc3VwZXIpO1xyXG4gICAgLyoqIENvbnN0cnVjdHMgYSBuZXcgaW5zdGFuY2Ugb2Yge0BsaW5rIEFib3J0RXJyb3J9LlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBlcnJvck1lc3NhZ2UgQSBkZXNjcmlwdGl2ZSBlcnJvciBtZXNzYWdlLlxyXG4gICAgICovXHJcbiAgICBmdW5jdGlvbiBBYm9ydEVycm9yKGVycm9yTWVzc2FnZSkge1xyXG4gICAgICAgIHZhciBfbmV3VGFyZ2V0ID0gdGhpcy5jb25zdHJ1Y3RvcjtcclxuICAgICAgICBpZiAoZXJyb3JNZXNzYWdlID09PSB2b2lkIDApIHsgZXJyb3JNZXNzYWdlID0gXCJBbiBhYm9ydCBvY2N1cnJlZC5cIjsgfVxyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgdmFyIHRydWVQcm90byA9IF9uZXdUYXJnZXQucHJvdG90eXBlO1xyXG4gICAgICAgIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgZXJyb3JNZXNzYWdlKSB8fCB0aGlzO1xyXG4gICAgICAgIC8vIFdvcmthcm91bmQgaXNzdWUgaW4gVHlwZXNjcmlwdCBjb21waWxlclxyXG4gICAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9NaWNyb3NvZnQvVHlwZVNjcmlwdC9pc3N1ZXMvMTM5NjUjaXNzdWVjb21tZW50LTI3ODU3MDIwMFxyXG4gICAgICAgIF90aGlzLl9fcHJvdG9fXyA9IHRydWVQcm90bztcclxuICAgICAgICByZXR1cm4gX3RoaXM7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gQWJvcnRFcnJvcjtcclxufShFcnJvcikpO1xyXG5leHBvcnQgeyBBYm9ydEVycm9yIH07XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUVycm9ycy5qcy5tYXAiLCIvLyBDb3B5cmlnaHQgKGMpIC5ORVQgRm91bmRhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMC4gU2VlIExpY2Vuc2UudHh0IGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXHJcbnZhciBfX2Fzc2lnbiA9ICh0aGlzICYmIHRoaXMuX19hc3NpZ24pIHx8IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24odCkge1xyXG4gICAgZm9yICh2YXIgcywgaSA9IDEsIG4gPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgbjsgaSsrKSB7XHJcbiAgICAgICAgcyA9IGFyZ3VtZW50c1tpXTtcclxuICAgICAgICBmb3IgKHZhciBwIGluIHMpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocywgcCkpXHJcbiAgICAgICAgICAgIHRbcF0gPSBzW3BdO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHQ7XHJcbn07XHJcbi8qKiBSZXByZXNlbnRzIGFuIEhUVFAgcmVzcG9uc2UuICovXHJcbnZhciBIdHRwUmVzcG9uc2UgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBIdHRwUmVzcG9uc2Uoc3RhdHVzQ29kZSwgc3RhdHVzVGV4dCwgY29udGVudCkge1xyXG4gICAgICAgIHRoaXMuc3RhdHVzQ29kZSA9IHN0YXR1c0NvZGU7XHJcbiAgICAgICAgdGhpcy5zdGF0dXNUZXh0ID0gc3RhdHVzVGV4dDtcclxuICAgICAgICB0aGlzLmNvbnRlbnQgPSBjb250ZW50O1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIEh0dHBSZXNwb25zZTtcclxufSgpKTtcclxuZXhwb3J0IHsgSHR0cFJlc3BvbnNlIH07XHJcbi8qKiBBYnN0cmFjdGlvbiBvdmVyIGFuIEhUVFAgY2xpZW50LlxyXG4gKlxyXG4gKiBUaGlzIGNsYXNzIHByb3ZpZGVzIGFuIGFic3RyYWN0aW9uIG92ZXIgYW4gSFRUUCBjbGllbnQgc28gdGhhdCBhIGRpZmZlcmVudCBpbXBsZW1lbnRhdGlvbiBjYW4gYmUgcHJvdmlkZWQgb24gZGlmZmVyZW50IHBsYXRmb3Jtcy5cclxuICovXHJcbnZhciBIdHRwQ2xpZW50ID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gSHR0cENsaWVudCgpIHtcclxuICAgIH1cclxuICAgIEh0dHBDbGllbnQucHJvdG90eXBlLmdldCA9IGZ1bmN0aW9uICh1cmwsIG9wdGlvbnMpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5zZW5kKF9fYXNzaWduKHt9LCBvcHRpb25zLCB7IG1ldGhvZDogXCJHRVRcIiwgdXJsOiB1cmwgfSkpO1xyXG4gICAgfTtcclxuICAgIEh0dHBDbGllbnQucHJvdG90eXBlLnBvc3QgPSBmdW5jdGlvbiAodXJsLCBvcHRpb25zKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuc2VuZChfX2Fzc2lnbih7fSwgb3B0aW9ucywgeyBtZXRob2Q6IFwiUE9TVFwiLCB1cmw6IHVybCB9KSk7XHJcbiAgICB9O1xyXG4gICAgSHR0cENsaWVudC5wcm90b3R5cGUuZGVsZXRlID0gZnVuY3Rpb24gKHVybCwgb3B0aW9ucykge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnNlbmQoX19hc3NpZ24oe30sIG9wdGlvbnMsIHsgbWV0aG9kOiBcIkRFTEVURVwiLCB1cmw6IHVybCB9KSk7XHJcbiAgICB9O1xyXG4gICAgLyoqIEdldHMgYWxsIGNvb2tpZXMgdGhhdCBhcHBseSB0byB0aGUgc3BlY2lmaWVkIFVSTC5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0gdXJsIFRoZSBVUkwgdGhhdCB0aGUgY29va2llcyBhcmUgdmFsaWQgZm9yLlxyXG4gICAgICogQHJldHVybnMge3N0cmluZ30gQSBzdHJpbmcgY29udGFpbmluZyBhbGwgdGhlIGtleS12YWx1ZSBjb29raWUgcGFpcnMgZm9yIHRoZSBzcGVjaWZpZWQgVVJMLlxyXG4gICAgICovXHJcbiAgICAvLyBAdHMtaWdub3JlXHJcbiAgICBIdHRwQ2xpZW50LnByb3RvdHlwZS5nZXRDb29raWVTdHJpbmcgPSBmdW5jdGlvbiAodXJsKSB7XHJcbiAgICAgICAgcmV0dXJuIFwiXCI7XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIEh0dHBDbGllbnQ7XHJcbn0oKSk7XHJcbmV4cG9ydCB7IEh0dHBDbGllbnQgfTtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9SHR0cENsaWVudC5qcy5tYXAiLCIvLyBDb3B5cmlnaHQgKGMpIC5ORVQgRm91bmRhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMC4gU2VlIExpY2Vuc2UudHh0IGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXHJcbi8qKiBBIGxvZ2dlciB0aGF0IGRvZXMgbm90aGluZyB3aGVuIGxvZyBtZXNzYWdlcyBhcmUgc2VudCB0byBpdC4gKi9cclxudmFyIE51bGxMb2dnZXIgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBOdWxsTG9nZ2VyKCkge1xyXG4gICAgfVxyXG4gICAgLyoqIEBpbmhlcml0RG9jICovXHJcbiAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmVcclxuICAgIE51bGxMb2dnZXIucHJvdG90eXBlLmxvZyA9IGZ1bmN0aW9uIChfbG9nTGV2ZWwsIF9tZXNzYWdlKSB7XHJcbiAgICB9O1xyXG4gICAgLyoqIFRoZSBzaW5nbGV0b24gaW5zdGFuY2Ugb2YgdGhlIHtAbGluayBAYXNwbmV0L3NpZ25hbHIuTnVsbExvZ2dlcn0uICovXHJcbiAgICBOdWxsTG9nZ2VyLmluc3RhbmNlID0gbmV3IE51bGxMb2dnZXIoKTtcclxuICAgIHJldHVybiBOdWxsTG9nZ2VyO1xyXG59KCkpO1xyXG5leHBvcnQgeyBOdWxsTG9nZ2VyIH07XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUxvZ2dlcnMuanMubWFwIiwiLy8gQ29weXJpZ2h0IChjKSAuTkVUIEZvdW5kYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAuIFNlZSBMaWNlbnNlLnR4dCBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxyXG4vLyBOb3QgZXhwb3J0ZWQgZnJvbSBpbmRleFxyXG4vKiogQHByaXZhdGUgKi9cclxudmFyIFRleHRNZXNzYWdlRm9ybWF0ID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gVGV4dE1lc3NhZ2VGb3JtYXQoKSB7XHJcbiAgICB9XHJcbiAgICBUZXh0TWVzc2FnZUZvcm1hdC53cml0ZSA9IGZ1bmN0aW9uIChvdXRwdXQpIHtcclxuICAgICAgICByZXR1cm4gXCJcIiArIG91dHB1dCArIFRleHRNZXNzYWdlRm9ybWF0LlJlY29yZFNlcGFyYXRvcjtcclxuICAgIH07XHJcbiAgICBUZXh0TWVzc2FnZUZvcm1hdC5wYXJzZSA9IGZ1bmN0aW9uIChpbnB1dCkge1xyXG4gICAgICAgIGlmIChpbnB1dFtpbnB1dC5sZW5ndGggLSAxXSAhPT0gVGV4dE1lc3NhZ2VGb3JtYXQuUmVjb3JkU2VwYXJhdG9yKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIk1lc3NhZ2UgaXMgaW5jb21wbGV0ZS5cIik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciBtZXNzYWdlcyA9IGlucHV0LnNwbGl0KFRleHRNZXNzYWdlRm9ybWF0LlJlY29yZFNlcGFyYXRvcik7XHJcbiAgICAgICAgbWVzc2FnZXMucG9wKCk7XHJcbiAgICAgICAgcmV0dXJuIG1lc3NhZ2VzO1xyXG4gICAgfTtcclxuICAgIFRleHRNZXNzYWdlRm9ybWF0LlJlY29yZFNlcGFyYXRvckNvZGUgPSAweDFlO1xyXG4gICAgVGV4dE1lc3NhZ2VGb3JtYXQuUmVjb3JkU2VwYXJhdG9yID0gU3RyaW5nLmZyb21DaGFyQ29kZShUZXh0TWVzc2FnZUZvcm1hdC5SZWNvcmRTZXBhcmF0b3JDb2RlKTtcclxuICAgIHJldHVybiBUZXh0TWVzc2FnZUZvcm1hdDtcclxufSgpKTtcclxuZXhwb3J0IHsgVGV4dE1lc3NhZ2VGb3JtYXQgfTtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9VGV4dE1lc3NhZ2VGb3JtYXQuanMubWFwIiwiLyohXG4gKiBUaGUgYnVmZmVyIG1vZHVsZSBmcm9tIG5vZGUuanMsIGZvciB0aGUgYnJvd3Nlci5cbiAqXG4gKiBAYXV0aG9yICAgRmVyb3NzIEFib3VraGFkaWplaCA8ZmVyb3NzQGZlcm9zcy5vcmc+IDxodHRwOi8vZmVyb3NzLm9yZz5cbiAqIEBsaWNlbnNlICBNSVRcbiAqL1xuLyogZXNsaW50LWRpc2FibGUgbm8tcHJvdG8gKi9cblxuJ3VzZSBzdHJpY3QnXG5cbnZhciBiYXNlNjQgPSByZXF1aXJlKCdiYXNlNjQtanMnKVxudmFyIGllZWU3NTQgPSByZXF1aXJlKCdpZWVlNzU0JylcbnZhciBpc0FycmF5ID0gcmVxdWlyZSgnaXNhcnJheScpXG5cbmV4cG9ydHMuQnVmZmVyID0gQnVmZmVyXG5leHBvcnRzLlNsb3dCdWZmZXIgPSBTbG93QnVmZmVyXG5leHBvcnRzLklOU1BFQ1RfTUFYX0JZVEVTID0gNTBcblxuLyoqXG4gKiBJZiBgQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlRgOlxuICogICA9PT0gdHJ1ZSAgICBVc2UgVWludDhBcnJheSBpbXBsZW1lbnRhdGlvbiAoZmFzdGVzdClcbiAqICAgPT09IGZhbHNlICAgVXNlIE9iamVjdCBpbXBsZW1lbnRhdGlvbiAobW9zdCBjb21wYXRpYmxlLCBldmVuIElFNilcbiAqXG4gKiBCcm93c2VycyB0aGF0IHN1cHBvcnQgdHlwZWQgYXJyYXlzIGFyZSBJRSAxMCssIEZpcmVmb3ggNCssIENocm9tZSA3KywgU2FmYXJpIDUuMSssXG4gKiBPcGVyYSAxMS42KywgaU9TIDQuMisuXG4gKlxuICogRHVlIHRvIHZhcmlvdXMgYnJvd3NlciBidWdzLCBzb21ldGltZXMgdGhlIE9iamVjdCBpbXBsZW1lbnRhdGlvbiB3aWxsIGJlIHVzZWQgZXZlblxuICogd2hlbiB0aGUgYnJvd3NlciBzdXBwb3J0cyB0eXBlZCBhcnJheXMuXG4gKlxuICogTm90ZTpcbiAqXG4gKiAgIC0gRmlyZWZveCA0LTI5IGxhY2tzIHN1cHBvcnQgZm9yIGFkZGluZyBuZXcgcHJvcGVydGllcyB0byBgVWludDhBcnJheWAgaW5zdGFuY2VzLFxuICogICAgIFNlZTogaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy9zaG93X2J1Zy5jZ2k/aWQ9Njk1NDM4LlxuICpcbiAqICAgLSBDaHJvbWUgOS0xMCBpcyBtaXNzaW5nIHRoZSBgVHlwZWRBcnJheS5wcm90b3R5cGUuc3ViYXJyYXlgIGZ1bmN0aW9uLlxuICpcbiAqICAgLSBJRTEwIGhhcyBhIGJyb2tlbiBgVHlwZWRBcnJheS5wcm90b3R5cGUuc3ViYXJyYXlgIGZ1bmN0aW9uIHdoaWNoIHJldHVybnMgYXJyYXlzIG9mXG4gKiAgICAgaW5jb3JyZWN0IGxlbmd0aCBpbiBzb21lIHNpdHVhdGlvbnMuXG5cbiAqIFdlIGRldGVjdCB0aGVzZSBidWdneSBicm93c2VycyBhbmQgc2V0IGBCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVGAgdG8gYGZhbHNlYCBzbyB0aGV5XG4gKiBnZXQgdGhlIE9iamVjdCBpbXBsZW1lbnRhdGlvbiwgd2hpY2ggaXMgc2xvd2VyIGJ1dCBiZWhhdmVzIGNvcnJlY3RseS5cbiAqL1xuQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQgPSBnbG9iYWwuVFlQRURfQVJSQVlfU1VQUE9SVCAhPT0gdW5kZWZpbmVkXG4gID8gZ2xvYmFsLlRZUEVEX0FSUkFZX1NVUFBPUlRcbiAgOiB0eXBlZEFycmF5U3VwcG9ydCgpXG5cbi8qXG4gKiBFeHBvcnQga01heExlbmd0aCBhZnRlciB0eXBlZCBhcnJheSBzdXBwb3J0IGlzIGRldGVybWluZWQuXG4gKi9cbmV4cG9ydHMua01heExlbmd0aCA9IGtNYXhMZW5ndGgoKVxuXG5mdW5jdGlvbiB0eXBlZEFycmF5U3VwcG9ydCAoKSB7XG4gIHRyeSB7XG4gICAgdmFyIGFyciA9IG5ldyBVaW50OEFycmF5KDEpXG4gICAgYXJyLl9fcHJvdG9fXyA9IHtfX3Byb3RvX186IFVpbnQ4QXJyYXkucHJvdG90eXBlLCBmb286IGZ1bmN0aW9uICgpIHsgcmV0dXJuIDQyIH19XG4gICAgcmV0dXJuIGFyci5mb28oKSA9PT0gNDIgJiYgLy8gdHlwZWQgYXJyYXkgaW5zdGFuY2VzIGNhbiBiZSBhdWdtZW50ZWRcbiAgICAgICAgdHlwZW9mIGFyci5zdWJhcnJheSA9PT0gJ2Z1bmN0aW9uJyAmJiAvLyBjaHJvbWUgOS0xMCBsYWNrIGBzdWJhcnJheWBcbiAgICAgICAgYXJyLnN1YmFycmF5KDEsIDEpLmJ5dGVMZW5ndGggPT09IDAgLy8gaWUxMCBoYXMgYnJva2VuIGBzdWJhcnJheWBcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiBmYWxzZVxuICB9XG59XG5cbmZ1bmN0aW9uIGtNYXhMZW5ndGggKCkge1xuICByZXR1cm4gQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlRcbiAgICA/IDB4N2ZmZmZmZmZcbiAgICA6IDB4M2ZmZmZmZmZcbn1cblxuZnVuY3Rpb24gY3JlYXRlQnVmZmVyICh0aGF0LCBsZW5ndGgpIHtcbiAgaWYgKGtNYXhMZW5ndGgoKSA8IGxlbmd0aCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdJbnZhbGlkIHR5cGVkIGFycmF5IGxlbmd0aCcpXG4gIH1cbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgLy8gUmV0dXJuIGFuIGF1Z21lbnRlZCBgVWludDhBcnJheWAgaW5zdGFuY2UsIGZvciBiZXN0IHBlcmZvcm1hbmNlXG4gICAgdGhhdCA9IG5ldyBVaW50OEFycmF5KGxlbmd0aClcbiAgICB0aGF0Ll9fcHJvdG9fXyA9IEJ1ZmZlci5wcm90b3R5cGVcbiAgfSBlbHNlIHtcbiAgICAvLyBGYWxsYmFjazogUmV0dXJuIGFuIG9iamVjdCBpbnN0YW5jZSBvZiB0aGUgQnVmZmVyIGNsYXNzXG4gICAgaWYgKHRoYXQgPT09IG51bGwpIHtcbiAgICAgIHRoYXQgPSBuZXcgQnVmZmVyKGxlbmd0aClcbiAgICB9XG4gICAgdGhhdC5sZW5ndGggPSBsZW5ndGhcbiAgfVxuXG4gIHJldHVybiB0aGF0XG59XG5cbi8qKlxuICogVGhlIEJ1ZmZlciBjb25zdHJ1Y3RvciByZXR1cm5zIGluc3RhbmNlcyBvZiBgVWludDhBcnJheWAgdGhhdCBoYXZlIHRoZWlyXG4gKiBwcm90b3R5cGUgY2hhbmdlZCB0byBgQnVmZmVyLnByb3RvdHlwZWAuIEZ1cnRoZXJtb3JlLCBgQnVmZmVyYCBpcyBhIHN1YmNsYXNzIG9mXG4gKiBgVWludDhBcnJheWAsIHNvIHRoZSByZXR1cm5lZCBpbnN0YW5jZXMgd2lsbCBoYXZlIGFsbCB0aGUgbm9kZSBgQnVmZmVyYCBtZXRob2RzXG4gKiBhbmQgdGhlIGBVaW50OEFycmF5YCBtZXRob2RzLiBTcXVhcmUgYnJhY2tldCBub3RhdGlvbiB3b3JrcyBhcyBleHBlY3RlZCAtLSBpdFxuICogcmV0dXJucyBhIHNpbmdsZSBvY3RldC5cbiAqXG4gKiBUaGUgYFVpbnQ4QXJyYXlgIHByb3RvdHlwZSByZW1haW5zIHVubW9kaWZpZWQuXG4gKi9cblxuZnVuY3Rpb24gQnVmZmVyIChhcmcsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aCkge1xuICBpZiAoIUJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUICYmICEodGhpcyBpbnN0YW5jZW9mIEJ1ZmZlcikpIHtcbiAgICByZXR1cm4gbmV3IEJ1ZmZlcihhcmcsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aClcbiAgfVxuXG4gIC8vIENvbW1vbiBjYXNlLlxuICBpZiAodHlwZW9mIGFyZyA9PT0gJ251bWJlcicpIHtcbiAgICBpZiAodHlwZW9mIGVuY29kaW5nT3JPZmZzZXQgPT09ICdzdHJpbmcnKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICdJZiBlbmNvZGluZyBpcyBzcGVjaWZpZWQgdGhlbiB0aGUgZmlyc3QgYXJndW1lbnQgbXVzdCBiZSBhIHN0cmluZydcbiAgICAgIClcbiAgICB9XG4gICAgcmV0dXJuIGFsbG9jVW5zYWZlKHRoaXMsIGFyZylcbiAgfVxuICByZXR1cm4gZnJvbSh0aGlzLCBhcmcsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aClcbn1cblxuQnVmZmVyLnBvb2xTaXplID0gODE5MiAvLyBub3QgdXNlZCBieSB0aGlzIGltcGxlbWVudGF0aW9uXG5cbi8vIFRPRE86IExlZ2FjeSwgbm90IG5lZWRlZCBhbnltb3JlLiBSZW1vdmUgaW4gbmV4dCBtYWpvciB2ZXJzaW9uLlxuQnVmZmVyLl9hdWdtZW50ID0gZnVuY3Rpb24gKGFycikge1xuICBhcnIuX19wcm90b19fID0gQnVmZmVyLnByb3RvdHlwZVxuICByZXR1cm4gYXJyXG59XG5cbmZ1bmN0aW9uIGZyb20gKHRoYXQsIHZhbHVlLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpIHtcbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdcInZhbHVlXCIgYXJndW1lbnQgbXVzdCBub3QgYmUgYSBudW1iZXInKVxuICB9XG5cbiAgaWYgKHR5cGVvZiBBcnJheUJ1ZmZlciAhPT0gJ3VuZGVmaW5lZCcgJiYgdmFsdWUgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcikge1xuICAgIHJldHVybiBmcm9tQXJyYXlCdWZmZXIodGhhdCwgdmFsdWUsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aClcbiAgfVxuXG4gIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIGZyb21TdHJpbmcodGhhdCwgdmFsdWUsIGVuY29kaW5nT3JPZmZzZXQpXG4gIH1cblxuICByZXR1cm4gZnJvbU9iamVjdCh0aGF0LCB2YWx1ZSlcbn1cblxuLyoqXG4gKiBGdW5jdGlvbmFsbHkgZXF1aXZhbGVudCB0byBCdWZmZXIoYXJnLCBlbmNvZGluZykgYnV0IHRocm93cyBhIFR5cGVFcnJvclxuICogaWYgdmFsdWUgaXMgYSBudW1iZXIuXG4gKiBCdWZmZXIuZnJvbShzdHJbLCBlbmNvZGluZ10pXG4gKiBCdWZmZXIuZnJvbShhcnJheSlcbiAqIEJ1ZmZlci5mcm9tKGJ1ZmZlcilcbiAqIEJ1ZmZlci5mcm9tKGFycmF5QnVmZmVyWywgYnl0ZU9mZnNldFssIGxlbmd0aF1dKVxuICoqL1xuQnVmZmVyLmZyb20gPSBmdW5jdGlvbiAodmFsdWUsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aCkge1xuICByZXR1cm4gZnJvbShudWxsLCB2YWx1ZSwgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKVxufVxuXG5pZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgQnVmZmVyLnByb3RvdHlwZS5fX3Byb3RvX18gPSBVaW50OEFycmF5LnByb3RvdHlwZVxuICBCdWZmZXIuX19wcm90b19fID0gVWludDhBcnJheVxuICBpZiAodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnNwZWNpZXMgJiZcbiAgICAgIEJ1ZmZlcltTeW1ib2wuc3BlY2llc10gPT09IEJ1ZmZlcikge1xuICAgIC8vIEZpeCBzdWJhcnJheSgpIGluIEVTMjAxNi4gU2VlOiBodHRwczovL2dpdGh1Yi5jb20vZmVyb3NzL2J1ZmZlci9wdWxsLzk3XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEJ1ZmZlciwgU3ltYm9sLnNwZWNpZXMsIHtcbiAgICAgIHZhbHVlOiBudWxsLFxuICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSlcbiAgfVxufVxuXG5mdW5jdGlvbiBhc3NlcnRTaXplIChzaXplKSB7XG4gIGlmICh0eXBlb2Ygc2l6ZSAhPT0gJ251bWJlcicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdcInNpemVcIiBhcmd1bWVudCBtdXN0IGJlIGEgbnVtYmVyJylcbiAgfSBlbHNlIGlmIChzaXplIDwgMCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdcInNpemVcIiBhcmd1bWVudCBtdXN0IG5vdCBiZSBuZWdhdGl2ZScpXG4gIH1cbn1cblxuZnVuY3Rpb24gYWxsb2MgKHRoYXQsIHNpemUsIGZpbGwsIGVuY29kaW5nKSB7XG4gIGFzc2VydFNpemUoc2l6ZSlcbiAgaWYgKHNpemUgPD0gMCkge1xuICAgIHJldHVybiBjcmVhdGVCdWZmZXIodGhhdCwgc2l6ZSlcbiAgfVxuICBpZiAoZmlsbCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgLy8gT25seSBwYXkgYXR0ZW50aW9uIHRvIGVuY29kaW5nIGlmIGl0J3MgYSBzdHJpbmcuIFRoaXNcbiAgICAvLyBwcmV2ZW50cyBhY2NpZGVudGFsbHkgc2VuZGluZyBpbiBhIG51bWJlciB0aGF0IHdvdWxkXG4gICAgLy8gYmUgaW50ZXJwcmV0dGVkIGFzIGEgc3RhcnQgb2Zmc2V0LlxuICAgIHJldHVybiB0eXBlb2YgZW5jb2RpbmcgPT09ICdzdHJpbmcnXG4gICAgICA/IGNyZWF0ZUJ1ZmZlcih0aGF0LCBzaXplKS5maWxsKGZpbGwsIGVuY29kaW5nKVxuICAgICAgOiBjcmVhdGVCdWZmZXIodGhhdCwgc2l6ZSkuZmlsbChmaWxsKVxuICB9XG4gIHJldHVybiBjcmVhdGVCdWZmZXIodGhhdCwgc2l6ZSlcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGEgbmV3IGZpbGxlZCBCdWZmZXIgaW5zdGFuY2UuXG4gKiBhbGxvYyhzaXplWywgZmlsbFssIGVuY29kaW5nXV0pXG4gKiovXG5CdWZmZXIuYWxsb2MgPSBmdW5jdGlvbiAoc2l6ZSwgZmlsbCwgZW5jb2RpbmcpIHtcbiAgcmV0dXJuIGFsbG9jKG51bGwsIHNpemUsIGZpbGwsIGVuY29kaW5nKVxufVxuXG5mdW5jdGlvbiBhbGxvY1Vuc2FmZSAodGhhdCwgc2l6ZSkge1xuICBhc3NlcnRTaXplKHNpemUpXG4gIHRoYXQgPSBjcmVhdGVCdWZmZXIodGhhdCwgc2l6ZSA8IDAgPyAwIDogY2hlY2tlZChzaXplKSB8IDApXG4gIGlmICghQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNpemU7ICsraSkge1xuICAgICAgdGhhdFtpXSA9IDBcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHRoYXRcbn1cblxuLyoqXG4gKiBFcXVpdmFsZW50IHRvIEJ1ZmZlcihudW0pLCBieSBkZWZhdWx0IGNyZWF0ZXMgYSBub24temVyby1maWxsZWQgQnVmZmVyIGluc3RhbmNlLlxuICogKi9cbkJ1ZmZlci5hbGxvY1Vuc2FmZSA9IGZ1bmN0aW9uIChzaXplKSB7XG4gIHJldHVybiBhbGxvY1Vuc2FmZShudWxsLCBzaXplKVxufVxuLyoqXG4gKiBFcXVpdmFsZW50IHRvIFNsb3dCdWZmZXIobnVtKSwgYnkgZGVmYXVsdCBjcmVhdGVzIGEgbm9uLXplcm8tZmlsbGVkIEJ1ZmZlciBpbnN0YW5jZS5cbiAqL1xuQnVmZmVyLmFsbG9jVW5zYWZlU2xvdyA9IGZ1bmN0aW9uIChzaXplKSB7XG4gIHJldHVybiBhbGxvY1Vuc2FmZShudWxsLCBzaXplKVxufVxuXG5mdW5jdGlvbiBmcm9tU3RyaW5nICh0aGF0LCBzdHJpbmcsIGVuY29kaW5nKSB7XG4gIGlmICh0eXBlb2YgZW5jb2RpbmcgIT09ICdzdHJpbmcnIHx8IGVuY29kaW5nID09PSAnJykge1xuICAgIGVuY29kaW5nID0gJ3V0ZjgnXG4gIH1cblxuICBpZiAoIUJ1ZmZlci5pc0VuY29kaW5nKGVuY29kaW5nKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1wiZW5jb2RpbmdcIiBtdXN0IGJlIGEgdmFsaWQgc3RyaW5nIGVuY29kaW5nJylcbiAgfVxuXG4gIHZhciBsZW5ndGggPSBieXRlTGVuZ3RoKHN0cmluZywgZW5jb2RpbmcpIHwgMFxuICB0aGF0ID0gY3JlYXRlQnVmZmVyKHRoYXQsIGxlbmd0aClcblxuICB2YXIgYWN0dWFsID0gdGhhdC53cml0ZShzdHJpbmcsIGVuY29kaW5nKVxuXG4gIGlmIChhY3R1YWwgIT09IGxlbmd0aCkge1xuICAgIC8vIFdyaXRpbmcgYSBoZXggc3RyaW5nLCBmb3IgZXhhbXBsZSwgdGhhdCBjb250YWlucyBpbnZhbGlkIGNoYXJhY3RlcnMgd2lsbFxuICAgIC8vIGNhdXNlIGV2ZXJ5dGhpbmcgYWZ0ZXIgdGhlIGZpcnN0IGludmFsaWQgY2hhcmFjdGVyIHRvIGJlIGlnbm9yZWQuIChlLmcuXG4gICAgLy8gJ2FieHhjZCcgd2lsbCBiZSB0cmVhdGVkIGFzICdhYicpXG4gICAgdGhhdCA9IHRoYXQuc2xpY2UoMCwgYWN0dWFsKVxuICB9XG5cbiAgcmV0dXJuIHRoYXRcbn1cblxuZnVuY3Rpb24gZnJvbUFycmF5TGlrZSAodGhhdCwgYXJyYXkpIHtcbiAgdmFyIGxlbmd0aCA9IGFycmF5Lmxlbmd0aCA8IDAgPyAwIDogY2hlY2tlZChhcnJheS5sZW5ndGgpIHwgMFxuICB0aGF0ID0gY3JlYXRlQnVmZmVyKHRoYXQsIGxlbmd0aClcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7IGkgKz0gMSkge1xuICAgIHRoYXRbaV0gPSBhcnJheVtpXSAmIDI1NVxuICB9XG4gIHJldHVybiB0aGF0XG59XG5cbmZ1bmN0aW9uIGZyb21BcnJheUJ1ZmZlciAodGhhdCwgYXJyYXksIGJ5dGVPZmZzZXQsIGxlbmd0aCkge1xuICBhcnJheS5ieXRlTGVuZ3RoIC8vIHRoaXMgdGhyb3dzIGlmIGBhcnJheWAgaXMgbm90IGEgdmFsaWQgQXJyYXlCdWZmZXJcblxuICBpZiAoYnl0ZU9mZnNldCA8IDAgfHwgYXJyYXkuYnl0ZUxlbmd0aCA8IGJ5dGVPZmZzZXQpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignXFwnb2Zmc2V0XFwnIGlzIG91dCBvZiBib3VuZHMnKVxuICB9XG5cbiAgaWYgKGFycmF5LmJ5dGVMZW5ndGggPCBieXRlT2Zmc2V0ICsgKGxlbmd0aCB8fCAwKSkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdcXCdsZW5ndGhcXCcgaXMgb3V0IG9mIGJvdW5kcycpXG4gIH1cblxuICBpZiAoYnl0ZU9mZnNldCA9PT0gdW5kZWZpbmVkICYmIGxlbmd0aCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgYXJyYXkgPSBuZXcgVWludDhBcnJheShhcnJheSlcbiAgfSBlbHNlIGlmIChsZW5ndGggPT09IHVuZGVmaW5lZCkge1xuICAgIGFycmF5ID0gbmV3IFVpbnQ4QXJyYXkoYXJyYXksIGJ5dGVPZmZzZXQpXG4gIH0gZWxzZSB7XG4gICAgYXJyYXkgPSBuZXcgVWludDhBcnJheShhcnJheSwgYnl0ZU9mZnNldCwgbGVuZ3RoKVxuICB9XG5cbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgLy8gUmV0dXJuIGFuIGF1Z21lbnRlZCBgVWludDhBcnJheWAgaW5zdGFuY2UsIGZvciBiZXN0IHBlcmZvcm1hbmNlXG4gICAgdGhhdCA9IGFycmF5XG4gICAgdGhhdC5fX3Byb3RvX18gPSBCdWZmZXIucHJvdG90eXBlXG4gIH0gZWxzZSB7XG4gICAgLy8gRmFsbGJhY2s6IFJldHVybiBhbiBvYmplY3QgaW5zdGFuY2Ugb2YgdGhlIEJ1ZmZlciBjbGFzc1xuICAgIHRoYXQgPSBmcm9tQXJyYXlMaWtlKHRoYXQsIGFycmF5KVxuICB9XG4gIHJldHVybiB0aGF0XG59XG5cbmZ1bmN0aW9uIGZyb21PYmplY3QgKHRoYXQsIG9iaikge1xuICBpZiAoQnVmZmVyLmlzQnVmZmVyKG9iaikpIHtcbiAgICB2YXIgbGVuID0gY2hlY2tlZChvYmoubGVuZ3RoKSB8IDBcbiAgICB0aGF0ID0gY3JlYXRlQnVmZmVyKHRoYXQsIGxlbilcblxuICAgIGlmICh0aGF0Lmxlbmd0aCA9PT0gMCkge1xuICAgICAgcmV0dXJuIHRoYXRcbiAgICB9XG5cbiAgICBvYmouY29weSh0aGF0LCAwLCAwLCBsZW4pXG4gICAgcmV0dXJuIHRoYXRcbiAgfVxuXG4gIGlmIChvYmopIHtcbiAgICBpZiAoKHR5cGVvZiBBcnJheUJ1ZmZlciAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgICAgICAgb2JqLmJ1ZmZlciBpbnN0YW5jZW9mIEFycmF5QnVmZmVyKSB8fCAnbGVuZ3RoJyBpbiBvYmopIHtcbiAgICAgIGlmICh0eXBlb2Ygb2JqLmxlbmd0aCAhPT0gJ251bWJlcicgfHwgaXNuYW4ob2JqLmxlbmd0aCkpIHtcbiAgICAgICAgcmV0dXJuIGNyZWF0ZUJ1ZmZlcih0aGF0LCAwKVxuICAgICAgfVxuICAgICAgcmV0dXJuIGZyb21BcnJheUxpa2UodGhhdCwgb2JqKVxuICAgIH1cblxuICAgIGlmIChvYmoudHlwZSA9PT0gJ0J1ZmZlcicgJiYgaXNBcnJheShvYmouZGF0YSkpIHtcbiAgICAgIHJldHVybiBmcm9tQXJyYXlMaWtlKHRoYXQsIG9iai5kYXRhKVxuICAgIH1cbiAgfVxuXG4gIHRocm93IG5ldyBUeXBlRXJyb3IoJ0ZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmcsIEJ1ZmZlciwgQXJyYXlCdWZmZXIsIEFycmF5LCBvciBhcnJheS1saWtlIG9iamVjdC4nKVxufVxuXG5mdW5jdGlvbiBjaGVja2VkIChsZW5ndGgpIHtcbiAgLy8gTm90ZTogY2Fubm90IHVzZSBgbGVuZ3RoIDwga01heExlbmd0aCgpYCBoZXJlIGJlY2F1c2UgdGhhdCBmYWlscyB3aGVuXG4gIC8vIGxlbmd0aCBpcyBOYU4gKHdoaWNoIGlzIG90aGVyd2lzZSBjb2VyY2VkIHRvIHplcm8uKVxuICBpZiAobGVuZ3RoID49IGtNYXhMZW5ndGgoKSkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdBdHRlbXB0IHRvIGFsbG9jYXRlIEJ1ZmZlciBsYXJnZXIgdGhhbiBtYXhpbXVtICcgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICdzaXplOiAweCcgKyBrTWF4TGVuZ3RoKCkudG9TdHJpbmcoMTYpICsgJyBieXRlcycpXG4gIH1cbiAgcmV0dXJuIGxlbmd0aCB8IDBcbn1cblxuZnVuY3Rpb24gU2xvd0J1ZmZlciAobGVuZ3RoKSB7XG4gIGlmICgrbGVuZ3RoICE9IGxlbmd0aCkgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIGVxZXFlcVxuICAgIGxlbmd0aCA9IDBcbiAgfVxuICByZXR1cm4gQnVmZmVyLmFsbG9jKCtsZW5ndGgpXG59XG5cbkJ1ZmZlci5pc0J1ZmZlciA9IGZ1bmN0aW9uIGlzQnVmZmVyIChiKSB7XG4gIHJldHVybiAhIShiICE9IG51bGwgJiYgYi5faXNCdWZmZXIpXG59XG5cbkJ1ZmZlci5jb21wYXJlID0gZnVuY3Rpb24gY29tcGFyZSAoYSwgYikge1xuICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcihhKSB8fCAhQnVmZmVyLmlzQnVmZmVyKGIpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQXJndW1lbnRzIG11c3QgYmUgQnVmZmVycycpXG4gIH1cblxuICBpZiAoYSA9PT0gYikgcmV0dXJuIDBcblxuICB2YXIgeCA9IGEubGVuZ3RoXG4gIHZhciB5ID0gYi5sZW5ndGhcblxuICBmb3IgKHZhciBpID0gMCwgbGVuID0gTWF0aC5taW4oeCwgeSk7IGkgPCBsZW47ICsraSkge1xuICAgIGlmIChhW2ldICE9PSBiW2ldKSB7XG4gICAgICB4ID0gYVtpXVxuICAgICAgeSA9IGJbaV1cbiAgICAgIGJyZWFrXG4gICAgfVxuICB9XG5cbiAgaWYgKHggPCB5KSByZXR1cm4gLTFcbiAgaWYgKHkgPCB4KSByZXR1cm4gMVxuICByZXR1cm4gMFxufVxuXG5CdWZmZXIuaXNFbmNvZGluZyA9IGZ1bmN0aW9uIGlzRW5jb2RpbmcgKGVuY29kaW5nKSB7XG4gIHN3aXRjaCAoU3RyaW5nKGVuY29kaW5nKS50b0xvd2VyQ2FzZSgpKSB7XG4gICAgY2FzZSAnaGV4JzpcbiAgICBjYXNlICd1dGY4JzpcbiAgICBjYXNlICd1dGYtOCc6XG4gICAgY2FzZSAnYXNjaWknOlxuICAgIGNhc2UgJ2xhdGluMSc6XG4gICAgY2FzZSAnYmluYXJ5JzpcbiAgICBjYXNlICdiYXNlNjQnOlxuICAgIGNhc2UgJ3VjczInOlxuICAgIGNhc2UgJ3Vjcy0yJzpcbiAgICBjYXNlICd1dGYxNmxlJzpcbiAgICBjYXNlICd1dGYtMTZsZSc6XG4gICAgICByZXR1cm4gdHJ1ZVxuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gZmFsc2VcbiAgfVxufVxuXG5CdWZmZXIuY29uY2F0ID0gZnVuY3Rpb24gY29uY2F0IChsaXN0LCBsZW5ndGgpIHtcbiAgaWYgKCFpc0FycmF5KGxpc3QpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignXCJsaXN0XCIgYXJndW1lbnQgbXVzdCBiZSBhbiBBcnJheSBvZiBCdWZmZXJzJylcbiAgfVxuXG4gIGlmIChsaXN0Lmxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybiBCdWZmZXIuYWxsb2MoMClcbiAgfVxuXG4gIHZhciBpXG4gIGlmIChsZW5ndGggPT09IHVuZGVmaW5lZCkge1xuICAgIGxlbmd0aCA9IDBcbiAgICBmb3IgKGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7ICsraSkge1xuICAgICAgbGVuZ3RoICs9IGxpc3RbaV0ubGVuZ3RoXG4gICAgfVxuICB9XG5cbiAgdmFyIGJ1ZmZlciA9IEJ1ZmZlci5hbGxvY1Vuc2FmZShsZW5ndGgpXG4gIHZhciBwb3MgPSAwXG4gIGZvciAoaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgKytpKSB7XG4gICAgdmFyIGJ1ZiA9IGxpc3RbaV1cbiAgICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcihidWYpKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdcImxpc3RcIiBhcmd1bWVudCBtdXN0IGJlIGFuIEFycmF5IG9mIEJ1ZmZlcnMnKVxuICAgIH1cbiAgICBidWYuY29weShidWZmZXIsIHBvcylcbiAgICBwb3MgKz0gYnVmLmxlbmd0aFxuICB9XG4gIHJldHVybiBidWZmZXJcbn1cblxuZnVuY3Rpb24gYnl0ZUxlbmd0aCAoc3RyaW5nLCBlbmNvZGluZykge1xuICBpZiAoQnVmZmVyLmlzQnVmZmVyKHN0cmluZykpIHtcbiAgICByZXR1cm4gc3RyaW5nLmxlbmd0aFxuICB9XG4gIGlmICh0eXBlb2YgQXJyYXlCdWZmZXIgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBBcnJheUJ1ZmZlci5pc1ZpZXcgPT09ICdmdW5jdGlvbicgJiZcbiAgICAgIChBcnJheUJ1ZmZlci5pc1ZpZXcoc3RyaW5nKSB8fCBzdHJpbmcgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcikpIHtcbiAgICByZXR1cm4gc3RyaW5nLmJ5dGVMZW5ndGhcbiAgfVxuICBpZiAodHlwZW9mIHN0cmluZyAhPT0gJ3N0cmluZycpIHtcbiAgICBzdHJpbmcgPSAnJyArIHN0cmluZ1xuICB9XG5cbiAgdmFyIGxlbiA9IHN0cmluZy5sZW5ndGhcbiAgaWYgKGxlbiA9PT0gMCkgcmV0dXJuIDBcblxuICAvLyBVc2UgYSBmb3IgbG9vcCB0byBhdm9pZCByZWN1cnNpb25cbiAgdmFyIGxvd2VyZWRDYXNlID0gZmFsc2VcbiAgZm9yICg7Oykge1xuICAgIHN3aXRjaCAoZW5jb2RpbmcpIHtcbiAgICAgIGNhc2UgJ2FzY2lpJzpcbiAgICAgIGNhc2UgJ2xhdGluMSc6XG4gICAgICBjYXNlICdiaW5hcnknOlxuICAgICAgICByZXR1cm4gbGVuXG4gICAgICBjYXNlICd1dGY4JzpcbiAgICAgIGNhc2UgJ3V0Zi04JzpcbiAgICAgIGNhc2UgdW5kZWZpbmVkOlxuICAgICAgICByZXR1cm4gdXRmOFRvQnl0ZXMoc3RyaW5nKS5sZW5ndGhcbiAgICAgIGNhc2UgJ3VjczInOlxuICAgICAgY2FzZSAndWNzLTInOlxuICAgICAgY2FzZSAndXRmMTZsZSc6XG4gICAgICBjYXNlICd1dGYtMTZsZSc6XG4gICAgICAgIHJldHVybiBsZW4gKiAyXG4gICAgICBjYXNlICdoZXgnOlxuICAgICAgICByZXR1cm4gbGVuID4+PiAxXG4gICAgICBjYXNlICdiYXNlNjQnOlxuICAgICAgICByZXR1cm4gYmFzZTY0VG9CeXRlcyhzdHJpbmcpLmxlbmd0aFxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgaWYgKGxvd2VyZWRDYXNlKSByZXR1cm4gdXRmOFRvQnl0ZXMoc3RyaW5nKS5sZW5ndGggLy8gYXNzdW1lIHV0ZjhcbiAgICAgICAgZW5jb2RpbmcgPSAoJycgKyBlbmNvZGluZykudG9Mb3dlckNhc2UoKVxuICAgICAgICBsb3dlcmVkQ2FzZSA9IHRydWVcbiAgICB9XG4gIH1cbn1cbkJ1ZmZlci5ieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aFxuXG5mdW5jdGlvbiBzbG93VG9TdHJpbmcgKGVuY29kaW5nLCBzdGFydCwgZW5kKSB7XG4gIHZhciBsb3dlcmVkQ2FzZSA9IGZhbHNlXG5cbiAgLy8gTm8gbmVlZCB0byB2ZXJpZnkgdGhhdCBcInRoaXMubGVuZ3RoIDw9IE1BWF9VSU5UMzJcIiBzaW5jZSBpdCdzIGEgcmVhZC1vbmx5XG4gIC8vIHByb3BlcnR5IG9mIGEgdHlwZWQgYXJyYXkuXG5cbiAgLy8gVGhpcyBiZWhhdmVzIG5laXRoZXIgbGlrZSBTdHJpbmcgbm9yIFVpbnQ4QXJyYXkgaW4gdGhhdCB3ZSBzZXQgc3RhcnQvZW5kXG4gIC8vIHRvIHRoZWlyIHVwcGVyL2xvd2VyIGJvdW5kcyBpZiB0aGUgdmFsdWUgcGFzc2VkIGlzIG91dCBvZiByYW5nZS5cbiAgLy8gdW5kZWZpbmVkIGlzIGhhbmRsZWQgc3BlY2lhbGx5IGFzIHBlciBFQ01BLTI2MiA2dGggRWRpdGlvbixcbiAgLy8gU2VjdGlvbiAxMy4zLjMuNyBSdW50aW1lIFNlbWFudGljczogS2V5ZWRCaW5kaW5nSW5pdGlhbGl6YXRpb24uXG4gIGlmIChzdGFydCA9PT0gdW5kZWZpbmVkIHx8IHN0YXJ0IDwgMCkge1xuICAgIHN0YXJ0ID0gMFxuICB9XG4gIC8vIFJldHVybiBlYXJseSBpZiBzdGFydCA+IHRoaXMubGVuZ3RoLiBEb25lIGhlcmUgdG8gcHJldmVudCBwb3RlbnRpYWwgdWludDMyXG4gIC8vIGNvZXJjaW9uIGZhaWwgYmVsb3cuXG4gIGlmIChzdGFydCA+IHRoaXMubGVuZ3RoKSB7XG4gICAgcmV0dXJuICcnXG4gIH1cblxuICBpZiAoZW5kID09PSB1bmRlZmluZWQgfHwgZW5kID4gdGhpcy5sZW5ndGgpIHtcbiAgICBlbmQgPSB0aGlzLmxlbmd0aFxuICB9XG5cbiAgaWYgKGVuZCA8PSAwKSB7XG4gICAgcmV0dXJuICcnXG4gIH1cblxuICAvLyBGb3JjZSBjb2Vyc2lvbiB0byB1aW50MzIuIFRoaXMgd2lsbCBhbHNvIGNvZXJjZSBmYWxzZXkvTmFOIHZhbHVlcyB0byAwLlxuICBlbmQgPj4+PSAwXG4gIHN0YXJ0ID4+Pj0gMFxuXG4gIGlmIChlbmQgPD0gc3RhcnQpIHtcbiAgICByZXR1cm4gJydcbiAgfVxuXG4gIGlmICghZW5jb2RpbmcpIGVuY29kaW5nID0gJ3V0ZjgnXG5cbiAgd2hpbGUgKHRydWUpIHtcbiAgICBzd2l0Y2ggKGVuY29kaW5nKSB7XG4gICAgICBjYXNlICdoZXgnOlxuICAgICAgICByZXR1cm4gaGV4U2xpY2UodGhpcywgc3RhcnQsIGVuZClcblxuICAgICAgY2FzZSAndXRmOCc6XG4gICAgICBjYXNlICd1dGYtOCc6XG4gICAgICAgIHJldHVybiB1dGY4U2xpY2UodGhpcywgc3RhcnQsIGVuZClcblxuICAgICAgY2FzZSAnYXNjaWknOlxuICAgICAgICByZXR1cm4gYXNjaWlTbGljZSh0aGlzLCBzdGFydCwgZW5kKVxuXG4gICAgICBjYXNlICdsYXRpbjEnOlxuICAgICAgY2FzZSAnYmluYXJ5JzpcbiAgICAgICAgcmV0dXJuIGxhdGluMVNsaWNlKHRoaXMsIHN0YXJ0LCBlbmQpXG5cbiAgICAgIGNhc2UgJ2Jhc2U2NCc6XG4gICAgICAgIHJldHVybiBiYXNlNjRTbGljZSh0aGlzLCBzdGFydCwgZW5kKVxuXG4gICAgICBjYXNlICd1Y3MyJzpcbiAgICAgIGNhc2UgJ3Vjcy0yJzpcbiAgICAgIGNhc2UgJ3V0ZjE2bGUnOlxuICAgICAgY2FzZSAndXRmLTE2bGUnOlxuICAgICAgICByZXR1cm4gdXRmMTZsZVNsaWNlKHRoaXMsIHN0YXJ0LCBlbmQpXG5cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGlmIChsb3dlcmVkQ2FzZSkgdGhyb3cgbmV3IFR5cGVFcnJvcignVW5rbm93biBlbmNvZGluZzogJyArIGVuY29kaW5nKVxuICAgICAgICBlbmNvZGluZyA9IChlbmNvZGluZyArICcnKS50b0xvd2VyQ2FzZSgpXG4gICAgICAgIGxvd2VyZWRDYXNlID0gdHJ1ZVxuICAgIH1cbiAgfVxufVxuXG4vLyBUaGUgcHJvcGVydHkgaXMgdXNlZCBieSBgQnVmZmVyLmlzQnVmZmVyYCBhbmQgYGlzLWJ1ZmZlcmAgKGluIFNhZmFyaSA1LTcpIHRvIGRldGVjdFxuLy8gQnVmZmVyIGluc3RhbmNlcy5cbkJ1ZmZlci5wcm90b3R5cGUuX2lzQnVmZmVyID0gdHJ1ZVxuXG5mdW5jdGlvbiBzd2FwIChiLCBuLCBtKSB7XG4gIHZhciBpID0gYltuXVxuICBiW25dID0gYlttXVxuICBiW21dID0gaVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnN3YXAxNiA9IGZ1bmN0aW9uIHN3YXAxNiAoKSB7XG4gIHZhciBsZW4gPSB0aGlzLmxlbmd0aFxuICBpZiAobGVuICUgMiAhPT0gMCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdCdWZmZXIgc2l6ZSBtdXN0IGJlIGEgbXVsdGlwbGUgb2YgMTYtYml0cycpXG4gIH1cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkgKz0gMikge1xuICAgIHN3YXAodGhpcywgaSwgaSArIDEpXG4gIH1cbiAgcmV0dXJuIHRoaXNcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5zd2FwMzIgPSBmdW5jdGlvbiBzd2FwMzIgKCkge1xuICB2YXIgbGVuID0gdGhpcy5sZW5ndGhcbiAgaWYgKGxlbiAlIDQgIT09IDApIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignQnVmZmVyIHNpemUgbXVzdCBiZSBhIG11bHRpcGxlIG9mIDMyLWJpdHMnKVxuICB9XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpICs9IDQpIHtcbiAgICBzd2FwKHRoaXMsIGksIGkgKyAzKVxuICAgIHN3YXAodGhpcywgaSArIDEsIGkgKyAyKVxuICB9XG4gIHJldHVybiB0aGlzXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuc3dhcDY0ID0gZnVuY3Rpb24gc3dhcDY0ICgpIHtcbiAgdmFyIGxlbiA9IHRoaXMubGVuZ3RoXG4gIGlmIChsZW4gJSA4ICE9PSAwKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0J1ZmZlciBzaXplIG11c3QgYmUgYSBtdWx0aXBsZSBvZiA2NC1iaXRzJylcbiAgfVxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSArPSA4KSB7XG4gICAgc3dhcCh0aGlzLCBpLCBpICsgNylcbiAgICBzd2FwKHRoaXMsIGkgKyAxLCBpICsgNilcbiAgICBzd2FwKHRoaXMsIGkgKyAyLCBpICsgNSlcbiAgICBzd2FwKHRoaXMsIGkgKyAzLCBpICsgNClcbiAgfVxuICByZXR1cm4gdGhpc1xufVxuXG5CdWZmZXIucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcgKCkge1xuICB2YXIgbGVuZ3RoID0gdGhpcy5sZW5ndGggfCAwXG4gIGlmIChsZW5ndGggPT09IDApIHJldHVybiAnJ1xuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMCkgcmV0dXJuIHV0ZjhTbGljZSh0aGlzLCAwLCBsZW5ndGgpXG4gIHJldHVybiBzbG93VG9TdHJpbmcuYXBwbHkodGhpcywgYXJndW1lbnRzKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLmVxdWFscyA9IGZ1bmN0aW9uIGVxdWFscyAoYikge1xuICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcihiKSkgdGhyb3cgbmV3IFR5cGVFcnJvcignQXJndW1lbnQgbXVzdCBiZSBhIEJ1ZmZlcicpXG4gIGlmICh0aGlzID09PSBiKSByZXR1cm4gdHJ1ZVxuICByZXR1cm4gQnVmZmVyLmNvbXBhcmUodGhpcywgYikgPT09IDBcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5pbnNwZWN0ID0gZnVuY3Rpb24gaW5zcGVjdCAoKSB7XG4gIHZhciBzdHIgPSAnJ1xuICB2YXIgbWF4ID0gZXhwb3J0cy5JTlNQRUNUX01BWF9CWVRFU1xuICBpZiAodGhpcy5sZW5ndGggPiAwKSB7XG4gICAgc3RyID0gdGhpcy50b1N0cmluZygnaGV4JywgMCwgbWF4KS5tYXRjaCgvLnsyfS9nKS5qb2luKCcgJylcbiAgICBpZiAodGhpcy5sZW5ndGggPiBtYXgpIHN0ciArPSAnIC4uLiAnXG4gIH1cbiAgcmV0dXJuICc8QnVmZmVyICcgKyBzdHIgKyAnPidcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5jb21wYXJlID0gZnVuY3Rpb24gY29tcGFyZSAodGFyZ2V0LCBzdGFydCwgZW5kLCB0aGlzU3RhcnQsIHRoaXNFbmQpIHtcbiAgaWYgKCFCdWZmZXIuaXNCdWZmZXIodGFyZ2V0KSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0FyZ3VtZW50IG11c3QgYmUgYSBCdWZmZXInKVxuICB9XG5cbiAgaWYgKHN0YXJ0ID09PSB1bmRlZmluZWQpIHtcbiAgICBzdGFydCA9IDBcbiAgfVxuICBpZiAoZW5kID09PSB1bmRlZmluZWQpIHtcbiAgICBlbmQgPSB0YXJnZXQgPyB0YXJnZXQubGVuZ3RoIDogMFxuICB9XG4gIGlmICh0aGlzU3RhcnQgPT09IHVuZGVmaW5lZCkge1xuICAgIHRoaXNTdGFydCA9IDBcbiAgfVxuICBpZiAodGhpc0VuZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgdGhpc0VuZCA9IHRoaXMubGVuZ3RoXG4gIH1cblxuICBpZiAoc3RhcnQgPCAwIHx8IGVuZCA+IHRhcmdldC5sZW5ndGggfHwgdGhpc1N0YXJ0IDwgMCB8fCB0aGlzRW5kID4gdGhpcy5sZW5ndGgpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignb3V0IG9mIHJhbmdlIGluZGV4JylcbiAgfVxuXG4gIGlmICh0aGlzU3RhcnQgPj0gdGhpc0VuZCAmJiBzdGFydCA+PSBlbmQpIHtcbiAgICByZXR1cm4gMFxuICB9XG4gIGlmICh0aGlzU3RhcnQgPj0gdGhpc0VuZCkge1xuICAgIHJldHVybiAtMVxuICB9XG4gIGlmIChzdGFydCA+PSBlbmQpIHtcbiAgICByZXR1cm4gMVxuICB9XG5cbiAgc3RhcnQgPj4+PSAwXG4gIGVuZCA+Pj49IDBcbiAgdGhpc1N0YXJ0ID4+Pj0gMFxuICB0aGlzRW5kID4+Pj0gMFxuXG4gIGlmICh0aGlzID09PSB0YXJnZXQpIHJldHVybiAwXG5cbiAgdmFyIHggPSB0aGlzRW5kIC0gdGhpc1N0YXJ0XG4gIHZhciB5ID0gZW5kIC0gc3RhcnRcbiAgdmFyIGxlbiA9IE1hdGgubWluKHgsIHkpXG5cbiAgdmFyIHRoaXNDb3B5ID0gdGhpcy5zbGljZSh0aGlzU3RhcnQsIHRoaXNFbmQpXG4gIHZhciB0YXJnZXRDb3B5ID0gdGFyZ2V0LnNsaWNlKHN0YXJ0LCBlbmQpXG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47ICsraSkge1xuICAgIGlmICh0aGlzQ29weVtpXSAhPT0gdGFyZ2V0Q29weVtpXSkge1xuICAgICAgeCA9IHRoaXNDb3B5W2ldXG4gICAgICB5ID0gdGFyZ2V0Q29weVtpXVxuICAgICAgYnJlYWtcbiAgICB9XG4gIH1cblxuICBpZiAoeCA8IHkpIHJldHVybiAtMVxuICBpZiAoeSA8IHgpIHJldHVybiAxXG4gIHJldHVybiAwXG59XG5cbi8vIEZpbmRzIGVpdGhlciB0aGUgZmlyc3QgaW5kZXggb2YgYHZhbGAgaW4gYGJ1ZmZlcmAgYXQgb2Zmc2V0ID49IGBieXRlT2Zmc2V0YCxcbi8vIE9SIHRoZSBsYXN0IGluZGV4IG9mIGB2YWxgIGluIGBidWZmZXJgIGF0IG9mZnNldCA8PSBgYnl0ZU9mZnNldGAuXG4vL1xuLy8gQXJndW1lbnRzOlxuLy8gLSBidWZmZXIgLSBhIEJ1ZmZlciB0byBzZWFyY2hcbi8vIC0gdmFsIC0gYSBzdHJpbmcsIEJ1ZmZlciwgb3IgbnVtYmVyXG4vLyAtIGJ5dGVPZmZzZXQgLSBhbiBpbmRleCBpbnRvIGBidWZmZXJgOyB3aWxsIGJlIGNsYW1wZWQgdG8gYW4gaW50MzJcbi8vIC0gZW5jb2RpbmcgLSBhbiBvcHRpb25hbCBlbmNvZGluZywgcmVsZXZhbnQgaXMgdmFsIGlzIGEgc3RyaW5nXG4vLyAtIGRpciAtIHRydWUgZm9yIGluZGV4T2YsIGZhbHNlIGZvciBsYXN0SW5kZXhPZlxuZnVuY3Rpb24gYmlkaXJlY3Rpb25hbEluZGV4T2YgKGJ1ZmZlciwgdmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZywgZGlyKSB7XG4gIC8vIEVtcHR5IGJ1ZmZlciBtZWFucyBubyBtYXRjaFxuICBpZiAoYnVmZmVyLmxlbmd0aCA9PT0gMCkgcmV0dXJuIC0xXG5cbiAgLy8gTm9ybWFsaXplIGJ5dGVPZmZzZXRcbiAgaWYgKHR5cGVvZiBieXRlT2Zmc2V0ID09PSAnc3RyaW5nJykge1xuICAgIGVuY29kaW5nID0gYnl0ZU9mZnNldFxuICAgIGJ5dGVPZmZzZXQgPSAwXG4gIH0gZWxzZSBpZiAoYnl0ZU9mZnNldCA+IDB4N2ZmZmZmZmYpIHtcbiAgICBieXRlT2Zmc2V0ID0gMHg3ZmZmZmZmZlxuICB9IGVsc2UgaWYgKGJ5dGVPZmZzZXQgPCAtMHg4MDAwMDAwMCkge1xuICAgIGJ5dGVPZmZzZXQgPSAtMHg4MDAwMDAwMFxuICB9XG4gIGJ5dGVPZmZzZXQgPSArYnl0ZU9mZnNldCAgLy8gQ29lcmNlIHRvIE51bWJlci5cbiAgaWYgKGlzTmFOKGJ5dGVPZmZzZXQpKSB7XG4gICAgLy8gYnl0ZU9mZnNldDogaXQgaXQncyB1bmRlZmluZWQsIG51bGwsIE5hTiwgXCJmb29cIiwgZXRjLCBzZWFyY2ggd2hvbGUgYnVmZmVyXG4gICAgYnl0ZU9mZnNldCA9IGRpciA/IDAgOiAoYnVmZmVyLmxlbmd0aCAtIDEpXG4gIH1cblxuICAvLyBOb3JtYWxpemUgYnl0ZU9mZnNldDogbmVnYXRpdmUgb2Zmc2V0cyBzdGFydCBmcm9tIHRoZSBlbmQgb2YgdGhlIGJ1ZmZlclxuICBpZiAoYnl0ZU9mZnNldCA8IDApIGJ5dGVPZmZzZXQgPSBidWZmZXIubGVuZ3RoICsgYnl0ZU9mZnNldFxuICBpZiAoYnl0ZU9mZnNldCA+PSBidWZmZXIubGVuZ3RoKSB7XG4gICAgaWYgKGRpcikgcmV0dXJuIC0xXG4gICAgZWxzZSBieXRlT2Zmc2V0ID0gYnVmZmVyLmxlbmd0aCAtIDFcbiAgfSBlbHNlIGlmIChieXRlT2Zmc2V0IDwgMCkge1xuICAgIGlmIChkaXIpIGJ5dGVPZmZzZXQgPSAwXG4gICAgZWxzZSByZXR1cm4gLTFcbiAgfVxuXG4gIC8vIE5vcm1hbGl6ZSB2YWxcbiAgaWYgKHR5cGVvZiB2YWwgPT09ICdzdHJpbmcnKSB7XG4gICAgdmFsID0gQnVmZmVyLmZyb20odmFsLCBlbmNvZGluZylcbiAgfVxuXG4gIC8vIEZpbmFsbHksIHNlYXJjaCBlaXRoZXIgaW5kZXhPZiAoaWYgZGlyIGlzIHRydWUpIG9yIGxhc3RJbmRleE9mXG4gIGlmIChCdWZmZXIuaXNCdWZmZXIodmFsKSkge1xuICAgIC8vIFNwZWNpYWwgY2FzZTogbG9va2luZyBmb3IgZW1wdHkgc3RyaW5nL2J1ZmZlciBhbHdheXMgZmFpbHNcbiAgICBpZiAodmFsLmxlbmd0aCA9PT0gMCkge1xuICAgICAgcmV0dXJuIC0xXG4gICAgfVxuICAgIHJldHVybiBhcnJheUluZGV4T2YoYnVmZmVyLCB2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nLCBkaXIpXG4gIH0gZWxzZSBpZiAodHlwZW9mIHZhbCA9PT0gJ251bWJlcicpIHtcbiAgICB2YWwgPSB2YWwgJiAweEZGIC8vIFNlYXJjaCBmb3IgYSBieXRlIHZhbHVlIFswLTI1NV1cbiAgICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQgJiZcbiAgICAgICAgdHlwZW9mIFVpbnQ4QXJyYXkucHJvdG90eXBlLmluZGV4T2YgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGlmIChkaXIpIHtcbiAgICAgICAgcmV0dXJuIFVpbnQ4QXJyYXkucHJvdG90eXBlLmluZGV4T2YuY2FsbChidWZmZXIsIHZhbCwgYnl0ZU9mZnNldClcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBVaW50OEFycmF5LnByb3RvdHlwZS5sYXN0SW5kZXhPZi5jYWxsKGJ1ZmZlciwgdmFsLCBieXRlT2Zmc2V0KVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gYXJyYXlJbmRleE9mKGJ1ZmZlciwgWyB2YWwgXSwgYnl0ZU9mZnNldCwgZW5jb2RpbmcsIGRpcilcbiAgfVxuXG4gIHRocm93IG5ldyBUeXBlRXJyb3IoJ3ZhbCBtdXN0IGJlIHN0cmluZywgbnVtYmVyIG9yIEJ1ZmZlcicpXG59XG5cbmZ1bmN0aW9uIGFycmF5SW5kZXhPZiAoYXJyLCB2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nLCBkaXIpIHtcbiAgdmFyIGluZGV4U2l6ZSA9IDFcbiAgdmFyIGFyckxlbmd0aCA9IGFyci5sZW5ndGhcbiAgdmFyIHZhbExlbmd0aCA9IHZhbC5sZW5ndGhcblxuICBpZiAoZW5jb2RpbmcgIT09IHVuZGVmaW5lZCkge1xuICAgIGVuY29kaW5nID0gU3RyaW5nKGVuY29kaW5nKS50b0xvd2VyQ2FzZSgpXG4gICAgaWYgKGVuY29kaW5nID09PSAndWNzMicgfHwgZW5jb2RpbmcgPT09ICd1Y3MtMicgfHxcbiAgICAgICAgZW5jb2RpbmcgPT09ICd1dGYxNmxlJyB8fCBlbmNvZGluZyA9PT0gJ3V0Zi0xNmxlJykge1xuICAgICAgaWYgKGFyci5sZW5ndGggPCAyIHx8IHZhbC5sZW5ndGggPCAyKSB7XG4gICAgICAgIHJldHVybiAtMVxuICAgICAgfVxuICAgICAgaW5kZXhTaXplID0gMlxuICAgICAgYXJyTGVuZ3RoIC89IDJcbiAgICAgIHZhbExlbmd0aCAvPSAyXG4gICAgICBieXRlT2Zmc2V0IC89IDJcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiByZWFkIChidWYsIGkpIHtcbiAgICBpZiAoaW5kZXhTaXplID09PSAxKSB7XG4gICAgICByZXR1cm4gYnVmW2ldXG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBidWYucmVhZFVJbnQxNkJFKGkgKiBpbmRleFNpemUpXG4gICAgfVxuICB9XG5cbiAgdmFyIGlcbiAgaWYgKGRpcikge1xuICAgIHZhciBmb3VuZEluZGV4ID0gLTFcbiAgICBmb3IgKGkgPSBieXRlT2Zmc2V0OyBpIDwgYXJyTGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmIChyZWFkKGFyciwgaSkgPT09IHJlYWQodmFsLCBmb3VuZEluZGV4ID09PSAtMSA/IDAgOiBpIC0gZm91bmRJbmRleCkpIHtcbiAgICAgICAgaWYgKGZvdW5kSW5kZXggPT09IC0xKSBmb3VuZEluZGV4ID0gaVxuICAgICAgICBpZiAoaSAtIGZvdW5kSW5kZXggKyAxID09PSB2YWxMZW5ndGgpIHJldHVybiBmb3VuZEluZGV4ICogaW5kZXhTaXplXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoZm91bmRJbmRleCAhPT0gLTEpIGkgLT0gaSAtIGZvdW5kSW5kZXhcbiAgICAgICAgZm91bmRJbmRleCA9IC0xXG4gICAgICB9XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGlmIChieXRlT2Zmc2V0ICsgdmFsTGVuZ3RoID4gYXJyTGVuZ3RoKSBieXRlT2Zmc2V0ID0gYXJyTGVuZ3RoIC0gdmFsTGVuZ3RoXG4gICAgZm9yIChpID0gYnl0ZU9mZnNldDsgaSA+PSAwOyBpLS0pIHtcbiAgICAgIHZhciBmb3VuZCA9IHRydWVcbiAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgdmFsTGVuZ3RoOyBqKyspIHtcbiAgICAgICAgaWYgKHJlYWQoYXJyLCBpICsgaikgIT09IHJlYWQodmFsLCBqKSkge1xuICAgICAgICAgIGZvdW5kID0gZmFsc2VcbiAgICAgICAgICBicmVha1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoZm91bmQpIHJldHVybiBpXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIC0xXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuaW5jbHVkZXMgPSBmdW5jdGlvbiBpbmNsdWRlcyAodmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZykge1xuICByZXR1cm4gdGhpcy5pbmRleE9mKHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcpICE9PSAtMVxufVxuXG5CdWZmZXIucHJvdG90eXBlLmluZGV4T2YgPSBmdW5jdGlvbiBpbmRleE9mICh2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nKSB7XG4gIHJldHVybiBiaWRpcmVjdGlvbmFsSW5kZXhPZih0aGlzLCB2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nLCB0cnVlKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLmxhc3RJbmRleE9mID0gZnVuY3Rpb24gbGFzdEluZGV4T2YgKHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcpIHtcbiAgcmV0dXJuIGJpZGlyZWN0aW9uYWxJbmRleE9mKHRoaXMsIHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcsIGZhbHNlKVxufVxuXG5mdW5jdGlvbiBoZXhXcml0ZSAoYnVmLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKSB7XG4gIG9mZnNldCA9IE51bWJlcihvZmZzZXQpIHx8IDBcbiAgdmFyIHJlbWFpbmluZyA9IGJ1Zi5sZW5ndGggLSBvZmZzZXRcbiAgaWYgKCFsZW5ndGgpIHtcbiAgICBsZW5ndGggPSByZW1haW5pbmdcbiAgfSBlbHNlIHtcbiAgICBsZW5ndGggPSBOdW1iZXIobGVuZ3RoKVxuICAgIGlmIChsZW5ndGggPiByZW1haW5pbmcpIHtcbiAgICAgIGxlbmd0aCA9IHJlbWFpbmluZ1xuICAgIH1cbiAgfVxuXG4gIC8vIG11c3QgYmUgYW4gZXZlbiBudW1iZXIgb2YgZGlnaXRzXG4gIHZhciBzdHJMZW4gPSBzdHJpbmcubGVuZ3RoXG4gIGlmIChzdHJMZW4gJSAyICE9PSAwKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdJbnZhbGlkIGhleCBzdHJpbmcnKVxuXG4gIGlmIChsZW5ndGggPiBzdHJMZW4gLyAyKSB7XG4gICAgbGVuZ3RoID0gc3RyTGVuIC8gMlxuICB9XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyArK2kpIHtcbiAgICB2YXIgcGFyc2VkID0gcGFyc2VJbnQoc3RyaW5nLnN1YnN0cihpICogMiwgMiksIDE2KVxuICAgIGlmIChpc05hTihwYXJzZWQpKSByZXR1cm4gaVxuICAgIGJ1ZltvZmZzZXQgKyBpXSA9IHBhcnNlZFxuICB9XG4gIHJldHVybiBpXG59XG5cbmZ1bmN0aW9uIHV0ZjhXcml0ZSAoYnVmLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKSB7XG4gIHJldHVybiBibGl0QnVmZmVyKHV0ZjhUb0J5dGVzKHN0cmluZywgYnVmLmxlbmd0aCAtIG9mZnNldCksIGJ1Ziwgb2Zmc2V0LCBsZW5ndGgpXG59XG5cbmZ1bmN0aW9uIGFzY2lpV3JpdGUgKGJ1Ziwgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCkge1xuICByZXR1cm4gYmxpdEJ1ZmZlcihhc2NpaVRvQnl0ZXMoc3RyaW5nKSwgYnVmLCBvZmZzZXQsIGxlbmd0aClcbn1cblxuZnVuY3Rpb24gbGF0aW4xV3JpdGUgKGJ1Ziwgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCkge1xuICByZXR1cm4gYXNjaWlXcml0ZShidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpXG59XG5cbmZ1bmN0aW9uIGJhc2U2NFdyaXRlIChidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgcmV0dXJuIGJsaXRCdWZmZXIoYmFzZTY0VG9CeXRlcyhzdHJpbmcpLCBidWYsIG9mZnNldCwgbGVuZ3RoKVxufVxuXG5mdW5jdGlvbiB1Y3MyV3JpdGUgKGJ1Ziwgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCkge1xuICByZXR1cm4gYmxpdEJ1ZmZlcih1dGYxNmxlVG9CeXRlcyhzdHJpbmcsIGJ1Zi5sZW5ndGggLSBvZmZzZXQpLCBidWYsIG9mZnNldCwgbGVuZ3RoKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlID0gZnVuY3Rpb24gd3JpdGUgKHN0cmluZywgb2Zmc2V0LCBsZW5ndGgsIGVuY29kaW5nKSB7XG4gIC8vIEJ1ZmZlciN3cml0ZShzdHJpbmcpXG4gIGlmIChvZmZzZXQgPT09IHVuZGVmaW5lZCkge1xuICAgIGVuY29kaW5nID0gJ3V0ZjgnXG4gICAgbGVuZ3RoID0gdGhpcy5sZW5ndGhcbiAgICBvZmZzZXQgPSAwXG4gIC8vIEJ1ZmZlciN3cml0ZShzdHJpbmcsIGVuY29kaW5nKVxuICB9IGVsc2UgaWYgKGxlbmd0aCA9PT0gdW5kZWZpbmVkICYmIHR5cGVvZiBvZmZzZXQgPT09ICdzdHJpbmcnKSB7XG4gICAgZW5jb2RpbmcgPSBvZmZzZXRcbiAgICBsZW5ndGggPSB0aGlzLmxlbmd0aFxuICAgIG9mZnNldCA9IDBcbiAgLy8gQnVmZmVyI3dyaXRlKHN0cmluZywgb2Zmc2V0WywgbGVuZ3RoXVssIGVuY29kaW5nXSlcbiAgfSBlbHNlIGlmIChpc0Zpbml0ZShvZmZzZXQpKSB7XG4gICAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICAgIGlmIChpc0Zpbml0ZShsZW5ndGgpKSB7XG4gICAgICBsZW5ndGggPSBsZW5ndGggfCAwXG4gICAgICBpZiAoZW5jb2RpbmcgPT09IHVuZGVmaW5lZCkgZW5jb2RpbmcgPSAndXRmOCdcbiAgICB9IGVsc2Uge1xuICAgICAgZW5jb2RpbmcgPSBsZW5ndGhcbiAgICAgIGxlbmd0aCA9IHVuZGVmaW5lZFxuICAgIH1cbiAgLy8gbGVnYWN5IHdyaXRlKHN0cmluZywgZW5jb2RpbmcsIG9mZnNldCwgbGVuZ3RoKSAtIHJlbW92ZSBpbiB2MC4xM1xuICB9IGVsc2Uge1xuICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICdCdWZmZXIud3JpdGUoc3RyaW5nLCBlbmNvZGluZywgb2Zmc2V0WywgbGVuZ3RoXSkgaXMgbm8gbG9uZ2VyIHN1cHBvcnRlZCdcbiAgICApXG4gIH1cblxuICB2YXIgcmVtYWluaW5nID0gdGhpcy5sZW5ndGggLSBvZmZzZXRcbiAgaWYgKGxlbmd0aCA9PT0gdW5kZWZpbmVkIHx8IGxlbmd0aCA+IHJlbWFpbmluZykgbGVuZ3RoID0gcmVtYWluaW5nXG5cbiAgaWYgKChzdHJpbmcubGVuZ3RoID4gMCAmJiAobGVuZ3RoIDwgMCB8fCBvZmZzZXQgPCAwKSkgfHwgb2Zmc2V0ID4gdGhpcy5sZW5ndGgpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignQXR0ZW1wdCB0byB3cml0ZSBvdXRzaWRlIGJ1ZmZlciBib3VuZHMnKVxuICB9XG5cbiAgaWYgKCFlbmNvZGluZykgZW5jb2RpbmcgPSAndXRmOCdcblxuICB2YXIgbG93ZXJlZENhc2UgPSBmYWxzZVxuICBmb3IgKDs7KSB7XG4gICAgc3dpdGNoIChlbmNvZGluZykge1xuICAgICAgY2FzZSAnaGV4JzpcbiAgICAgICAgcmV0dXJuIGhleFdyaXRlKHRoaXMsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpXG5cbiAgICAgIGNhc2UgJ3V0ZjgnOlxuICAgICAgY2FzZSAndXRmLTgnOlxuICAgICAgICByZXR1cm4gdXRmOFdyaXRlKHRoaXMsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpXG5cbiAgICAgIGNhc2UgJ2FzY2lpJzpcbiAgICAgICAgcmV0dXJuIGFzY2lpV3JpdGUodGhpcywgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aClcblxuICAgICAgY2FzZSAnbGF0aW4xJzpcbiAgICAgIGNhc2UgJ2JpbmFyeSc6XG4gICAgICAgIHJldHVybiBsYXRpbjFXcml0ZSh0aGlzLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKVxuXG4gICAgICBjYXNlICdiYXNlNjQnOlxuICAgICAgICAvLyBXYXJuaW5nOiBtYXhMZW5ndGggbm90IHRha2VuIGludG8gYWNjb3VudCBpbiBiYXNlNjRXcml0ZVxuICAgICAgICByZXR1cm4gYmFzZTY0V3JpdGUodGhpcywgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aClcblxuICAgICAgY2FzZSAndWNzMic6XG4gICAgICBjYXNlICd1Y3MtMic6XG4gICAgICBjYXNlICd1dGYxNmxlJzpcbiAgICAgIGNhc2UgJ3V0Zi0xNmxlJzpcbiAgICAgICAgcmV0dXJuIHVjczJXcml0ZSh0aGlzLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKVxuXG4gICAgICBkZWZhdWx0OlxuICAgICAgICBpZiAobG93ZXJlZENhc2UpIHRocm93IG5ldyBUeXBlRXJyb3IoJ1Vua25vd24gZW5jb2Rpbmc6ICcgKyBlbmNvZGluZylcbiAgICAgICAgZW5jb2RpbmcgPSAoJycgKyBlbmNvZGluZykudG9Mb3dlckNhc2UoKVxuICAgICAgICBsb3dlcmVkQ2FzZSA9IHRydWVcbiAgICB9XG4gIH1cbn1cblxuQnVmZmVyLnByb3RvdHlwZS50b0pTT04gPSBmdW5jdGlvbiB0b0pTT04gKCkge1xuICByZXR1cm4ge1xuICAgIHR5cGU6ICdCdWZmZXInLFxuICAgIGRhdGE6IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKHRoaXMuX2FyciB8fCB0aGlzLCAwKVxuICB9XG59XG5cbmZ1bmN0aW9uIGJhc2U2NFNsaWNlIChidWYsIHN0YXJ0LCBlbmQpIHtcbiAgaWYgKHN0YXJ0ID09PSAwICYmIGVuZCA9PT0gYnVmLmxlbmd0aCkge1xuICAgIHJldHVybiBiYXNlNjQuZnJvbUJ5dGVBcnJheShidWYpXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGJhc2U2NC5mcm9tQnl0ZUFycmF5KGJ1Zi5zbGljZShzdGFydCwgZW5kKSlcbiAgfVxufVxuXG5mdW5jdGlvbiB1dGY4U2xpY2UgKGJ1Ziwgc3RhcnQsIGVuZCkge1xuICBlbmQgPSBNYXRoLm1pbihidWYubGVuZ3RoLCBlbmQpXG4gIHZhciByZXMgPSBbXVxuXG4gIHZhciBpID0gc3RhcnRcbiAgd2hpbGUgKGkgPCBlbmQpIHtcbiAgICB2YXIgZmlyc3RCeXRlID0gYnVmW2ldXG4gICAgdmFyIGNvZGVQb2ludCA9IG51bGxcbiAgICB2YXIgYnl0ZXNQZXJTZXF1ZW5jZSA9IChmaXJzdEJ5dGUgPiAweEVGKSA/IDRcbiAgICAgIDogKGZpcnN0Qnl0ZSA+IDB4REYpID8gM1xuICAgICAgOiAoZmlyc3RCeXRlID4gMHhCRikgPyAyXG4gICAgICA6IDFcblxuICAgIGlmIChpICsgYnl0ZXNQZXJTZXF1ZW5jZSA8PSBlbmQpIHtcbiAgICAgIHZhciBzZWNvbmRCeXRlLCB0aGlyZEJ5dGUsIGZvdXJ0aEJ5dGUsIHRlbXBDb2RlUG9pbnRcblxuICAgICAgc3dpdGNoIChieXRlc1BlclNlcXVlbmNlKSB7XG4gICAgICAgIGNhc2UgMTpcbiAgICAgICAgICBpZiAoZmlyc3RCeXRlIDwgMHg4MCkge1xuICAgICAgICAgICAgY29kZVBvaW50ID0gZmlyc3RCeXRlXG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGNhc2UgMjpcbiAgICAgICAgICBzZWNvbmRCeXRlID0gYnVmW2kgKyAxXVxuICAgICAgICAgIGlmICgoc2Vjb25kQnl0ZSAmIDB4QzApID09PSAweDgwKSB7XG4gICAgICAgICAgICB0ZW1wQ29kZVBvaW50ID0gKGZpcnN0Qnl0ZSAmIDB4MUYpIDw8IDB4NiB8IChzZWNvbmRCeXRlICYgMHgzRilcbiAgICAgICAgICAgIGlmICh0ZW1wQ29kZVBvaW50ID4gMHg3Rikge1xuICAgICAgICAgICAgICBjb2RlUG9pbnQgPSB0ZW1wQ29kZVBvaW50XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGNhc2UgMzpcbiAgICAgICAgICBzZWNvbmRCeXRlID0gYnVmW2kgKyAxXVxuICAgICAgICAgIHRoaXJkQnl0ZSA9IGJ1ZltpICsgMl1cbiAgICAgICAgICBpZiAoKHNlY29uZEJ5dGUgJiAweEMwKSA9PT0gMHg4MCAmJiAodGhpcmRCeXRlICYgMHhDMCkgPT09IDB4ODApIHtcbiAgICAgICAgICAgIHRlbXBDb2RlUG9pbnQgPSAoZmlyc3RCeXRlICYgMHhGKSA8PCAweEMgfCAoc2Vjb25kQnl0ZSAmIDB4M0YpIDw8IDB4NiB8ICh0aGlyZEJ5dGUgJiAweDNGKVxuICAgICAgICAgICAgaWYgKHRlbXBDb2RlUG9pbnQgPiAweDdGRiAmJiAodGVtcENvZGVQb2ludCA8IDB4RDgwMCB8fCB0ZW1wQ29kZVBvaW50ID4gMHhERkZGKSkge1xuICAgICAgICAgICAgICBjb2RlUG9pbnQgPSB0ZW1wQ29kZVBvaW50XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGNhc2UgNDpcbiAgICAgICAgICBzZWNvbmRCeXRlID0gYnVmW2kgKyAxXVxuICAgICAgICAgIHRoaXJkQnl0ZSA9IGJ1ZltpICsgMl1cbiAgICAgICAgICBmb3VydGhCeXRlID0gYnVmW2kgKyAzXVxuICAgICAgICAgIGlmICgoc2Vjb25kQnl0ZSAmIDB4QzApID09PSAweDgwICYmICh0aGlyZEJ5dGUgJiAweEMwKSA9PT0gMHg4MCAmJiAoZm91cnRoQnl0ZSAmIDB4QzApID09PSAweDgwKSB7XG4gICAgICAgICAgICB0ZW1wQ29kZVBvaW50ID0gKGZpcnN0Qnl0ZSAmIDB4RikgPDwgMHgxMiB8IChzZWNvbmRCeXRlICYgMHgzRikgPDwgMHhDIHwgKHRoaXJkQnl0ZSAmIDB4M0YpIDw8IDB4NiB8IChmb3VydGhCeXRlICYgMHgzRilcbiAgICAgICAgICAgIGlmICh0ZW1wQ29kZVBvaW50ID4gMHhGRkZGICYmIHRlbXBDb2RlUG9pbnQgPCAweDExMDAwMCkge1xuICAgICAgICAgICAgICBjb2RlUG9pbnQgPSB0ZW1wQ29kZVBvaW50XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChjb2RlUG9pbnQgPT09IG51bGwpIHtcbiAgICAgIC8vIHdlIGRpZCBub3QgZ2VuZXJhdGUgYSB2YWxpZCBjb2RlUG9pbnQgc28gaW5zZXJ0IGFcbiAgICAgIC8vIHJlcGxhY2VtZW50IGNoYXIgKFUrRkZGRCkgYW5kIGFkdmFuY2Ugb25seSAxIGJ5dGVcbiAgICAgIGNvZGVQb2ludCA9IDB4RkZGRFxuICAgICAgYnl0ZXNQZXJTZXF1ZW5jZSA9IDFcbiAgICB9IGVsc2UgaWYgKGNvZGVQb2ludCA+IDB4RkZGRikge1xuICAgICAgLy8gZW5jb2RlIHRvIHV0ZjE2IChzdXJyb2dhdGUgcGFpciBkYW5jZSlcbiAgICAgIGNvZGVQb2ludCAtPSAweDEwMDAwXG4gICAgICByZXMucHVzaChjb2RlUG9pbnQgPj4+IDEwICYgMHgzRkYgfCAweEQ4MDApXG4gICAgICBjb2RlUG9pbnQgPSAweERDMDAgfCBjb2RlUG9pbnQgJiAweDNGRlxuICAgIH1cblxuICAgIHJlcy5wdXNoKGNvZGVQb2ludClcbiAgICBpICs9IGJ5dGVzUGVyU2VxdWVuY2VcbiAgfVxuXG4gIHJldHVybiBkZWNvZGVDb2RlUG9pbnRzQXJyYXkocmVzKVxufVxuXG4vLyBCYXNlZCBvbiBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vYS8yMjc0NzI3Mi82ODA3NDIsIHRoZSBicm93c2VyIHdpdGhcbi8vIHRoZSBsb3dlc3QgbGltaXQgaXMgQ2hyb21lLCB3aXRoIDB4MTAwMDAgYXJncy5cbi8vIFdlIGdvIDEgbWFnbml0dWRlIGxlc3MsIGZvciBzYWZldHlcbnZhciBNQVhfQVJHVU1FTlRTX0xFTkdUSCA9IDB4MTAwMFxuXG5mdW5jdGlvbiBkZWNvZGVDb2RlUG9pbnRzQXJyYXkgKGNvZGVQb2ludHMpIHtcbiAgdmFyIGxlbiA9IGNvZGVQb2ludHMubGVuZ3RoXG4gIGlmIChsZW4gPD0gTUFYX0FSR1VNRU5UU19MRU5HVEgpIHtcbiAgICByZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZS5hcHBseShTdHJpbmcsIGNvZGVQb2ludHMpIC8vIGF2b2lkIGV4dHJhIHNsaWNlKClcbiAgfVxuXG4gIC8vIERlY29kZSBpbiBjaHVua3MgdG8gYXZvaWQgXCJjYWxsIHN0YWNrIHNpemUgZXhjZWVkZWRcIi5cbiAgdmFyIHJlcyA9ICcnXG4gIHZhciBpID0gMFxuICB3aGlsZSAoaSA8IGxlbikge1xuICAgIHJlcyArPSBTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KFxuICAgICAgU3RyaW5nLFxuICAgICAgY29kZVBvaW50cy5zbGljZShpLCBpICs9IE1BWF9BUkdVTUVOVFNfTEVOR1RIKVxuICAgIClcbiAgfVxuICByZXR1cm4gcmVzXG59XG5cbmZ1bmN0aW9uIGFzY2lpU2xpY2UgKGJ1Ziwgc3RhcnQsIGVuZCkge1xuICB2YXIgcmV0ID0gJydcbiAgZW5kID0gTWF0aC5taW4oYnVmLmxlbmd0aCwgZW5kKVxuXG4gIGZvciAodmFyIGkgPSBzdGFydDsgaSA8IGVuZDsgKytpKSB7XG4gICAgcmV0ICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoYnVmW2ldICYgMHg3RilcbiAgfVxuICByZXR1cm4gcmV0XG59XG5cbmZ1bmN0aW9uIGxhdGluMVNsaWNlIChidWYsIHN0YXJ0LCBlbmQpIHtcbiAgdmFyIHJldCA9ICcnXG4gIGVuZCA9IE1hdGgubWluKGJ1Zi5sZW5ndGgsIGVuZClcblxuICBmb3IgKHZhciBpID0gc3RhcnQ7IGkgPCBlbmQ7ICsraSkge1xuICAgIHJldCArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGJ1ZltpXSlcbiAgfVxuICByZXR1cm4gcmV0XG59XG5cbmZ1bmN0aW9uIGhleFNsaWNlIChidWYsIHN0YXJ0LCBlbmQpIHtcbiAgdmFyIGxlbiA9IGJ1Zi5sZW5ndGhcblxuICBpZiAoIXN0YXJ0IHx8IHN0YXJ0IDwgMCkgc3RhcnQgPSAwXG4gIGlmICghZW5kIHx8IGVuZCA8IDAgfHwgZW5kID4gbGVuKSBlbmQgPSBsZW5cblxuICB2YXIgb3V0ID0gJydcbiAgZm9yICh2YXIgaSA9IHN0YXJ0OyBpIDwgZW5kOyArK2kpIHtcbiAgICBvdXQgKz0gdG9IZXgoYnVmW2ldKVxuICB9XG4gIHJldHVybiBvdXRcbn1cblxuZnVuY3Rpb24gdXRmMTZsZVNsaWNlIChidWYsIHN0YXJ0LCBlbmQpIHtcbiAgdmFyIGJ5dGVzID0gYnVmLnNsaWNlKHN0YXJ0LCBlbmQpXG4gIHZhciByZXMgPSAnJ1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGJ5dGVzLmxlbmd0aDsgaSArPSAyKSB7XG4gICAgcmVzICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoYnl0ZXNbaV0gKyBieXRlc1tpICsgMV0gKiAyNTYpXG4gIH1cbiAgcmV0dXJuIHJlc1xufVxuXG5CdWZmZXIucHJvdG90eXBlLnNsaWNlID0gZnVuY3Rpb24gc2xpY2UgKHN0YXJ0LCBlbmQpIHtcbiAgdmFyIGxlbiA9IHRoaXMubGVuZ3RoXG4gIHN0YXJ0ID0gfn5zdGFydFxuICBlbmQgPSBlbmQgPT09IHVuZGVmaW5lZCA/IGxlbiA6IH5+ZW5kXG5cbiAgaWYgKHN0YXJ0IDwgMCkge1xuICAgIHN0YXJ0ICs9IGxlblxuICAgIGlmIChzdGFydCA8IDApIHN0YXJ0ID0gMFxuICB9IGVsc2UgaWYgKHN0YXJ0ID4gbGVuKSB7XG4gICAgc3RhcnQgPSBsZW5cbiAgfVxuXG4gIGlmIChlbmQgPCAwKSB7XG4gICAgZW5kICs9IGxlblxuICAgIGlmIChlbmQgPCAwKSBlbmQgPSAwXG4gIH0gZWxzZSBpZiAoZW5kID4gbGVuKSB7XG4gICAgZW5kID0gbGVuXG4gIH1cblxuICBpZiAoZW5kIDwgc3RhcnQpIGVuZCA9IHN0YXJ0XG5cbiAgdmFyIG5ld0J1ZlxuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICBuZXdCdWYgPSB0aGlzLnN1YmFycmF5KHN0YXJ0LCBlbmQpXG4gICAgbmV3QnVmLl9fcHJvdG9fXyA9IEJ1ZmZlci5wcm90b3R5cGVcbiAgfSBlbHNlIHtcbiAgICB2YXIgc2xpY2VMZW4gPSBlbmQgLSBzdGFydFxuICAgIG5ld0J1ZiA9IG5ldyBCdWZmZXIoc2xpY2VMZW4sIHVuZGVmaW5lZClcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNsaWNlTGVuOyArK2kpIHtcbiAgICAgIG5ld0J1ZltpXSA9IHRoaXNbaSArIHN0YXJ0XVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBuZXdCdWZcbn1cblxuLypcbiAqIE5lZWQgdG8gbWFrZSBzdXJlIHRoYXQgYnVmZmVyIGlzbid0IHRyeWluZyB0byB3cml0ZSBvdXQgb2YgYm91bmRzLlxuICovXG5mdW5jdGlvbiBjaGVja09mZnNldCAob2Zmc2V0LCBleHQsIGxlbmd0aCkge1xuICBpZiAoKG9mZnNldCAlIDEpICE9PSAwIHx8IG9mZnNldCA8IDApIHRocm93IG5ldyBSYW5nZUVycm9yKCdvZmZzZXQgaXMgbm90IHVpbnQnKVxuICBpZiAob2Zmc2V0ICsgZXh0ID4gbGVuZ3RoKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignVHJ5aW5nIHRvIGFjY2VzcyBiZXlvbmQgYnVmZmVyIGxlbmd0aCcpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnRMRSA9IGZ1bmN0aW9uIHJlYWRVSW50TEUgKG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCBieXRlTGVuZ3RoLCB0aGlzLmxlbmd0aClcblxuICB2YXIgdmFsID0gdGhpc1tvZmZzZXRdXG4gIHZhciBtdWwgPSAxXG4gIHZhciBpID0gMFxuICB3aGlsZSAoKytpIDwgYnl0ZUxlbmd0aCAmJiAobXVsICo9IDB4MTAwKSkge1xuICAgIHZhbCArPSB0aGlzW29mZnNldCArIGldICogbXVsXG4gIH1cblxuICByZXR1cm4gdmFsXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnRCRSA9IGZ1bmN0aW9uIHJlYWRVSW50QkUgKG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aCB8IDBcbiAgaWYgKCFub0Fzc2VydCkge1xuICAgIGNoZWNrT2Zmc2V0KG9mZnNldCwgYnl0ZUxlbmd0aCwgdGhpcy5sZW5ndGgpXG4gIH1cblxuICB2YXIgdmFsID0gdGhpc1tvZmZzZXQgKyAtLWJ5dGVMZW5ndGhdXG4gIHZhciBtdWwgPSAxXG4gIHdoaWxlIChieXRlTGVuZ3RoID4gMCAmJiAobXVsICo9IDB4MTAwKSkge1xuICAgIHZhbCArPSB0aGlzW29mZnNldCArIC0tYnl0ZUxlbmd0aF0gKiBtdWxcbiAgfVxuXG4gIHJldHVybiB2YWxcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVUludDggPSBmdW5jdGlvbiByZWFkVUludDggKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCAxLCB0aGlzLmxlbmd0aClcbiAgcmV0dXJuIHRoaXNbb2Zmc2V0XVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRVSW50MTZMRSA9IGZ1bmN0aW9uIHJlYWRVSW50MTZMRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDIsIHRoaXMubGVuZ3RoKVxuICByZXR1cm4gdGhpc1tvZmZzZXRdIHwgKHRoaXNbb2Zmc2V0ICsgMV0gPDwgOClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVUludDE2QkUgPSBmdW5jdGlvbiByZWFkVUludDE2QkUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCAyLCB0aGlzLmxlbmd0aClcbiAgcmV0dXJuICh0aGlzW29mZnNldF0gPDwgOCkgfCB0aGlzW29mZnNldCArIDFdXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnQzMkxFID0gZnVuY3Rpb24gcmVhZFVJbnQzMkxFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgNCwgdGhpcy5sZW5ndGgpXG5cbiAgcmV0dXJuICgodGhpc1tvZmZzZXRdKSB8XG4gICAgICAodGhpc1tvZmZzZXQgKyAxXSA8PCA4KSB8XG4gICAgICAodGhpc1tvZmZzZXQgKyAyXSA8PCAxNikpICtcbiAgICAgICh0aGlzW29mZnNldCArIDNdICogMHgxMDAwMDAwKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRVSW50MzJCRSA9IGZ1bmN0aW9uIHJlYWRVSW50MzJCRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDQsIHRoaXMubGVuZ3RoKVxuXG4gIHJldHVybiAodGhpc1tvZmZzZXRdICogMHgxMDAwMDAwKSArXG4gICAgKCh0aGlzW29mZnNldCArIDFdIDw8IDE2KSB8XG4gICAgKHRoaXNbb2Zmc2V0ICsgMl0gPDwgOCkgfFxuICAgIHRoaXNbb2Zmc2V0ICsgM10pXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludExFID0gZnVuY3Rpb24gcmVhZEludExFIChvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGggfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgYnl0ZUxlbmd0aCwgdGhpcy5sZW5ndGgpXG5cbiAgdmFyIHZhbCA9IHRoaXNbb2Zmc2V0XVxuICB2YXIgbXVsID0gMVxuICB2YXIgaSA9IDBcbiAgd2hpbGUgKCsraSA8IGJ5dGVMZW5ndGggJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICB2YWwgKz0gdGhpc1tvZmZzZXQgKyBpXSAqIG11bFxuICB9XG4gIG11bCAqPSAweDgwXG5cbiAgaWYgKHZhbCA+PSBtdWwpIHZhbCAtPSBNYXRoLnBvdygyLCA4ICogYnl0ZUxlbmd0aClcblxuICByZXR1cm4gdmFsXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludEJFID0gZnVuY3Rpb24gcmVhZEludEJFIChvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGggfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgYnl0ZUxlbmd0aCwgdGhpcy5sZW5ndGgpXG5cbiAgdmFyIGkgPSBieXRlTGVuZ3RoXG4gIHZhciBtdWwgPSAxXG4gIHZhciB2YWwgPSB0aGlzW29mZnNldCArIC0taV1cbiAgd2hpbGUgKGkgPiAwICYmIChtdWwgKj0gMHgxMDApKSB7XG4gICAgdmFsICs9IHRoaXNbb2Zmc2V0ICsgLS1pXSAqIG11bFxuICB9XG4gIG11bCAqPSAweDgwXG5cbiAgaWYgKHZhbCA+PSBtdWwpIHZhbCAtPSBNYXRoLnBvdygyLCA4ICogYnl0ZUxlbmd0aClcblxuICByZXR1cm4gdmFsXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludDggPSBmdW5jdGlvbiByZWFkSW50OCAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDEsIHRoaXMubGVuZ3RoKVxuICBpZiAoISh0aGlzW29mZnNldF0gJiAweDgwKSkgcmV0dXJuICh0aGlzW29mZnNldF0pXG4gIHJldHVybiAoKDB4ZmYgLSB0aGlzW29mZnNldF0gKyAxKSAqIC0xKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRJbnQxNkxFID0gZnVuY3Rpb24gcmVhZEludDE2TEUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCAyLCB0aGlzLmxlbmd0aClcbiAgdmFyIHZhbCA9IHRoaXNbb2Zmc2V0XSB8ICh0aGlzW29mZnNldCArIDFdIDw8IDgpXG4gIHJldHVybiAodmFsICYgMHg4MDAwKSA/IHZhbCB8IDB4RkZGRjAwMDAgOiB2YWxcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkSW50MTZCRSA9IGZ1bmN0aW9uIHJlYWRJbnQxNkJFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgMiwgdGhpcy5sZW5ndGgpXG4gIHZhciB2YWwgPSB0aGlzW29mZnNldCArIDFdIHwgKHRoaXNbb2Zmc2V0XSA8PCA4KVxuICByZXR1cm4gKHZhbCAmIDB4ODAwMCkgPyB2YWwgfCAweEZGRkYwMDAwIDogdmFsXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludDMyTEUgPSBmdW5jdGlvbiByZWFkSW50MzJMRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDQsIHRoaXMubGVuZ3RoKVxuXG4gIHJldHVybiAodGhpc1tvZmZzZXRdKSB8XG4gICAgKHRoaXNbb2Zmc2V0ICsgMV0gPDwgOCkgfFxuICAgICh0aGlzW29mZnNldCArIDJdIDw8IDE2KSB8XG4gICAgKHRoaXNbb2Zmc2V0ICsgM10gPDwgMjQpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludDMyQkUgPSBmdW5jdGlvbiByZWFkSW50MzJCRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDQsIHRoaXMubGVuZ3RoKVxuXG4gIHJldHVybiAodGhpc1tvZmZzZXRdIDw8IDI0KSB8XG4gICAgKHRoaXNbb2Zmc2V0ICsgMV0gPDwgMTYpIHxcbiAgICAodGhpc1tvZmZzZXQgKyAyXSA8PCA4KSB8XG4gICAgKHRoaXNbb2Zmc2V0ICsgM10pXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEZsb2F0TEUgPSBmdW5jdGlvbiByZWFkRmxvYXRMRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDQsIHRoaXMubGVuZ3RoKVxuICByZXR1cm4gaWVlZTc1NC5yZWFkKHRoaXMsIG9mZnNldCwgdHJ1ZSwgMjMsIDQpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEZsb2F0QkUgPSBmdW5jdGlvbiByZWFkRmxvYXRCRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDQsIHRoaXMubGVuZ3RoKVxuICByZXR1cm4gaWVlZTc1NC5yZWFkKHRoaXMsIG9mZnNldCwgZmFsc2UsIDIzLCA0KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWREb3VibGVMRSA9IGZ1bmN0aW9uIHJlYWREb3VibGVMRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDgsIHRoaXMubGVuZ3RoKVxuICByZXR1cm4gaWVlZTc1NC5yZWFkKHRoaXMsIG9mZnNldCwgdHJ1ZSwgNTIsIDgpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZERvdWJsZUJFID0gZnVuY3Rpb24gcmVhZERvdWJsZUJFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgOCwgdGhpcy5sZW5ndGgpXG4gIHJldHVybiBpZWVlNzU0LnJlYWQodGhpcywgb2Zmc2V0LCBmYWxzZSwgNTIsIDgpXG59XG5cbmZ1bmN0aW9uIGNoZWNrSW50IChidWYsIHZhbHVlLCBvZmZzZXQsIGV4dCwgbWF4LCBtaW4pIHtcbiAgaWYgKCFCdWZmZXIuaXNCdWZmZXIoYnVmKSkgdGhyb3cgbmV3IFR5cGVFcnJvcignXCJidWZmZXJcIiBhcmd1bWVudCBtdXN0IGJlIGEgQnVmZmVyIGluc3RhbmNlJylcbiAgaWYgKHZhbHVlID4gbWF4IHx8IHZhbHVlIDwgbWluKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignXCJ2YWx1ZVwiIGFyZ3VtZW50IGlzIG91dCBvZiBib3VuZHMnKVxuICBpZiAob2Zmc2V0ICsgZXh0ID4gYnVmLmxlbmd0aCkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0luZGV4IG91dCBvZiByYW5nZScpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50TEUgPSBmdW5jdGlvbiB3cml0ZVVJbnRMRSAodmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aCB8IDBcbiAgaWYgKCFub0Fzc2VydCkge1xuICAgIHZhciBtYXhCeXRlcyA9IE1hdGgucG93KDIsIDggKiBieXRlTGVuZ3RoKSAtIDFcbiAgICBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBtYXhCeXRlcywgMClcbiAgfVxuXG4gIHZhciBtdWwgPSAxXG4gIHZhciBpID0gMFxuICB0aGlzW29mZnNldF0gPSB2YWx1ZSAmIDB4RkZcbiAgd2hpbGUgKCsraSA8IGJ5dGVMZW5ndGggJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICB0aGlzW29mZnNldCArIGldID0gKHZhbHVlIC8gbXVsKSAmIDB4RkZcbiAgfVxuXG4gIHJldHVybiBvZmZzZXQgKyBieXRlTGVuZ3RoXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50QkUgPSBmdW5jdGlvbiB3cml0ZVVJbnRCRSAodmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aCB8IDBcbiAgaWYgKCFub0Fzc2VydCkge1xuICAgIHZhciBtYXhCeXRlcyA9IE1hdGgucG93KDIsIDggKiBieXRlTGVuZ3RoKSAtIDFcbiAgICBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBtYXhCeXRlcywgMClcbiAgfVxuXG4gIHZhciBpID0gYnl0ZUxlbmd0aCAtIDFcbiAgdmFyIG11bCA9IDFcbiAgdGhpc1tvZmZzZXQgKyBpXSA9IHZhbHVlICYgMHhGRlxuICB3aGlsZSAoLS1pID49IDAgJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICB0aGlzW29mZnNldCArIGldID0gKHZhbHVlIC8gbXVsKSAmIDB4RkZcbiAgfVxuXG4gIHJldHVybiBvZmZzZXQgKyBieXRlTGVuZ3RoXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50OCA9IGZ1bmN0aW9uIHdyaXRlVUludDggKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgMSwgMHhmZiwgMClcbiAgaWYgKCFCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkgdmFsdWUgPSBNYXRoLmZsb29yKHZhbHVlKVxuICB0aGlzW29mZnNldF0gPSAodmFsdWUgJiAweGZmKVxuICByZXR1cm4gb2Zmc2V0ICsgMVxufVxuXG5mdW5jdGlvbiBvYmplY3RXcml0ZVVJbnQxNiAoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBsaXR0bGVFbmRpYW4pIHtcbiAgaWYgKHZhbHVlIDwgMCkgdmFsdWUgPSAweGZmZmYgKyB2YWx1ZSArIDFcbiAgZm9yICh2YXIgaSA9IDAsIGogPSBNYXRoLm1pbihidWYubGVuZ3RoIC0gb2Zmc2V0LCAyKTsgaSA8IGo7ICsraSkge1xuICAgIGJ1ZltvZmZzZXQgKyBpXSA9ICh2YWx1ZSAmICgweGZmIDw8ICg4ICogKGxpdHRsZUVuZGlhbiA/IGkgOiAxIC0gaSkpKSkgPj4+XG4gICAgICAobGl0dGxlRW5kaWFuID8gaSA6IDEgLSBpKSAqIDhcbiAgfVxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlVUludDE2TEUgPSBmdW5jdGlvbiB3cml0ZVVJbnQxNkxFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDIsIDB4ZmZmZiwgMClcbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgdGhpc1tvZmZzZXRdID0gKHZhbHVlICYgMHhmZilcbiAgICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlID4+PiA4KVxuICB9IGVsc2Uge1xuICAgIG9iamVjdFdyaXRlVUludDE2KHRoaXMsIHZhbHVlLCBvZmZzZXQsIHRydWUpXG4gIH1cbiAgcmV0dXJuIG9mZnNldCArIDJcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVJbnQxNkJFID0gZnVuY3Rpb24gd3JpdGVVSW50MTZCRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCAyLCAweGZmZmYsIDApXG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSA+Pj4gOClcbiAgICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlICYgMHhmZilcbiAgfSBlbHNlIHtcbiAgICBvYmplY3RXcml0ZVVJbnQxNih0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBmYWxzZSlcbiAgfVxuICByZXR1cm4gb2Zmc2V0ICsgMlxufVxuXG5mdW5jdGlvbiBvYmplY3RXcml0ZVVJbnQzMiAoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBsaXR0bGVFbmRpYW4pIHtcbiAgaWYgKHZhbHVlIDwgMCkgdmFsdWUgPSAweGZmZmZmZmZmICsgdmFsdWUgKyAxXG4gIGZvciAodmFyIGkgPSAwLCBqID0gTWF0aC5taW4oYnVmLmxlbmd0aCAtIG9mZnNldCwgNCk7IGkgPCBqOyArK2kpIHtcbiAgICBidWZbb2Zmc2V0ICsgaV0gPSAodmFsdWUgPj4+IChsaXR0bGVFbmRpYW4gPyBpIDogMyAtIGkpICogOCkgJiAweGZmXG4gIH1cbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVJbnQzMkxFID0gZnVuY3Rpb24gd3JpdGVVSW50MzJMRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCA0LCAweGZmZmZmZmZmLCAwKVxuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICB0aGlzW29mZnNldCArIDNdID0gKHZhbHVlID4+PiAyNClcbiAgICB0aGlzW29mZnNldCArIDJdID0gKHZhbHVlID4+PiAxNilcbiAgICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlID4+PiA4KVxuICAgIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSAmIDB4ZmYpXG4gIH0gZWxzZSB7XG4gICAgb2JqZWN0V3JpdGVVSW50MzIodGhpcywgdmFsdWUsIG9mZnNldCwgdHJ1ZSlcbiAgfVxuICByZXR1cm4gb2Zmc2V0ICsgNFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlVUludDMyQkUgPSBmdW5jdGlvbiB3cml0ZVVJbnQzMkJFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDQsIDB4ZmZmZmZmZmYsIDApXG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSA+Pj4gMjQpXG4gICAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSA+Pj4gMTYpXG4gICAgdGhpc1tvZmZzZXQgKyAyXSA9ICh2YWx1ZSA+Pj4gOClcbiAgICB0aGlzW29mZnNldCArIDNdID0gKHZhbHVlICYgMHhmZilcbiAgfSBlbHNlIHtcbiAgICBvYmplY3RXcml0ZVVJbnQzMih0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBmYWxzZSlcbiAgfVxuICByZXR1cm4gb2Zmc2V0ICsgNFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50TEUgPSBmdW5jdGlvbiB3cml0ZUludExFICh2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGlmICghbm9Bc3NlcnQpIHtcbiAgICB2YXIgbGltaXQgPSBNYXRoLnBvdygyLCA4ICogYnl0ZUxlbmd0aCAtIDEpXG5cbiAgICBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBsaW1pdCAtIDEsIC1saW1pdClcbiAgfVxuXG4gIHZhciBpID0gMFxuICB2YXIgbXVsID0gMVxuICB2YXIgc3ViID0gMFxuICB0aGlzW29mZnNldF0gPSB2YWx1ZSAmIDB4RkZcbiAgd2hpbGUgKCsraSA8IGJ5dGVMZW5ndGggJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICBpZiAodmFsdWUgPCAwICYmIHN1YiA9PT0gMCAmJiB0aGlzW29mZnNldCArIGkgLSAxXSAhPT0gMCkge1xuICAgICAgc3ViID0gMVxuICAgIH1cbiAgICB0aGlzW29mZnNldCArIGldID0gKCh2YWx1ZSAvIG11bCkgPj4gMCkgLSBzdWIgJiAweEZGXG4gIH1cblxuICByZXR1cm4gb2Zmc2V0ICsgYnl0ZUxlbmd0aFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50QkUgPSBmdW5jdGlvbiB3cml0ZUludEJFICh2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGlmICghbm9Bc3NlcnQpIHtcbiAgICB2YXIgbGltaXQgPSBNYXRoLnBvdygyLCA4ICogYnl0ZUxlbmd0aCAtIDEpXG5cbiAgICBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBsaW1pdCAtIDEsIC1saW1pdClcbiAgfVxuXG4gIHZhciBpID0gYnl0ZUxlbmd0aCAtIDFcbiAgdmFyIG11bCA9IDFcbiAgdmFyIHN1YiA9IDBcbiAgdGhpc1tvZmZzZXQgKyBpXSA9IHZhbHVlICYgMHhGRlxuICB3aGlsZSAoLS1pID49IDAgJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICBpZiAodmFsdWUgPCAwICYmIHN1YiA9PT0gMCAmJiB0aGlzW29mZnNldCArIGkgKyAxXSAhPT0gMCkge1xuICAgICAgc3ViID0gMVxuICAgIH1cbiAgICB0aGlzW29mZnNldCArIGldID0gKCh2YWx1ZSAvIG11bCkgPj4gMCkgLSBzdWIgJiAweEZGXG4gIH1cblxuICByZXR1cm4gb2Zmc2V0ICsgYnl0ZUxlbmd0aFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50OCA9IGZ1bmN0aW9uIHdyaXRlSW50OCAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCAxLCAweDdmLCAtMHg4MClcbiAgaWYgKCFCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkgdmFsdWUgPSBNYXRoLmZsb29yKHZhbHVlKVxuICBpZiAodmFsdWUgPCAwKSB2YWx1ZSA9IDB4ZmYgKyB2YWx1ZSArIDFcbiAgdGhpc1tvZmZzZXRdID0gKHZhbHVlICYgMHhmZilcbiAgcmV0dXJuIG9mZnNldCArIDFcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUludDE2TEUgPSBmdW5jdGlvbiB3cml0ZUludDE2TEUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgMiwgMHg3ZmZmLCAtMHg4MDAwKVxuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICB0aGlzW29mZnNldF0gPSAodmFsdWUgJiAweGZmKVxuICAgIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgPj4+IDgpXG4gIH0gZWxzZSB7XG4gICAgb2JqZWN0V3JpdGVVSW50MTYodGhpcywgdmFsdWUsIG9mZnNldCwgdHJ1ZSlcbiAgfVxuICByZXR1cm4gb2Zmc2V0ICsgMlxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50MTZCRSA9IGZ1bmN0aW9uIHdyaXRlSW50MTZCRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCAyLCAweDdmZmYsIC0weDgwMDApXG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSA+Pj4gOClcbiAgICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlICYgMHhmZilcbiAgfSBlbHNlIHtcbiAgICBvYmplY3RXcml0ZVVJbnQxNih0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBmYWxzZSlcbiAgfVxuICByZXR1cm4gb2Zmc2V0ICsgMlxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50MzJMRSA9IGZ1bmN0aW9uIHdyaXRlSW50MzJMRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCA0LCAweDdmZmZmZmZmLCAtMHg4MDAwMDAwMClcbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgdGhpc1tvZmZzZXRdID0gKHZhbHVlICYgMHhmZilcbiAgICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlID4+PiA4KVxuICAgIHRoaXNbb2Zmc2V0ICsgMl0gPSAodmFsdWUgPj4+IDE2KVxuICAgIHRoaXNbb2Zmc2V0ICsgM10gPSAodmFsdWUgPj4+IDI0KVxuICB9IGVsc2Uge1xuICAgIG9iamVjdFdyaXRlVUludDMyKHRoaXMsIHZhbHVlLCBvZmZzZXQsIHRydWUpXG4gIH1cbiAgcmV0dXJuIG9mZnNldCArIDRcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUludDMyQkUgPSBmdW5jdGlvbiB3cml0ZUludDMyQkUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgNCwgMHg3ZmZmZmZmZiwgLTB4ODAwMDAwMDApXG4gIGlmICh2YWx1ZSA8IDApIHZhbHVlID0gMHhmZmZmZmZmZiArIHZhbHVlICsgMVxuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICB0aGlzW29mZnNldF0gPSAodmFsdWUgPj4+IDI0KVxuICAgIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgPj4+IDE2KVxuICAgIHRoaXNbb2Zmc2V0ICsgMl0gPSAodmFsdWUgPj4+IDgpXG4gICAgdGhpc1tvZmZzZXQgKyAzXSA9ICh2YWx1ZSAmIDB4ZmYpXG4gIH0gZWxzZSB7XG4gICAgb2JqZWN0V3JpdGVVSW50MzIodGhpcywgdmFsdWUsIG9mZnNldCwgZmFsc2UpXG4gIH1cbiAgcmV0dXJuIG9mZnNldCArIDRcbn1cblxuZnVuY3Rpb24gY2hlY2tJRUVFNzU0IChidWYsIHZhbHVlLCBvZmZzZXQsIGV4dCwgbWF4LCBtaW4pIHtcbiAgaWYgKG9mZnNldCArIGV4dCA+IGJ1Zi5sZW5ndGgpIHRocm93IG5ldyBSYW5nZUVycm9yKCdJbmRleCBvdXQgb2YgcmFuZ2UnKVxuICBpZiAob2Zmc2V0IDwgMCkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0luZGV4IG91dCBvZiByYW5nZScpXG59XG5cbmZ1bmN0aW9uIHdyaXRlRmxvYXQgKGJ1ZiwgdmFsdWUsIG9mZnNldCwgbGl0dGxlRW5kaWFuLCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgY2hlY2tJRUVFNzU0KGJ1ZiwgdmFsdWUsIG9mZnNldCwgNCwgMy40MDI4MjM0NjYzODUyODg2ZSszOCwgLTMuNDAyODIzNDY2Mzg1Mjg4NmUrMzgpXG4gIH1cbiAgaWVlZTc1NC53cml0ZShidWYsIHZhbHVlLCBvZmZzZXQsIGxpdHRsZUVuZGlhbiwgMjMsIDQpXG4gIHJldHVybiBvZmZzZXQgKyA0XG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVGbG9hdExFID0gZnVuY3Rpb24gd3JpdGVGbG9hdExFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICByZXR1cm4gd3JpdGVGbG9hdCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCB0cnVlLCBub0Fzc2VydClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUZsb2F0QkUgPSBmdW5jdGlvbiB3cml0ZUZsb2F0QkUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHJldHVybiB3cml0ZUZsb2F0KHRoaXMsIHZhbHVlLCBvZmZzZXQsIGZhbHNlLCBub0Fzc2VydClcbn1cblxuZnVuY3Rpb24gd3JpdGVEb3VibGUgKGJ1ZiwgdmFsdWUsIG9mZnNldCwgbGl0dGxlRW5kaWFuLCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgY2hlY2tJRUVFNzU0KGJ1ZiwgdmFsdWUsIG9mZnNldCwgOCwgMS43OTc2OTMxMzQ4NjIzMTU3RSszMDgsIC0xLjc5NzY5MzEzNDg2MjMxNTdFKzMwOClcbiAgfVxuICBpZWVlNzU0LndyaXRlKGJ1ZiwgdmFsdWUsIG9mZnNldCwgbGl0dGxlRW5kaWFuLCA1MiwgOClcbiAgcmV0dXJuIG9mZnNldCArIDhcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZURvdWJsZUxFID0gZnVuY3Rpb24gd3JpdGVEb3VibGVMRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgcmV0dXJuIHdyaXRlRG91YmxlKHRoaXMsIHZhbHVlLCBvZmZzZXQsIHRydWUsIG5vQXNzZXJ0KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlRG91YmxlQkUgPSBmdW5jdGlvbiB3cml0ZURvdWJsZUJFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICByZXR1cm4gd3JpdGVEb3VibGUodGhpcywgdmFsdWUsIG9mZnNldCwgZmFsc2UsIG5vQXNzZXJ0KVxufVxuXG4vLyBjb3B5KHRhcmdldEJ1ZmZlciwgdGFyZ2V0U3RhcnQ9MCwgc291cmNlU3RhcnQ9MCwgc291cmNlRW5kPWJ1ZmZlci5sZW5ndGgpXG5CdWZmZXIucHJvdG90eXBlLmNvcHkgPSBmdW5jdGlvbiBjb3B5ICh0YXJnZXQsIHRhcmdldFN0YXJ0LCBzdGFydCwgZW5kKSB7XG4gIGlmICghc3RhcnQpIHN0YXJ0ID0gMFxuICBpZiAoIWVuZCAmJiBlbmQgIT09IDApIGVuZCA9IHRoaXMubGVuZ3RoXG4gIGlmICh0YXJnZXRTdGFydCA+PSB0YXJnZXQubGVuZ3RoKSB0YXJnZXRTdGFydCA9IHRhcmdldC5sZW5ndGhcbiAgaWYgKCF0YXJnZXRTdGFydCkgdGFyZ2V0U3RhcnQgPSAwXG4gIGlmIChlbmQgPiAwICYmIGVuZCA8IHN0YXJ0KSBlbmQgPSBzdGFydFxuXG4gIC8vIENvcHkgMCBieXRlczsgd2UncmUgZG9uZVxuICBpZiAoZW5kID09PSBzdGFydCkgcmV0dXJuIDBcbiAgaWYgKHRhcmdldC5sZW5ndGggPT09IDAgfHwgdGhpcy5sZW5ndGggPT09IDApIHJldHVybiAwXG5cbiAgLy8gRmF0YWwgZXJyb3IgY29uZGl0aW9uc1xuICBpZiAodGFyZ2V0U3RhcnQgPCAwKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ3RhcmdldFN0YXJ0IG91dCBvZiBib3VuZHMnKVxuICB9XG4gIGlmIChzdGFydCA8IDAgfHwgc3RhcnQgPj0gdGhpcy5sZW5ndGgpIHRocm93IG5ldyBSYW5nZUVycm9yKCdzb3VyY2VTdGFydCBvdXQgb2YgYm91bmRzJylcbiAgaWYgKGVuZCA8IDApIHRocm93IG5ldyBSYW5nZUVycm9yKCdzb3VyY2VFbmQgb3V0IG9mIGJvdW5kcycpXG5cbiAgLy8gQXJlIHdlIG9vYj9cbiAgaWYgKGVuZCA+IHRoaXMubGVuZ3RoKSBlbmQgPSB0aGlzLmxlbmd0aFxuICBpZiAodGFyZ2V0Lmxlbmd0aCAtIHRhcmdldFN0YXJ0IDwgZW5kIC0gc3RhcnQpIHtcbiAgICBlbmQgPSB0YXJnZXQubGVuZ3RoIC0gdGFyZ2V0U3RhcnQgKyBzdGFydFxuICB9XG5cbiAgdmFyIGxlbiA9IGVuZCAtIHN0YXJ0XG4gIHZhciBpXG5cbiAgaWYgKHRoaXMgPT09IHRhcmdldCAmJiBzdGFydCA8IHRhcmdldFN0YXJ0ICYmIHRhcmdldFN0YXJ0IDwgZW5kKSB7XG4gICAgLy8gZGVzY2VuZGluZyBjb3B5IGZyb20gZW5kXG4gICAgZm9yIChpID0gbGVuIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgIHRhcmdldFtpICsgdGFyZ2V0U3RhcnRdID0gdGhpc1tpICsgc3RhcnRdXG4gICAgfVxuICB9IGVsc2UgaWYgKGxlbiA8IDEwMDAgfHwgIUJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgLy8gYXNjZW5kaW5nIGNvcHkgZnJvbSBzdGFydFxuICAgIGZvciAoaSA9IDA7IGkgPCBsZW47ICsraSkge1xuICAgICAgdGFyZ2V0W2kgKyB0YXJnZXRTdGFydF0gPSB0aGlzW2kgKyBzdGFydF1cbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgVWludDhBcnJheS5wcm90b3R5cGUuc2V0LmNhbGwoXG4gICAgICB0YXJnZXQsXG4gICAgICB0aGlzLnN1YmFycmF5KHN0YXJ0LCBzdGFydCArIGxlbiksXG4gICAgICB0YXJnZXRTdGFydFxuICAgIClcbiAgfVxuXG4gIHJldHVybiBsZW5cbn1cblxuLy8gVXNhZ2U6XG4vLyAgICBidWZmZXIuZmlsbChudW1iZXJbLCBvZmZzZXRbLCBlbmRdXSlcbi8vICAgIGJ1ZmZlci5maWxsKGJ1ZmZlclssIG9mZnNldFssIGVuZF1dKVxuLy8gICAgYnVmZmVyLmZpbGwoc3RyaW5nWywgb2Zmc2V0WywgZW5kXV1bLCBlbmNvZGluZ10pXG5CdWZmZXIucHJvdG90eXBlLmZpbGwgPSBmdW5jdGlvbiBmaWxsICh2YWwsIHN0YXJ0LCBlbmQsIGVuY29kaW5nKSB7XG4gIC8vIEhhbmRsZSBzdHJpbmcgY2FzZXM6XG4gIGlmICh0eXBlb2YgdmFsID09PSAnc3RyaW5nJykge1xuICAgIGlmICh0eXBlb2Ygc3RhcnQgPT09ICdzdHJpbmcnKSB7XG4gICAgICBlbmNvZGluZyA9IHN0YXJ0XG4gICAgICBzdGFydCA9IDBcbiAgICAgIGVuZCA9IHRoaXMubGVuZ3RoXG4gICAgfSBlbHNlIGlmICh0eXBlb2YgZW5kID09PSAnc3RyaW5nJykge1xuICAgICAgZW5jb2RpbmcgPSBlbmRcbiAgICAgIGVuZCA9IHRoaXMubGVuZ3RoXG4gICAgfVxuICAgIGlmICh2YWwubGVuZ3RoID09PSAxKSB7XG4gICAgICB2YXIgY29kZSA9IHZhbC5jaGFyQ29kZUF0KDApXG4gICAgICBpZiAoY29kZSA8IDI1Nikge1xuICAgICAgICB2YWwgPSBjb2RlXG4gICAgICB9XG4gICAgfVxuICAgIGlmIChlbmNvZGluZyAhPT0gdW5kZWZpbmVkICYmIHR5cGVvZiBlbmNvZGluZyAhPT0gJ3N0cmluZycpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2VuY29kaW5nIG11c3QgYmUgYSBzdHJpbmcnKVxuICAgIH1cbiAgICBpZiAodHlwZW9mIGVuY29kaW5nID09PSAnc3RyaW5nJyAmJiAhQnVmZmVyLmlzRW5jb2RpbmcoZW5jb2RpbmcpKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdVbmtub3duIGVuY29kaW5nOiAnICsgZW5jb2RpbmcpXG4gICAgfVxuICB9IGVsc2UgaWYgKHR5cGVvZiB2YWwgPT09ICdudW1iZXInKSB7XG4gICAgdmFsID0gdmFsICYgMjU1XG4gIH1cblxuICAvLyBJbnZhbGlkIHJhbmdlcyBhcmUgbm90IHNldCB0byBhIGRlZmF1bHQsIHNvIGNhbiByYW5nZSBjaGVjayBlYXJseS5cbiAgaWYgKHN0YXJ0IDwgMCB8fCB0aGlzLmxlbmd0aCA8IHN0YXJ0IHx8IHRoaXMubGVuZ3RoIDwgZW5kKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ091dCBvZiByYW5nZSBpbmRleCcpXG4gIH1cblxuICBpZiAoZW5kIDw9IHN0YXJ0KSB7XG4gICAgcmV0dXJuIHRoaXNcbiAgfVxuXG4gIHN0YXJ0ID0gc3RhcnQgPj4+IDBcbiAgZW5kID0gZW5kID09PSB1bmRlZmluZWQgPyB0aGlzLmxlbmd0aCA6IGVuZCA+Pj4gMFxuXG4gIGlmICghdmFsKSB2YWwgPSAwXG5cbiAgdmFyIGlcbiAgaWYgKHR5cGVvZiB2YWwgPT09ICdudW1iZXInKSB7XG4gICAgZm9yIChpID0gc3RhcnQ7IGkgPCBlbmQ7ICsraSkge1xuICAgICAgdGhpc1tpXSA9IHZhbFxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICB2YXIgYnl0ZXMgPSBCdWZmZXIuaXNCdWZmZXIodmFsKVxuICAgICAgPyB2YWxcbiAgICAgIDogdXRmOFRvQnl0ZXMobmV3IEJ1ZmZlcih2YWwsIGVuY29kaW5nKS50b1N0cmluZygpKVxuICAgIHZhciBsZW4gPSBieXRlcy5sZW5ndGhcbiAgICBmb3IgKGkgPSAwOyBpIDwgZW5kIC0gc3RhcnQ7ICsraSkge1xuICAgICAgdGhpc1tpICsgc3RhcnRdID0gYnl0ZXNbaSAlIGxlbl1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGhpc1xufVxuXG4vLyBIRUxQRVIgRlVOQ1RJT05TXG4vLyA9PT09PT09PT09PT09PT09XG5cbnZhciBJTlZBTElEX0JBU0U2NF9SRSA9IC9bXitcXC8wLTlBLVphLXotX10vZ1xuXG5mdW5jdGlvbiBiYXNlNjRjbGVhbiAoc3RyKSB7XG4gIC8vIE5vZGUgc3RyaXBzIG91dCBpbnZhbGlkIGNoYXJhY3RlcnMgbGlrZSBcXG4gYW5kIFxcdCBmcm9tIHRoZSBzdHJpbmcsIGJhc2U2NC1qcyBkb2VzIG5vdFxuICBzdHIgPSBzdHJpbmd0cmltKHN0cikucmVwbGFjZShJTlZBTElEX0JBU0U2NF9SRSwgJycpXG4gIC8vIE5vZGUgY29udmVydHMgc3RyaW5ncyB3aXRoIGxlbmd0aCA8IDIgdG8gJydcbiAgaWYgKHN0ci5sZW5ndGggPCAyKSByZXR1cm4gJydcbiAgLy8gTm9kZSBhbGxvd3MgZm9yIG5vbi1wYWRkZWQgYmFzZTY0IHN0cmluZ3MgKG1pc3NpbmcgdHJhaWxpbmcgPT09KSwgYmFzZTY0LWpzIGRvZXMgbm90XG4gIHdoaWxlIChzdHIubGVuZ3RoICUgNCAhPT0gMCkge1xuICAgIHN0ciA9IHN0ciArICc9J1xuICB9XG4gIHJldHVybiBzdHJcbn1cblxuZnVuY3Rpb24gc3RyaW5ndHJpbSAoc3RyKSB7XG4gIGlmIChzdHIudHJpbSkgcmV0dXJuIHN0ci50cmltKClcbiAgcmV0dXJuIHN0ci5yZXBsYWNlKC9eXFxzK3xcXHMrJC9nLCAnJylcbn1cblxuZnVuY3Rpb24gdG9IZXggKG4pIHtcbiAgaWYgKG4gPCAxNikgcmV0dXJuICcwJyArIG4udG9TdHJpbmcoMTYpXG4gIHJldHVybiBuLnRvU3RyaW5nKDE2KVxufVxuXG5mdW5jdGlvbiB1dGY4VG9CeXRlcyAoc3RyaW5nLCB1bml0cykge1xuICB1bml0cyA9IHVuaXRzIHx8IEluZmluaXR5XG4gIHZhciBjb2RlUG9pbnRcbiAgdmFyIGxlbmd0aCA9IHN0cmluZy5sZW5ndGhcbiAgdmFyIGxlYWRTdXJyb2dhdGUgPSBudWxsXG4gIHZhciBieXRlcyA9IFtdXG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7ICsraSkge1xuICAgIGNvZGVQb2ludCA9IHN0cmluZy5jaGFyQ29kZUF0KGkpXG5cbiAgICAvLyBpcyBzdXJyb2dhdGUgY29tcG9uZW50XG4gICAgaWYgKGNvZGVQb2ludCA+IDB4RDdGRiAmJiBjb2RlUG9pbnQgPCAweEUwMDApIHtcbiAgICAgIC8vIGxhc3QgY2hhciB3YXMgYSBsZWFkXG4gICAgICBpZiAoIWxlYWRTdXJyb2dhdGUpIHtcbiAgICAgICAgLy8gbm8gbGVhZCB5ZXRcbiAgICAgICAgaWYgKGNvZGVQb2ludCA+IDB4REJGRikge1xuICAgICAgICAgIC8vIHVuZXhwZWN0ZWQgdHJhaWxcbiAgICAgICAgICBpZiAoKHVuaXRzIC09IDMpID4gLTEpIGJ5dGVzLnB1c2goMHhFRiwgMHhCRiwgMHhCRClcbiAgICAgICAgICBjb250aW51ZVxuICAgICAgICB9IGVsc2UgaWYgKGkgKyAxID09PSBsZW5ndGgpIHtcbiAgICAgICAgICAvLyB1bnBhaXJlZCBsZWFkXG4gICAgICAgICAgaWYgKCh1bml0cyAtPSAzKSA+IC0xKSBieXRlcy5wdXNoKDB4RUYsIDB4QkYsIDB4QkQpXG4gICAgICAgICAgY29udGludWVcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHZhbGlkIGxlYWRcbiAgICAgICAgbGVhZFN1cnJvZ2F0ZSA9IGNvZGVQb2ludFxuXG4gICAgICAgIGNvbnRpbnVlXG4gICAgICB9XG5cbiAgICAgIC8vIDIgbGVhZHMgaW4gYSByb3dcbiAgICAgIGlmIChjb2RlUG9pbnQgPCAweERDMDApIHtcbiAgICAgICAgaWYgKCh1bml0cyAtPSAzKSA+IC0xKSBieXRlcy5wdXNoKDB4RUYsIDB4QkYsIDB4QkQpXG4gICAgICAgIGxlYWRTdXJyb2dhdGUgPSBjb2RlUG9pbnRcbiAgICAgICAgY29udGludWVcbiAgICAgIH1cblxuICAgICAgLy8gdmFsaWQgc3Vycm9nYXRlIHBhaXJcbiAgICAgIGNvZGVQb2ludCA9IChsZWFkU3Vycm9nYXRlIC0gMHhEODAwIDw8IDEwIHwgY29kZVBvaW50IC0gMHhEQzAwKSArIDB4MTAwMDBcbiAgICB9IGVsc2UgaWYgKGxlYWRTdXJyb2dhdGUpIHtcbiAgICAgIC8vIHZhbGlkIGJtcCBjaGFyLCBidXQgbGFzdCBjaGFyIHdhcyBhIGxlYWRcbiAgICAgIGlmICgodW5pdHMgLT0gMykgPiAtMSkgYnl0ZXMucHVzaCgweEVGLCAweEJGLCAweEJEKVxuICAgIH1cblxuICAgIGxlYWRTdXJyb2dhdGUgPSBudWxsXG5cbiAgICAvLyBlbmNvZGUgdXRmOFxuICAgIGlmIChjb2RlUG9pbnQgPCAweDgwKSB7XG4gICAgICBpZiAoKHVuaXRzIC09IDEpIDwgMCkgYnJlYWtcbiAgICAgIGJ5dGVzLnB1c2goY29kZVBvaW50KVxuICAgIH0gZWxzZSBpZiAoY29kZVBvaW50IDwgMHg4MDApIHtcbiAgICAgIGlmICgodW5pdHMgLT0gMikgPCAwKSBicmVha1xuICAgICAgYnl0ZXMucHVzaChcbiAgICAgICAgY29kZVBvaW50ID4+IDB4NiB8IDB4QzAsXG4gICAgICAgIGNvZGVQb2ludCAmIDB4M0YgfCAweDgwXG4gICAgICApXG4gICAgfSBlbHNlIGlmIChjb2RlUG9pbnQgPCAweDEwMDAwKSB7XG4gICAgICBpZiAoKHVuaXRzIC09IDMpIDwgMCkgYnJlYWtcbiAgICAgIGJ5dGVzLnB1c2goXG4gICAgICAgIGNvZGVQb2ludCA+PiAweEMgfCAweEUwLFxuICAgICAgICBjb2RlUG9pbnQgPj4gMHg2ICYgMHgzRiB8IDB4ODAsXG4gICAgICAgIGNvZGVQb2ludCAmIDB4M0YgfCAweDgwXG4gICAgICApXG4gICAgfSBlbHNlIGlmIChjb2RlUG9pbnQgPCAweDExMDAwMCkge1xuICAgICAgaWYgKCh1bml0cyAtPSA0KSA8IDApIGJyZWFrXG4gICAgICBieXRlcy5wdXNoKFxuICAgICAgICBjb2RlUG9pbnQgPj4gMHgxMiB8IDB4RjAsXG4gICAgICAgIGNvZGVQb2ludCA+PiAweEMgJiAweDNGIHwgMHg4MCxcbiAgICAgICAgY29kZVBvaW50ID4+IDB4NiAmIDB4M0YgfCAweDgwLFxuICAgICAgICBjb2RlUG9pbnQgJiAweDNGIHwgMHg4MFxuICAgICAgKVxuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgY29kZSBwb2ludCcpXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGJ5dGVzXG59XG5cbmZ1bmN0aW9uIGFzY2lpVG9CeXRlcyAoc3RyKSB7XG4gIHZhciBieXRlQXJyYXkgPSBbXVxuICBmb3IgKHZhciBpID0gMDsgaSA8IHN0ci5sZW5ndGg7ICsraSkge1xuICAgIC8vIE5vZGUncyBjb2RlIHNlZW1zIHRvIGJlIGRvaW5nIHRoaXMgYW5kIG5vdCAmIDB4N0YuLlxuICAgIGJ5dGVBcnJheS5wdXNoKHN0ci5jaGFyQ29kZUF0KGkpICYgMHhGRilcbiAgfVxuICByZXR1cm4gYnl0ZUFycmF5XG59XG5cbmZ1bmN0aW9uIHV0ZjE2bGVUb0J5dGVzIChzdHIsIHVuaXRzKSB7XG4gIHZhciBjLCBoaSwgbG9cbiAgdmFyIGJ5dGVBcnJheSA9IFtdXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc3RyLmxlbmd0aDsgKytpKSB7XG4gICAgaWYgKCh1bml0cyAtPSAyKSA8IDApIGJyZWFrXG5cbiAgICBjID0gc3RyLmNoYXJDb2RlQXQoaSlcbiAgICBoaSA9IGMgPj4gOFxuICAgIGxvID0gYyAlIDI1NlxuICAgIGJ5dGVBcnJheS5wdXNoKGxvKVxuICAgIGJ5dGVBcnJheS5wdXNoKGhpKVxuICB9XG5cbiAgcmV0dXJuIGJ5dGVBcnJheVxufVxuXG5mdW5jdGlvbiBiYXNlNjRUb0J5dGVzIChzdHIpIHtcbiAgcmV0dXJuIGJhc2U2NC50b0J5dGVBcnJheShiYXNlNjRjbGVhbihzdHIpKVxufVxuXG5mdW5jdGlvbiBibGl0QnVmZmVyIChzcmMsIGRzdCwgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7ICsraSkge1xuICAgIGlmICgoaSArIG9mZnNldCA+PSBkc3QubGVuZ3RoKSB8fCAoaSA+PSBzcmMubGVuZ3RoKSkgYnJlYWtcbiAgICBkc3RbaSArIG9mZnNldF0gPSBzcmNbaV1cbiAgfVxuICByZXR1cm4gaVxufVxuXG5mdW5jdGlvbiBpc25hbiAodmFsKSB7XG4gIHJldHVybiB2YWwgIT09IHZhbCAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXNlbGYtY29tcGFyZVxufVxuIiwiLy8gQ29weXJpZ2h0IChjKSAuTkVUIEZvdW5kYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAuIFNlZSBMaWNlbnNlLnR4dCBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxyXG52YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IChmdW5jdGlvbiAoKSB7XHJcbiAgICB2YXIgZXh0ZW5kU3RhdGljcyA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fFxyXG4gICAgICAgICh7IF9fcHJvdG9fXzogW10gfSBpbnN0YW5jZW9mIEFycmF5ICYmIGZ1bmN0aW9uIChkLCBiKSB7IGQuX19wcm90b19fID0gYjsgfSkgfHxcclxuICAgICAgICBmdW5jdGlvbiAoZCwgYikgeyBmb3IgKHZhciBwIGluIGIpIGlmIChiLmhhc093blByb3BlcnR5KHApKSBkW3BdID0gYltwXTsgfTtcclxuICAgIHJldHVybiBmdW5jdGlvbiAoZCwgYikge1xyXG4gICAgICAgIGV4dGVuZFN0YXRpY3MoZCwgYik7XHJcbiAgICAgICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XHJcbiAgICAgICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xyXG4gICAgfTtcclxufSkoKTtcclxudmFyIF9fYXNzaWduID0gKHRoaXMgJiYgdGhpcy5fX2Fzc2lnbikgfHwgT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbih0KSB7XHJcbiAgICBmb3IgKHZhciBzLCBpID0gMSwgbiA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBuOyBpKyspIHtcclxuICAgICAgICBzID0gYXJndW1lbnRzW2ldO1xyXG4gICAgICAgIGZvciAodmFyIHAgaW4gcykgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzLCBwKSlcclxuICAgICAgICAgICAgdFtwXSA9IHNbcF07XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdDtcclxufTtcclxuaW1wb3J0IHsgQWJvcnRFcnJvciwgSHR0cEVycm9yLCBUaW1lb3V0RXJyb3IgfSBmcm9tIFwiLi9FcnJvcnNcIjtcclxuaW1wb3J0IHsgSHR0cENsaWVudCwgSHR0cFJlc3BvbnNlIH0gZnJvbSBcIi4vSHR0cENsaWVudFwiO1xyXG5pbXBvcnQgeyBMb2dMZXZlbCB9IGZyb20gXCIuL0lMb2dnZXJcIjtcclxuaW1wb3J0IHsgaXNBcnJheUJ1ZmZlciB9IGZyb20gXCIuL1V0aWxzXCI7XHJcbnZhciByZXF1ZXN0TW9kdWxlO1xyXG5pZiAodHlwZW9mIFhNTEh0dHBSZXF1ZXN0ID09PSBcInVuZGVmaW5lZFwiKSB7XHJcbiAgICAvLyBJbiBvcmRlciB0byBpZ25vcmUgdGhlIGR5bmFtaWMgcmVxdWlyZSBpbiB3ZWJwYWNrIGJ1aWxkcyB3ZSBuZWVkIHRvIGRvIHRoaXMgbWFnaWNcclxuICAgIC8vIEB0cy1pZ25vcmU6IFRTIGRvZXNuJ3Qga25vdyBhYm91dCB0aGVzZSBuYW1lc1xyXG4gICAgdmFyIHJlcXVpcmVGdW5jID0gdHlwZW9mIF9fd2VicGFja19yZXF1aXJlX18gPT09IFwiZnVuY3Rpb25cIiA/IF9fbm9uX3dlYnBhY2tfcmVxdWlyZV9fIDogcmVxdWlyZTtcclxuICAgIHJlcXVlc3RNb2R1bGUgPSByZXF1aXJlRnVuYyhcInJlcXVlc3RcIik7XHJcbn1cclxudmFyIE5vZGVIdHRwQ2xpZW50ID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xyXG4gICAgX19leHRlbmRzKE5vZGVIdHRwQ2xpZW50LCBfc3VwZXIpO1xyXG4gICAgZnVuY3Rpb24gTm9kZUh0dHBDbGllbnQobG9nZ2VyKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcykgfHwgdGhpcztcclxuICAgICAgICBpZiAodHlwZW9mIHJlcXVlc3RNb2R1bGUgPT09IFwidW5kZWZpbmVkXCIpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVGhlICdyZXF1ZXN0JyBtb2R1bGUgY291bGQgbm90IGJlIGxvYWRlZC5cIik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIF90aGlzLmxvZ2dlciA9IGxvZ2dlcjtcclxuICAgICAgICBfdGhpcy5jb29raWVKYXIgPSByZXF1ZXN0TW9kdWxlLmphcigpO1xyXG4gICAgICAgIF90aGlzLnJlcXVlc3QgPSByZXF1ZXN0TW9kdWxlLmRlZmF1bHRzKHsgamFyOiBfdGhpcy5jb29raWVKYXIgfSk7XHJcbiAgICAgICAgcmV0dXJuIF90aGlzO1xyXG4gICAgfVxyXG4gICAgTm9kZUh0dHBDbGllbnQucHJvdG90eXBlLnNlbmQgPSBmdW5jdGlvbiAoaHR0cFJlcXVlc3QpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XHJcbiAgICAgICAgICAgIHZhciByZXF1ZXN0Qm9keTtcclxuICAgICAgICAgICAgaWYgKGlzQXJyYXlCdWZmZXIoaHR0cFJlcXVlc3QuY29udGVudCkpIHtcclxuICAgICAgICAgICAgICAgIHJlcXVlc3RCb2R5ID0gQnVmZmVyLmZyb20oaHR0cFJlcXVlc3QuY29udGVudCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICByZXF1ZXN0Qm9keSA9IGh0dHBSZXF1ZXN0LmNvbnRlbnQgfHwgXCJcIjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB2YXIgY3VycmVudFJlcXVlc3QgPSBfdGhpcy5yZXF1ZXN0KGh0dHBSZXF1ZXN0LnVybCwge1xyXG4gICAgICAgICAgICAgICAgYm9keTogcmVxdWVzdEJvZHksXHJcbiAgICAgICAgICAgICAgICAvLyBJZiBiaW5hcnkgaXMgZXhwZWN0ZWQgJ251bGwnIHNob3VsZCBiZSB1c2VkLCBvdGhlcndpc2UgZm9yIHRleHQgJ3V0ZjgnXHJcbiAgICAgICAgICAgICAgICBlbmNvZGluZzogaHR0cFJlcXVlc3QucmVzcG9uc2VUeXBlID09PSBcImFycmF5YnVmZmVyXCIgPyBudWxsIDogXCJ1dGY4XCIsXHJcbiAgICAgICAgICAgICAgICBoZWFkZXJzOiBfX2Fzc2lnbih7IFxyXG4gICAgICAgICAgICAgICAgICAgIC8vIFRlbGwgYXV0aCBtaWRkbGV3YXJlIHRvIDQwMSBpbnN0ZWFkIG9mIHJlZGlyZWN0aW5nXHJcbiAgICAgICAgICAgICAgICAgICAgXCJYLVJlcXVlc3RlZC1XaXRoXCI6IFwiWE1MSHR0cFJlcXVlc3RcIiB9LCBodHRwUmVxdWVzdC5oZWFkZXJzKSxcclxuICAgICAgICAgICAgICAgIG1ldGhvZDogaHR0cFJlcXVlc3QubWV0aG9kLFxyXG4gICAgICAgICAgICAgICAgdGltZW91dDogaHR0cFJlcXVlc3QudGltZW91dCxcclxuICAgICAgICAgICAgfSwgZnVuY3Rpb24gKGVycm9yLCByZXNwb25zZSwgYm9keSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKGh0dHBSZXF1ZXN0LmFib3J0U2lnbmFsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaHR0cFJlcXVlc3QuYWJvcnRTaWduYWwub25hYm9ydCA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAoZXJyb3IpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoZXJyb3IuY29kZSA9PT0gXCJFVElNRURPVVRcIikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5sb2dnZXIubG9nKExvZ0xldmVsLldhcm5pbmcsIFwiVGltZW91dCBmcm9tIEhUVFAgcmVxdWVzdC5cIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlamVjdChuZXcgVGltZW91dEVycm9yKCkpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBfdGhpcy5sb2dnZXIubG9nKExvZ0xldmVsLldhcm5pbmcsIFwiRXJyb3IgZnJvbSBIVFRQIHJlcXVlc3QuIFwiICsgZXJyb3IpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJlamVjdChlcnJvcik7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKHJlc3BvbnNlLnN0YXR1c0NvZGUgPj0gMjAwICYmIHJlc3BvbnNlLnN0YXR1c0NvZGUgPCAzMDApIHtcclxuICAgICAgICAgICAgICAgICAgICByZXNvbHZlKG5ldyBIdHRwUmVzcG9uc2UocmVzcG9uc2Uuc3RhdHVzQ29kZSwgcmVzcG9uc2Uuc3RhdHVzTWVzc2FnZSB8fCBcIlwiLCBib2R5KSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICByZWplY3QobmV3IEh0dHBFcnJvcihyZXNwb25zZS5zdGF0dXNNZXNzYWdlIHx8IFwiXCIsIHJlc3BvbnNlLnN0YXR1c0NvZGUgfHwgMCkpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgaWYgKGh0dHBSZXF1ZXN0LmFib3J0U2lnbmFsKSB7XHJcbiAgICAgICAgICAgICAgICBodHRwUmVxdWVzdC5hYm9ydFNpZ25hbC5vbmFib3J0ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGN1cnJlbnRSZXF1ZXN0LmFib3J0KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmVqZWN0KG5ldyBBYm9ydEVycm9yKCkpO1xyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIE5vZGVIdHRwQ2xpZW50LnByb3RvdHlwZS5nZXRDb29raWVTdHJpbmcgPSBmdW5jdGlvbiAodXJsKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuY29va2llSmFyLmdldENvb2tpZVN0cmluZyh1cmwpO1xyXG4gICAgfTtcclxuICAgIHJldHVybiBOb2RlSHR0cENsaWVudDtcclxufShIdHRwQ2xpZW50KSk7XHJcbmV4cG9ydCB7IE5vZGVIdHRwQ2xpZW50IH07XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPU5vZGVIdHRwQ2xpZW50LmpzLm1hcCIsIi8vIENvcHlyaWdodCAoYykgLk5FVCBGb3VuZGF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wLiBTZWUgTGljZW5zZS50eHQgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cclxuaW1wb3J0IHsgVGV4dE1lc3NhZ2VGb3JtYXQgfSBmcm9tIFwiLi9UZXh0TWVzc2FnZUZvcm1hdFwiO1xyXG5pbXBvcnQgeyBpc0FycmF5QnVmZmVyIH0gZnJvbSBcIi4vVXRpbHNcIjtcclxuLyoqIEBwcml2YXRlICovXHJcbnZhciBIYW5kc2hha2VQcm90b2NvbCA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIEhhbmRzaGFrZVByb3RvY29sKCkge1xyXG4gICAgfVxyXG4gICAgLy8gSGFuZHNoYWtlIHJlcXVlc3QgaXMgYWx3YXlzIEpTT05cclxuICAgIEhhbmRzaGFrZVByb3RvY29sLnByb3RvdHlwZS53cml0ZUhhbmRzaGFrZVJlcXVlc3QgPSBmdW5jdGlvbiAoaGFuZHNoYWtlUmVxdWVzdCkge1xyXG4gICAgICAgIHJldHVybiBUZXh0TWVzc2FnZUZvcm1hdC53cml0ZShKU09OLnN0cmluZ2lmeShoYW5kc2hha2VSZXF1ZXN0KSk7XHJcbiAgICB9O1xyXG4gICAgSGFuZHNoYWtlUHJvdG9jb2wucHJvdG90eXBlLnBhcnNlSGFuZHNoYWtlUmVzcG9uc2UgPSBmdW5jdGlvbiAoZGF0YSkge1xyXG4gICAgICAgIHZhciByZXNwb25zZU1lc3NhZ2U7XHJcbiAgICAgICAgdmFyIG1lc3NhZ2VEYXRhO1xyXG4gICAgICAgIHZhciByZW1haW5pbmdEYXRhO1xyXG4gICAgICAgIGlmIChpc0FycmF5QnVmZmVyKGRhdGEpIHx8ICh0eXBlb2YgQnVmZmVyICE9PSBcInVuZGVmaW5lZFwiICYmIGRhdGEgaW5zdGFuY2VvZiBCdWZmZXIpKSB7XHJcbiAgICAgICAgICAgIC8vIEZvcm1hdCBpcyBiaW5hcnkgYnV0IHN0aWxsIG5lZWQgdG8gcmVhZCBKU09OIHRleHQgZnJvbSBoYW5kc2hha2UgcmVzcG9uc2VcclxuICAgICAgICAgICAgdmFyIGJpbmFyeURhdGEgPSBuZXcgVWludDhBcnJheShkYXRhKTtcclxuICAgICAgICAgICAgdmFyIHNlcGFyYXRvckluZGV4ID0gYmluYXJ5RGF0YS5pbmRleE9mKFRleHRNZXNzYWdlRm9ybWF0LlJlY29yZFNlcGFyYXRvckNvZGUpO1xyXG4gICAgICAgICAgICBpZiAoc2VwYXJhdG9ySW5kZXggPT09IC0xKSB7XHJcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJNZXNzYWdlIGlzIGluY29tcGxldGUuXCIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC8vIGNvbnRlbnQgYmVmb3JlIHNlcGFyYXRvciBpcyBoYW5kc2hha2UgcmVzcG9uc2VcclxuICAgICAgICAgICAgLy8gb3B0aW9uYWwgY29udGVudCBhZnRlciBpcyBhZGRpdGlvbmFsIG1lc3NhZ2VzXHJcbiAgICAgICAgICAgIHZhciByZXNwb25zZUxlbmd0aCA9IHNlcGFyYXRvckluZGV4ICsgMTtcclxuICAgICAgICAgICAgbWVzc2FnZURhdGEgPSBTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KG51bGwsIGJpbmFyeURhdGEuc2xpY2UoMCwgcmVzcG9uc2VMZW5ndGgpKTtcclxuICAgICAgICAgICAgcmVtYWluaW5nRGF0YSA9IChiaW5hcnlEYXRhLmJ5dGVMZW5ndGggPiByZXNwb25zZUxlbmd0aCkgPyBiaW5hcnlEYXRhLnNsaWNlKHJlc3BvbnNlTGVuZ3RoKS5idWZmZXIgOiBudWxsO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdmFyIHRleHREYXRhID0gZGF0YTtcclxuICAgICAgICAgICAgdmFyIHNlcGFyYXRvckluZGV4ID0gdGV4dERhdGEuaW5kZXhPZihUZXh0TWVzc2FnZUZvcm1hdC5SZWNvcmRTZXBhcmF0b3IpO1xyXG4gICAgICAgICAgICBpZiAoc2VwYXJhdG9ySW5kZXggPT09IC0xKSB7XHJcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJNZXNzYWdlIGlzIGluY29tcGxldGUuXCIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC8vIGNvbnRlbnQgYmVmb3JlIHNlcGFyYXRvciBpcyBoYW5kc2hha2UgcmVzcG9uc2VcclxuICAgICAgICAgICAgLy8gb3B0aW9uYWwgY29udGVudCBhZnRlciBpcyBhZGRpdGlvbmFsIG1lc3NhZ2VzXHJcbiAgICAgICAgICAgIHZhciByZXNwb25zZUxlbmd0aCA9IHNlcGFyYXRvckluZGV4ICsgMTtcclxuICAgICAgICAgICAgbWVzc2FnZURhdGEgPSB0ZXh0RGF0YS5zdWJzdHJpbmcoMCwgcmVzcG9uc2VMZW5ndGgpO1xyXG4gICAgICAgICAgICByZW1haW5pbmdEYXRhID0gKHRleHREYXRhLmxlbmd0aCA+IHJlc3BvbnNlTGVuZ3RoKSA/IHRleHREYXRhLnN1YnN0cmluZyhyZXNwb25zZUxlbmd0aCkgOiBudWxsO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBBdCB0aGlzIHBvaW50IHdlIHNob3VsZCBoYXZlIGp1c3QgdGhlIHNpbmdsZSBoYW5kc2hha2UgbWVzc2FnZVxyXG4gICAgICAgIHZhciBtZXNzYWdlcyA9IFRleHRNZXNzYWdlRm9ybWF0LnBhcnNlKG1lc3NhZ2VEYXRhKTtcclxuICAgICAgICB2YXIgcmVzcG9uc2UgPSBKU09OLnBhcnNlKG1lc3NhZ2VzWzBdKTtcclxuICAgICAgICBpZiAocmVzcG9uc2UudHlwZSkge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJFeHBlY3RlZCBhIGhhbmRzaGFrZSByZXNwb25zZSBmcm9tIHRoZSBzZXJ2ZXIuXCIpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXNwb25zZU1lc3NhZ2UgPSByZXNwb25zZTtcclxuICAgICAgICAvLyBtdWx0aXBsZSBtZXNzYWdlcyBjb3VsZCBoYXZlIGFycml2ZWQgd2l0aCBoYW5kc2hha2VcclxuICAgICAgICAvLyByZXR1cm4gYWRkaXRpb25hbCBkYXRhIHRvIGJlIHBhcnNlZCBhcyB1c3VhbCwgb3IgbnVsbCBpZiBhbGwgcGFyc2VkXHJcbiAgICAgICAgcmV0dXJuIFtyZW1haW5pbmdEYXRhLCByZXNwb25zZU1lc3NhZ2VdO1xyXG4gICAgfTtcclxuICAgIHJldHVybiBIYW5kc2hha2VQcm90b2NvbDtcclxufSgpKTtcclxuZXhwb3J0IHsgSGFuZHNoYWtlUHJvdG9jb2wgfTtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9SGFuZHNoYWtlUHJvdG9jb2wuanMubWFwIiwidmFyIGc7XG5cbi8vIFRoaXMgd29ya3MgaW4gbm9uLXN0cmljdCBtb2RlXG5nID0gKGZ1bmN0aW9uKCkge1xuXHRyZXR1cm4gdGhpcztcbn0pKCk7XG5cbnRyeSB7XG5cdC8vIFRoaXMgd29ya3MgaWYgZXZhbCBpcyBhbGxvd2VkIChzZWUgQ1NQKVxuXHRnID0gZyB8fCBuZXcgRnVuY3Rpb24oXCJyZXR1cm4gdGhpc1wiKSgpO1xufSBjYXRjaCAoZSkge1xuXHQvLyBUaGlzIHdvcmtzIGlmIHRoZSB3aW5kb3cgcmVmZXJlbmNlIGlzIGF2YWlsYWJsZVxuXHRpZiAodHlwZW9mIHdpbmRvdyA9PT0gXCJvYmplY3RcIikgZyA9IHdpbmRvdztcbn1cblxuLy8gZyBjYW4gc3RpbGwgYmUgdW5kZWZpbmVkLCBidXQgbm90aGluZyB0byBkbyBhYm91dCBpdC4uLlxuLy8gV2UgcmV0dXJuIHVuZGVmaW5lZCwgaW5zdGVhZCBvZiBub3RoaW5nIGhlcmUsIHNvIGl0J3Ncbi8vIGVhc2llciB0byBoYW5kbGUgdGhpcyBjYXNlLiBpZighZ2xvYmFsKSB7IC4uLn1cblxubW9kdWxlLmV4cG9ydHMgPSBnO1xuIiwiJ3VzZSBzdHJpY3QnXG5cbmV4cG9ydHMuYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGhcbmV4cG9ydHMudG9CeXRlQXJyYXkgPSB0b0J5dGVBcnJheVxuZXhwb3J0cy5mcm9tQnl0ZUFycmF5ID0gZnJvbUJ5dGVBcnJheVxuXG52YXIgbG9va3VwID0gW11cbnZhciByZXZMb29rdXAgPSBbXVxudmFyIEFyciA9IHR5cGVvZiBVaW50OEFycmF5ICE9PSAndW5kZWZpbmVkJyA/IFVpbnQ4QXJyYXkgOiBBcnJheVxuXG52YXIgY29kZSA9ICdBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWmFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6MDEyMzQ1Njc4OSsvJ1xuZm9yICh2YXIgaSA9IDAsIGxlbiA9IGNvZGUubGVuZ3RoOyBpIDwgbGVuOyArK2kpIHtcbiAgbG9va3VwW2ldID0gY29kZVtpXVxuICByZXZMb29rdXBbY29kZS5jaGFyQ29kZUF0KGkpXSA9IGlcbn1cblxuLy8gU3VwcG9ydCBkZWNvZGluZyBVUkwtc2FmZSBiYXNlNjQgc3RyaW5ncywgYXMgTm9kZS5qcyBkb2VzLlxuLy8gU2VlOiBodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9CYXNlNjQjVVJMX2FwcGxpY2F0aW9uc1xucmV2TG9va3VwWyctJy5jaGFyQ29kZUF0KDApXSA9IDYyXG5yZXZMb29rdXBbJ18nLmNoYXJDb2RlQXQoMCldID0gNjNcblxuZnVuY3Rpb24gZ2V0TGVucyAoYjY0KSB7XG4gIHZhciBsZW4gPSBiNjQubGVuZ3RoXG5cbiAgaWYgKGxlbiAlIDQgPiAwKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIHN0cmluZy4gTGVuZ3RoIG11c3QgYmUgYSBtdWx0aXBsZSBvZiA0JylcbiAgfVxuXG4gIC8vIFRyaW0gb2ZmIGV4dHJhIGJ5dGVzIGFmdGVyIHBsYWNlaG9sZGVyIGJ5dGVzIGFyZSBmb3VuZFxuICAvLyBTZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9iZWF0Z2FtbWl0L2Jhc2U2NC1qcy9pc3N1ZXMvNDJcbiAgdmFyIHZhbGlkTGVuID0gYjY0LmluZGV4T2YoJz0nKVxuICBpZiAodmFsaWRMZW4gPT09IC0xKSB2YWxpZExlbiA9IGxlblxuXG4gIHZhciBwbGFjZUhvbGRlcnNMZW4gPSB2YWxpZExlbiA9PT0gbGVuXG4gICAgPyAwXG4gICAgOiA0IC0gKHZhbGlkTGVuICUgNClcblxuICByZXR1cm4gW3ZhbGlkTGVuLCBwbGFjZUhvbGRlcnNMZW5dXG59XG5cbi8vIGJhc2U2NCBpcyA0LzMgKyB1cCB0byB0d28gY2hhcmFjdGVycyBvZiB0aGUgb3JpZ2luYWwgZGF0YVxuZnVuY3Rpb24gYnl0ZUxlbmd0aCAoYjY0KSB7XG4gIHZhciBsZW5zID0gZ2V0TGVucyhiNjQpXG4gIHZhciB2YWxpZExlbiA9IGxlbnNbMF1cbiAgdmFyIHBsYWNlSG9sZGVyc0xlbiA9IGxlbnNbMV1cbiAgcmV0dXJuICgodmFsaWRMZW4gKyBwbGFjZUhvbGRlcnNMZW4pICogMyAvIDQpIC0gcGxhY2VIb2xkZXJzTGVuXG59XG5cbmZ1bmN0aW9uIF9ieXRlTGVuZ3RoIChiNjQsIHZhbGlkTGVuLCBwbGFjZUhvbGRlcnNMZW4pIHtcbiAgcmV0dXJuICgodmFsaWRMZW4gKyBwbGFjZUhvbGRlcnNMZW4pICogMyAvIDQpIC0gcGxhY2VIb2xkZXJzTGVuXG59XG5cbmZ1bmN0aW9uIHRvQnl0ZUFycmF5IChiNjQpIHtcbiAgdmFyIHRtcFxuICB2YXIgbGVucyA9IGdldExlbnMoYjY0KVxuICB2YXIgdmFsaWRMZW4gPSBsZW5zWzBdXG4gIHZhciBwbGFjZUhvbGRlcnNMZW4gPSBsZW5zWzFdXG5cbiAgdmFyIGFyciA9IG5ldyBBcnIoX2J5dGVMZW5ndGgoYjY0LCB2YWxpZExlbiwgcGxhY2VIb2xkZXJzTGVuKSlcblxuICB2YXIgY3VyQnl0ZSA9IDBcblxuICAvLyBpZiB0aGVyZSBhcmUgcGxhY2Vob2xkZXJzLCBvbmx5IGdldCB1cCB0byB0aGUgbGFzdCBjb21wbGV0ZSA0IGNoYXJzXG4gIHZhciBsZW4gPSBwbGFjZUhvbGRlcnNMZW4gPiAwXG4gICAgPyB2YWxpZExlbiAtIDRcbiAgICA6IHZhbGlkTGVuXG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkgKz0gNCkge1xuICAgIHRtcCA9XG4gICAgICAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkpXSA8PCAxOCkgfFxuICAgICAgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpICsgMSldIDw8IDEyKSB8XG4gICAgICAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkgKyAyKV0gPDwgNikgfFxuICAgICAgcmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkgKyAzKV1cbiAgICBhcnJbY3VyQnl0ZSsrXSA9ICh0bXAgPj4gMTYpICYgMHhGRlxuICAgIGFycltjdXJCeXRlKytdID0gKHRtcCA+PiA4KSAmIDB4RkZcbiAgICBhcnJbY3VyQnl0ZSsrXSA9IHRtcCAmIDB4RkZcbiAgfVxuXG4gIGlmIChwbGFjZUhvbGRlcnNMZW4gPT09IDIpIHtcbiAgICB0bXAgPVxuICAgICAgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpKV0gPDwgMikgfFxuICAgICAgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpICsgMSldID4+IDQpXG4gICAgYXJyW2N1ckJ5dGUrK10gPSB0bXAgJiAweEZGXG4gIH1cblxuICBpZiAocGxhY2VIb2xkZXJzTGVuID09PSAxKSB7XG4gICAgdG1wID1cbiAgICAgIChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSldIDw8IDEwKSB8XG4gICAgICAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkgKyAxKV0gPDwgNCkgfFxuICAgICAgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpICsgMildID4+IDIpXG4gICAgYXJyW2N1ckJ5dGUrK10gPSAodG1wID4+IDgpICYgMHhGRlxuICAgIGFycltjdXJCeXRlKytdID0gdG1wICYgMHhGRlxuICB9XG5cbiAgcmV0dXJuIGFyclxufVxuXG5mdW5jdGlvbiB0cmlwbGV0VG9CYXNlNjQgKG51bSkge1xuICByZXR1cm4gbG9va3VwW251bSA+PiAxOCAmIDB4M0ZdICtcbiAgICBsb29rdXBbbnVtID4+IDEyICYgMHgzRl0gK1xuICAgIGxvb2t1cFtudW0gPj4gNiAmIDB4M0ZdICtcbiAgICBsb29rdXBbbnVtICYgMHgzRl1cbn1cblxuZnVuY3Rpb24gZW5jb2RlQ2h1bmsgKHVpbnQ4LCBzdGFydCwgZW5kKSB7XG4gIHZhciB0bXBcbiAgdmFyIG91dHB1dCA9IFtdXG4gIGZvciAodmFyIGkgPSBzdGFydDsgaSA8IGVuZDsgaSArPSAzKSB7XG4gICAgdG1wID1cbiAgICAgICgodWludDhbaV0gPDwgMTYpICYgMHhGRjAwMDApICtcbiAgICAgICgodWludDhbaSArIDFdIDw8IDgpICYgMHhGRjAwKSArXG4gICAgICAodWludDhbaSArIDJdICYgMHhGRilcbiAgICBvdXRwdXQucHVzaCh0cmlwbGV0VG9CYXNlNjQodG1wKSlcbiAgfVxuICByZXR1cm4gb3V0cHV0LmpvaW4oJycpXG59XG5cbmZ1bmN0aW9uIGZyb21CeXRlQXJyYXkgKHVpbnQ4KSB7XG4gIHZhciB0bXBcbiAgdmFyIGxlbiA9IHVpbnQ4Lmxlbmd0aFxuICB2YXIgZXh0cmFCeXRlcyA9IGxlbiAlIDMgLy8gaWYgd2UgaGF2ZSAxIGJ5dGUgbGVmdCwgcGFkIDIgYnl0ZXNcbiAgdmFyIHBhcnRzID0gW11cbiAgdmFyIG1heENodW5rTGVuZ3RoID0gMTYzODMgLy8gbXVzdCBiZSBtdWx0aXBsZSBvZiAzXG5cbiAgLy8gZ28gdGhyb3VnaCB0aGUgYXJyYXkgZXZlcnkgdGhyZWUgYnl0ZXMsIHdlJ2xsIGRlYWwgd2l0aCB0cmFpbGluZyBzdHVmZiBsYXRlclxuICBmb3IgKHZhciBpID0gMCwgbGVuMiA9IGxlbiAtIGV4dHJhQnl0ZXM7IGkgPCBsZW4yOyBpICs9IG1heENodW5rTGVuZ3RoKSB7XG4gICAgcGFydHMucHVzaChlbmNvZGVDaHVuayhcbiAgICAgIHVpbnQ4LCBpLCAoaSArIG1heENodW5rTGVuZ3RoKSA+IGxlbjIgPyBsZW4yIDogKGkgKyBtYXhDaHVua0xlbmd0aClcbiAgICApKVxuICB9XG5cbiAgLy8gcGFkIHRoZSBlbmQgd2l0aCB6ZXJvcywgYnV0IG1ha2Ugc3VyZSB0byBub3QgZm9yZ2V0IHRoZSBleHRyYSBieXRlc1xuICBpZiAoZXh0cmFCeXRlcyA9PT0gMSkge1xuICAgIHRtcCA9IHVpbnQ4W2xlbiAtIDFdXG4gICAgcGFydHMucHVzaChcbiAgICAgIGxvb2t1cFt0bXAgPj4gMl0gK1xuICAgICAgbG9va3VwWyh0bXAgPDwgNCkgJiAweDNGXSArXG4gICAgICAnPT0nXG4gICAgKVxuICB9IGVsc2UgaWYgKGV4dHJhQnl0ZXMgPT09IDIpIHtcbiAgICB0bXAgPSAodWludDhbbGVuIC0gMl0gPDwgOCkgKyB1aW50OFtsZW4gLSAxXVxuICAgIHBhcnRzLnB1c2goXG4gICAgICBsb29rdXBbdG1wID4+IDEwXSArXG4gICAgICBsb29rdXBbKHRtcCA+PiA0KSAmIDB4M0ZdICtcbiAgICAgIGxvb2t1cFsodG1wIDw8IDIpICYgMHgzRl0gK1xuICAgICAgJz0nXG4gICAgKVxuICB9XG5cbiAgcmV0dXJuIHBhcnRzLmpvaW4oJycpXG59XG4iLCJleHBvcnRzLnJlYWQgPSBmdW5jdGlvbiAoYnVmZmVyLCBvZmZzZXQsIGlzTEUsIG1MZW4sIG5CeXRlcykge1xuICB2YXIgZSwgbVxuICB2YXIgZUxlbiA9IChuQnl0ZXMgKiA4KSAtIG1MZW4gLSAxXG4gIHZhciBlTWF4ID0gKDEgPDwgZUxlbikgLSAxXG4gIHZhciBlQmlhcyA9IGVNYXggPj4gMVxuICB2YXIgbkJpdHMgPSAtN1xuICB2YXIgaSA9IGlzTEUgPyAobkJ5dGVzIC0gMSkgOiAwXG4gIHZhciBkID0gaXNMRSA/IC0xIDogMVxuICB2YXIgcyA9IGJ1ZmZlcltvZmZzZXQgKyBpXVxuXG4gIGkgKz0gZFxuXG4gIGUgPSBzICYgKCgxIDw8ICgtbkJpdHMpKSAtIDEpXG4gIHMgPj49ICgtbkJpdHMpXG4gIG5CaXRzICs9IGVMZW5cbiAgZm9yICg7IG5CaXRzID4gMDsgZSA9IChlICogMjU2KSArIGJ1ZmZlcltvZmZzZXQgKyBpXSwgaSArPSBkLCBuQml0cyAtPSA4KSB7fVxuXG4gIG0gPSBlICYgKCgxIDw8ICgtbkJpdHMpKSAtIDEpXG4gIGUgPj49ICgtbkJpdHMpXG4gIG5CaXRzICs9IG1MZW5cbiAgZm9yICg7IG5CaXRzID4gMDsgbSA9IChtICogMjU2KSArIGJ1ZmZlcltvZmZzZXQgKyBpXSwgaSArPSBkLCBuQml0cyAtPSA4KSB7fVxuXG4gIGlmIChlID09PSAwKSB7XG4gICAgZSA9IDEgLSBlQmlhc1xuICB9IGVsc2UgaWYgKGUgPT09IGVNYXgpIHtcbiAgICByZXR1cm4gbSA/IE5hTiA6ICgocyA/IC0xIDogMSkgKiBJbmZpbml0eSlcbiAgfSBlbHNlIHtcbiAgICBtID0gbSArIE1hdGgucG93KDIsIG1MZW4pXG4gICAgZSA9IGUgLSBlQmlhc1xuICB9XG4gIHJldHVybiAocyA/IC0xIDogMSkgKiBtICogTWF0aC5wb3coMiwgZSAtIG1MZW4pXG59XG5cbmV4cG9ydHMud3JpdGUgPSBmdW5jdGlvbiAoYnVmZmVyLCB2YWx1ZSwgb2Zmc2V0LCBpc0xFLCBtTGVuLCBuQnl0ZXMpIHtcbiAgdmFyIGUsIG0sIGNcbiAgdmFyIGVMZW4gPSAobkJ5dGVzICogOCkgLSBtTGVuIC0gMVxuICB2YXIgZU1heCA9ICgxIDw8IGVMZW4pIC0gMVxuICB2YXIgZUJpYXMgPSBlTWF4ID4+IDFcbiAgdmFyIHJ0ID0gKG1MZW4gPT09IDIzID8gTWF0aC5wb3coMiwgLTI0KSAtIE1hdGgucG93KDIsIC03NykgOiAwKVxuICB2YXIgaSA9IGlzTEUgPyAwIDogKG5CeXRlcyAtIDEpXG4gIHZhciBkID0gaXNMRSA/IDEgOiAtMVxuICB2YXIgcyA9IHZhbHVlIDwgMCB8fCAodmFsdWUgPT09IDAgJiYgMSAvIHZhbHVlIDwgMCkgPyAxIDogMFxuXG4gIHZhbHVlID0gTWF0aC5hYnModmFsdWUpXG5cbiAgaWYgKGlzTmFOKHZhbHVlKSB8fCB2YWx1ZSA9PT0gSW5maW5pdHkpIHtcbiAgICBtID0gaXNOYU4odmFsdWUpID8gMSA6IDBcbiAgICBlID0gZU1heFxuICB9IGVsc2Uge1xuICAgIGUgPSBNYXRoLmZsb29yKE1hdGgubG9nKHZhbHVlKSAvIE1hdGguTE4yKVxuICAgIGlmICh2YWx1ZSAqIChjID0gTWF0aC5wb3coMiwgLWUpKSA8IDEpIHtcbiAgICAgIGUtLVxuICAgICAgYyAqPSAyXG4gICAgfVxuICAgIGlmIChlICsgZUJpYXMgPj0gMSkge1xuICAgICAgdmFsdWUgKz0gcnQgLyBjXG4gICAgfSBlbHNlIHtcbiAgICAgIHZhbHVlICs9IHJ0ICogTWF0aC5wb3coMiwgMSAtIGVCaWFzKVxuICAgIH1cbiAgICBpZiAodmFsdWUgKiBjID49IDIpIHtcbiAgICAgIGUrK1xuICAgICAgYyAvPSAyXG4gICAgfVxuXG4gICAgaWYgKGUgKyBlQmlhcyA+PSBlTWF4KSB7XG4gICAgICBtID0gMFxuICAgICAgZSA9IGVNYXhcbiAgICB9IGVsc2UgaWYgKGUgKyBlQmlhcyA+PSAxKSB7XG4gICAgICBtID0gKCh2YWx1ZSAqIGMpIC0gMSkgKiBNYXRoLnBvdygyLCBtTGVuKVxuICAgICAgZSA9IGUgKyBlQmlhc1xuICAgIH0gZWxzZSB7XG4gICAgICBtID0gdmFsdWUgKiBNYXRoLnBvdygyLCBlQmlhcyAtIDEpICogTWF0aC5wb3coMiwgbUxlbilcbiAgICAgIGUgPSAwXG4gICAgfVxuICB9XG5cbiAgZm9yICg7IG1MZW4gPj0gODsgYnVmZmVyW29mZnNldCArIGldID0gbSAmIDB4ZmYsIGkgKz0gZCwgbSAvPSAyNTYsIG1MZW4gLT0gOCkge31cblxuICBlID0gKGUgPDwgbUxlbikgfCBtXG4gIGVMZW4gKz0gbUxlblxuICBmb3IgKDsgZUxlbiA+IDA7IGJ1ZmZlcltvZmZzZXQgKyBpXSA9IGUgJiAweGZmLCBpICs9IGQsIGUgLz0gMjU2LCBlTGVuIC09IDgpIHt9XG5cbiAgYnVmZmVyW29mZnNldCArIGkgLSBkXSB8PSBzICogMTI4XG59XG4iLCJ2YXIgdG9TdHJpbmcgPSB7fS50b1N0cmluZztcblxubW9kdWxlLmV4cG9ydHMgPSBBcnJheS5pc0FycmF5IHx8IGZ1bmN0aW9uIChhcnIpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwoYXJyKSA9PSAnW29iamVjdCBBcnJheV0nO1xufTtcbiIsIi8vIENvcHlyaWdodCAoYykgLk5FVCBGb3VuZGF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wLiBTZWUgTGljZW5zZS50eHQgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cclxudmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCAoZnVuY3Rpb24gKCkge1xyXG4gICAgdmFyIGV4dGVuZFN0YXRpY3MgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHxcclxuICAgICAgICAoeyBfX3Byb3RvX186IFtdIH0gaW5zdGFuY2VvZiBBcnJheSAmJiBmdW5jdGlvbiAoZCwgYikgeyBkLl9fcHJvdG9fXyA9IGI7IH0pIHx8XHJcbiAgICAgICAgZnVuY3Rpb24gKGQsIGIpIHsgZm9yICh2YXIgcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgZFtwXSA9IGJbcF07IH07XHJcbiAgICByZXR1cm4gZnVuY3Rpb24gKGQsIGIpIHtcclxuICAgICAgICBleHRlbmRTdGF0aWNzKGQsIGIpO1xyXG4gICAgICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxyXG4gICAgICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcclxuICAgIH07XHJcbn0pKCk7XHJcbmltcG9ydCB7IEFib3J0RXJyb3IsIEh0dHBFcnJvciwgVGltZW91dEVycm9yIH0gZnJvbSBcIi4vRXJyb3JzXCI7XHJcbmltcG9ydCB7IEh0dHBDbGllbnQsIEh0dHBSZXNwb25zZSB9IGZyb20gXCIuL0h0dHBDbGllbnRcIjtcclxuaW1wb3J0IHsgTG9nTGV2ZWwgfSBmcm9tIFwiLi9JTG9nZ2VyXCI7XHJcbnZhciBYaHJIdHRwQ2xpZW50ID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xyXG4gICAgX19leHRlbmRzKFhockh0dHBDbGllbnQsIF9zdXBlcik7XHJcbiAgICBmdW5jdGlvbiBYaHJIdHRwQ2xpZW50KGxvZ2dlcikge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMpIHx8IHRoaXM7XHJcbiAgICAgICAgX3RoaXMubG9nZ2VyID0gbG9nZ2VyO1xyXG4gICAgICAgIHJldHVybiBfdGhpcztcclxuICAgIH1cclxuICAgIC8qKiBAaW5oZXJpdERvYyAqL1xyXG4gICAgWGhySHR0cENsaWVudC5wcm90b3R5cGUuc2VuZCA9IGZ1bmN0aW9uIChyZXF1ZXN0KSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICAvLyBDaGVjayB0aGF0IGFib3J0IHdhcyBub3Qgc2lnbmFsZWQgYmVmb3JlIGNhbGxpbmcgc2VuZFxyXG4gICAgICAgIGlmIChyZXF1ZXN0LmFib3J0U2lnbmFsICYmIHJlcXVlc3QuYWJvcnRTaWduYWwuYWJvcnRlZCkge1xyXG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QobmV3IEFib3J0RXJyb3IoKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICghcmVxdWVzdC5tZXRob2QpIHtcclxuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KG5ldyBFcnJvcihcIk5vIG1ldGhvZCBkZWZpbmVkLlwiKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICghcmVxdWVzdC51cmwpIHtcclxuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KG5ldyBFcnJvcihcIk5vIHVybCBkZWZpbmVkLlwiKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XHJcbiAgICAgICAgICAgIHZhciB4aHIgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcclxuICAgICAgICAgICAgeGhyLm9wZW4ocmVxdWVzdC5tZXRob2QsIHJlcXVlc3QudXJsLCB0cnVlKTtcclxuICAgICAgICAgICAgeGhyLndpdGhDcmVkZW50aWFscyA9IHRydWU7XHJcbiAgICAgICAgICAgIHhoci5zZXRSZXF1ZXN0SGVhZGVyKFwiWC1SZXF1ZXN0ZWQtV2l0aFwiLCBcIlhNTEh0dHBSZXF1ZXN0XCIpO1xyXG4gICAgICAgICAgICAvLyBFeHBsaWNpdGx5IHNldHRpbmcgdGhlIENvbnRlbnQtVHlwZSBoZWFkZXIgZm9yIFJlYWN0IE5hdGl2ZSBvbiBBbmRyb2lkIHBsYXRmb3JtLlxyXG4gICAgICAgICAgICB4aHIuc2V0UmVxdWVzdEhlYWRlcihcIkNvbnRlbnQtVHlwZVwiLCBcInRleHQvcGxhaW47Y2hhcnNldD1VVEYtOFwiKTtcclxuICAgICAgICAgICAgdmFyIGhlYWRlcnMgPSByZXF1ZXN0LmhlYWRlcnM7XHJcbiAgICAgICAgICAgIGlmIChoZWFkZXJzKSB7XHJcbiAgICAgICAgICAgICAgICBPYmplY3Qua2V5cyhoZWFkZXJzKVxyXG4gICAgICAgICAgICAgICAgICAgIC5mb3JFYWNoKGZ1bmN0aW9uIChoZWFkZXIpIHtcclxuICAgICAgICAgICAgICAgICAgICB4aHIuc2V0UmVxdWVzdEhlYWRlcihoZWFkZXIsIGhlYWRlcnNbaGVhZGVyXSk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAocmVxdWVzdC5yZXNwb25zZVR5cGUpIHtcclxuICAgICAgICAgICAgICAgIHhoci5yZXNwb25zZVR5cGUgPSByZXF1ZXN0LnJlc3BvbnNlVHlwZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAocmVxdWVzdC5hYm9ydFNpZ25hbCkge1xyXG4gICAgICAgICAgICAgICAgcmVxdWVzdC5hYm9ydFNpZ25hbC5vbmFib3J0ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHhoci5hYm9ydCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJlamVjdChuZXcgQWJvcnRFcnJvcigpKTtcclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHJlcXVlc3QudGltZW91dCkge1xyXG4gICAgICAgICAgICAgICAgeGhyLnRpbWVvdXQgPSByZXF1ZXN0LnRpbWVvdXQ7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgeGhyLm9ubG9hZCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIGlmIChyZXF1ZXN0LmFib3J0U2lnbmFsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmVxdWVzdC5hYm9ydFNpZ25hbC5vbmFib3J0ID0gbnVsbDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmICh4aHIuc3RhdHVzID49IDIwMCAmJiB4aHIuc3RhdHVzIDwgMzAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShuZXcgSHR0cFJlc3BvbnNlKHhoci5zdGF0dXMsIHhoci5zdGF0dXNUZXh0LCB4aHIucmVzcG9uc2UgfHwgeGhyLnJlc3BvbnNlVGV4dCkpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmVqZWN0KG5ldyBIdHRwRXJyb3IoeGhyLnN0YXR1c1RleHQsIHhoci5zdGF0dXMpKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgeGhyLm9uZXJyb3IgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICBfdGhpcy5sb2dnZXIubG9nKExvZ0xldmVsLldhcm5pbmcsIFwiRXJyb3IgZnJvbSBIVFRQIHJlcXVlc3QuIFwiICsgeGhyLnN0YXR1cyArIFwiOiBcIiArIHhoci5zdGF0dXNUZXh0ICsgXCIuXCIpO1xyXG4gICAgICAgICAgICAgICAgcmVqZWN0KG5ldyBIdHRwRXJyb3IoeGhyLnN0YXR1c1RleHQsIHhoci5zdGF0dXMpKTtcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgeGhyLm9udGltZW91dCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIF90aGlzLmxvZ2dlci5sb2coTG9nTGV2ZWwuV2FybmluZywgXCJUaW1lb3V0IGZyb20gSFRUUCByZXF1ZXN0LlwiKTtcclxuICAgICAgICAgICAgICAgIHJlamVjdChuZXcgVGltZW91dEVycm9yKCkpO1xyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICB4aHIuc2VuZChyZXF1ZXN0LmNvbnRlbnQgfHwgXCJcIik7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIFhockh0dHBDbGllbnQ7XHJcbn0oSHR0cENsaWVudCkpO1xyXG5leHBvcnQgeyBYaHJIdHRwQ2xpZW50IH07XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVhockh0dHBDbGllbnQuanMubWFwIiwiLy8gQ29weXJpZ2h0IChjKSAuTkVUIEZvdW5kYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAuIFNlZSBMaWNlbnNlLnR4dCBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxyXG4vKiogRGVmaW5lcyB0aGUgdHlwZSBvZiBhIEh1YiBNZXNzYWdlLiAqL1xyXG5leHBvcnQgdmFyIE1lc3NhZ2VUeXBlO1xyXG4oZnVuY3Rpb24gKE1lc3NhZ2VUeXBlKSB7XHJcbiAgICAvKiogSW5kaWNhdGVzIHRoZSBtZXNzYWdlIGlzIGFuIEludm9jYXRpb24gbWVzc2FnZSBhbmQgaW1wbGVtZW50cyB0aGUge0BsaW5rIEBhc3BuZXQvc2lnbmFsci5JbnZvY2F0aW9uTWVzc2FnZX0gaW50ZXJmYWNlLiAqL1xyXG4gICAgTWVzc2FnZVR5cGVbTWVzc2FnZVR5cGVbXCJJbnZvY2F0aW9uXCJdID0gMV0gPSBcIkludm9jYXRpb25cIjtcclxuICAgIC8qKiBJbmRpY2F0ZXMgdGhlIG1lc3NhZ2UgaXMgYSBTdHJlYW1JdGVtIG1lc3NhZ2UgYW5kIGltcGxlbWVudHMgdGhlIHtAbGluayBAYXNwbmV0L3NpZ25hbHIuU3RyZWFtSXRlbU1lc3NhZ2V9IGludGVyZmFjZS4gKi9cclxuICAgIE1lc3NhZ2VUeXBlW01lc3NhZ2VUeXBlW1wiU3RyZWFtSXRlbVwiXSA9IDJdID0gXCJTdHJlYW1JdGVtXCI7XHJcbiAgICAvKiogSW5kaWNhdGVzIHRoZSBtZXNzYWdlIGlzIGEgQ29tcGxldGlvbiBtZXNzYWdlIGFuZCBpbXBsZW1lbnRzIHRoZSB7QGxpbmsgQGFzcG5ldC9zaWduYWxyLkNvbXBsZXRpb25NZXNzYWdlfSBpbnRlcmZhY2UuICovXHJcbiAgICBNZXNzYWdlVHlwZVtNZXNzYWdlVHlwZVtcIkNvbXBsZXRpb25cIl0gPSAzXSA9IFwiQ29tcGxldGlvblwiO1xyXG4gICAgLyoqIEluZGljYXRlcyB0aGUgbWVzc2FnZSBpcyBhIFN0cmVhbSBJbnZvY2F0aW9uIG1lc3NhZ2UgYW5kIGltcGxlbWVudHMgdGhlIHtAbGluayBAYXNwbmV0L3NpZ25hbHIuU3RyZWFtSW52b2NhdGlvbk1lc3NhZ2V9IGludGVyZmFjZS4gKi9cclxuICAgIE1lc3NhZ2VUeXBlW01lc3NhZ2VUeXBlW1wiU3RyZWFtSW52b2NhdGlvblwiXSA9IDRdID0gXCJTdHJlYW1JbnZvY2F0aW9uXCI7XHJcbiAgICAvKiogSW5kaWNhdGVzIHRoZSBtZXNzYWdlIGlzIGEgQ2FuY2VsIEludm9jYXRpb24gbWVzc2FnZSBhbmQgaW1wbGVtZW50cyB0aGUge0BsaW5rIEBhc3BuZXQvc2lnbmFsci5DYW5jZWxJbnZvY2F0aW9uTWVzc2FnZX0gaW50ZXJmYWNlLiAqL1xyXG4gICAgTWVzc2FnZVR5cGVbTWVzc2FnZVR5cGVbXCJDYW5jZWxJbnZvY2F0aW9uXCJdID0gNV0gPSBcIkNhbmNlbEludm9jYXRpb25cIjtcclxuICAgIC8qKiBJbmRpY2F0ZXMgdGhlIG1lc3NhZ2UgaXMgYSBQaW5nIG1lc3NhZ2UgYW5kIGltcGxlbWVudHMgdGhlIHtAbGluayBAYXNwbmV0L3NpZ25hbHIuUGluZ01lc3NhZ2V9IGludGVyZmFjZS4gKi9cclxuICAgIE1lc3NhZ2VUeXBlW01lc3NhZ2VUeXBlW1wiUGluZ1wiXSA9IDZdID0gXCJQaW5nXCI7XHJcbiAgICAvKiogSW5kaWNhdGVzIHRoZSBtZXNzYWdlIGlzIGEgQ2xvc2UgbWVzc2FnZSBhbmQgaW1wbGVtZW50cyB0aGUge0BsaW5rIEBhc3BuZXQvc2lnbmFsci5DbG9zZU1lc3NhZ2V9IGludGVyZmFjZS4gKi9cclxuICAgIE1lc3NhZ2VUeXBlW01lc3NhZ2VUeXBlW1wiQ2xvc2VcIl0gPSA3XSA9IFwiQ2xvc2VcIjtcclxufSkoTWVzc2FnZVR5cGUgfHwgKE1lc3NhZ2VUeXBlID0ge30pKTtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9SUh1YlByb3RvY29sLmpzLm1hcCIsIi8vIENvcHlyaWdodCAoYykgLk5FVCBGb3VuZGF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wLiBTZWUgTGljZW5zZS50eHQgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cclxudmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCAoZnVuY3Rpb24gKCkge1xyXG4gICAgdmFyIGV4dGVuZFN0YXRpY3MgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHxcclxuICAgICAgICAoeyBfX3Byb3RvX186IFtdIH0gaW5zdGFuY2VvZiBBcnJheSAmJiBmdW5jdGlvbiAoZCwgYikgeyBkLl9fcHJvdG9fXyA9IGI7IH0pIHx8XHJcbiAgICAgICAgZnVuY3Rpb24gKGQsIGIpIHsgZm9yICh2YXIgcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgZFtwXSA9IGJbcF07IH07XHJcbiAgICByZXR1cm4gZnVuY3Rpb24gKGQsIGIpIHtcclxuICAgICAgICBleHRlbmRTdGF0aWNzKGQsIGIpO1xyXG4gICAgICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxyXG4gICAgICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcclxuICAgIH07XHJcbn0pKCk7XHJcbmltcG9ydCB7IEFib3J0RXJyb3IgfSBmcm9tIFwiLi9FcnJvcnNcIjtcclxuaW1wb3J0IHsgSHR0cENsaWVudCB9IGZyb20gXCIuL0h0dHBDbGllbnRcIjtcclxuaW1wb3J0IHsgTm9kZUh0dHBDbGllbnQgfSBmcm9tIFwiLi9Ob2RlSHR0cENsaWVudFwiO1xyXG5pbXBvcnQgeyBYaHJIdHRwQ2xpZW50IH0gZnJvbSBcIi4vWGhySHR0cENsaWVudFwiO1xyXG4vKiogRGVmYXVsdCBpbXBsZW1lbnRhdGlvbiBvZiB7QGxpbmsgQGFzcG5ldC9zaWduYWxyLkh0dHBDbGllbnR9LiAqL1xyXG52YXIgRGVmYXVsdEh0dHBDbGllbnQgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XHJcbiAgICBfX2V4dGVuZHMoRGVmYXVsdEh0dHBDbGllbnQsIF9zdXBlcik7XHJcbiAgICAvKiogQ3JlYXRlcyBhIG5ldyBpbnN0YW5jZSBvZiB0aGUge0BsaW5rIEBhc3BuZXQvc2lnbmFsci5EZWZhdWx0SHR0cENsaWVudH0sIHVzaW5nIHRoZSBwcm92aWRlZCB7QGxpbmsgQGFzcG5ldC9zaWduYWxyLklMb2dnZXJ9IHRvIGxvZyBtZXNzYWdlcy4gKi9cclxuICAgIGZ1bmN0aW9uIERlZmF1bHRIdHRwQ2xpZW50KGxvZ2dlcikge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMpIHx8IHRoaXM7XHJcbiAgICAgICAgaWYgKHR5cGVvZiBYTUxIdHRwUmVxdWVzdCAhPT0gXCJ1bmRlZmluZWRcIikge1xyXG4gICAgICAgICAgICBfdGhpcy5odHRwQ2xpZW50ID0gbmV3IFhockh0dHBDbGllbnQobG9nZ2VyKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIF90aGlzLmh0dHBDbGllbnQgPSBuZXcgTm9kZUh0dHBDbGllbnQobG9nZ2VyKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIF90aGlzO1xyXG4gICAgfVxyXG4gICAgLyoqIEBpbmhlcml0RG9jICovXHJcbiAgICBEZWZhdWx0SHR0cENsaWVudC5wcm90b3R5cGUuc2VuZCA9IGZ1bmN0aW9uIChyZXF1ZXN0KSB7XHJcbiAgICAgICAgLy8gQ2hlY2sgdGhhdCBhYm9ydCB3YXMgbm90IHNpZ25hbGVkIGJlZm9yZSBjYWxsaW5nIHNlbmRcclxuICAgICAgICBpZiAocmVxdWVzdC5hYm9ydFNpZ25hbCAmJiByZXF1ZXN0LmFib3J0U2lnbmFsLmFib3J0ZWQpIHtcclxuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KG5ldyBBYm9ydEVycm9yKCkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoIXJlcXVlc3QubWV0aG9kKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChuZXcgRXJyb3IoXCJObyBtZXRob2QgZGVmaW5lZC5cIikpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoIXJlcXVlc3QudXJsKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChuZXcgRXJyb3IoXCJObyB1cmwgZGVmaW5lZC5cIikpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdGhpcy5odHRwQ2xpZW50LnNlbmQocmVxdWVzdCk7XHJcbiAgICB9O1xyXG4gICAgRGVmYXVsdEh0dHBDbGllbnQucHJvdG90eXBlLmdldENvb2tpZVN0cmluZyA9IGZ1bmN0aW9uICh1cmwpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5odHRwQ2xpZW50LmdldENvb2tpZVN0cmluZyh1cmwpO1xyXG4gICAgfTtcclxuICAgIHJldHVybiBEZWZhdWx0SHR0cENsaWVudDtcclxufShIdHRwQ2xpZW50KSk7XHJcbmV4cG9ydCB7IERlZmF1bHRIdHRwQ2xpZW50IH07XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPURlZmF1bHRIdHRwQ2xpZW50LmpzLm1hcCIsIi8vIENvcHlyaWdodCAoYykgLk5FVCBGb3VuZGF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wLiBTZWUgTGljZW5zZS50eHQgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cclxudmFyIF9fYXdhaXRlciA9ICh0aGlzICYmIHRoaXMuX19hd2FpdGVyKSB8fCBmdW5jdGlvbiAodGhpc0FyZywgX2FyZ3VtZW50cywgUCwgZ2VuZXJhdG9yKSB7XHJcbiAgICByZXR1cm4gbmV3IChQIHx8IChQID0gUHJvbWlzZSkpKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcclxuICAgICAgICBmdW5jdGlvbiBmdWxmaWxsZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3IubmV4dCh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XHJcbiAgICAgICAgZnVuY3Rpb24gcmVqZWN0ZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3JbXCJ0aHJvd1wiXSh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XHJcbiAgICAgICAgZnVuY3Rpb24gc3RlcChyZXN1bHQpIHsgcmVzdWx0LmRvbmUgPyByZXNvbHZlKHJlc3VsdC52YWx1ZSkgOiBuZXcgUChmdW5jdGlvbiAocmVzb2x2ZSkgeyByZXNvbHZlKHJlc3VsdC52YWx1ZSk7IH0pLnRoZW4oZnVsZmlsbGVkLCByZWplY3RlZCk7IH1cclxuICAgICAgICBzdGVwKChnZW5lcmF0b3IgPSBnZW5lcmF0b3IuYXBwbHkodGhpc0FyZywgX2FyZ3VtZW50cyB8fCBbXSkpLm5leHQoKSk7XHJcbiAgICB9KTtcclxufTtcclxudmFyIF9fZ2VuZXJhdG9yID0gKHRoaXMgJiYgdGhpcy5fX2dlbmVyYXRvcikgfHwgZnVuY3Rpb24gKHRoaXNBcmcsIGJvZHkpIHtcclxuICAgIHZhciBfID0geyBsYWJlbDogMCwgc2VudDogZnVuY3Rpb24oKSB7IGlmICh0WzBdICYgMSkgdGhyb3cgdFsxXTsgcmV0dXJuIHRbMV07IH0sIHRyeXM6IFtdLCBvcHM6IFtdIH0sIGYsIHksIHQsIGc7XHJcbiAgICByZXR1cm4gZyA9IHsgbmV4dDogdmVyYigwKSwgXCJ0aHJvd1wiOiB2ZXJiKDEpLCBcInJldHVyblwiOiB2ZXJiKDIpIH0sIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiAoZ1tTeW1ib2wuaXRlcmF0b3JdID0gZnVuY3Rpb24oKSB7IHJldHVybiB0aGlzOyB9KSwgZztcclxuICAgIGZ1bmN0aW9uIHZlcmIobikgeyByZXR1cm4gZnVuY3Rpb24gKHYpIHsgcmV0dXJuIHN0ZXAoW24sIHZdKTsgfTsgfVxyXG4gICAgZnVuY3Rpb24gc3RlcChvcCkge1xyXG4gICAgICAgIGlmIChmKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiR2VuZXJhdG9yIGlzIGFscmVhZHkgZXhlY3V0aW5nLlwiKTtcclxuICAgICAgICB3aGlsZSAoXykgdHJ5IHtcclxuICAgICAgICAgICAgaWYgKGYgPSAxLCB5ICYmICh0ID0gb3BbMF0gJiAyID8geVtcInJldHVyblwiXSA6IG9wWzBdID8geVtcInRocm93XCJdIHx8ICgodCA9IHlbXCJyZXR1cm5cIl0pICYmIHQuY2FsbCh5KSwgMCkgOiB5Lm5leHQpICYmICEodCA9IHQuY2FsbCh5LCBvcFsxXSkpLmRvbmUpIHJldHVybiB0O1xyXG4gICAgICAgICAgICBpZiAoeSA9IDAsIHQpIG9wID0gW29wWzBdICYgMiwgdC52YWx1ZV07XHJcbiAgICAgICAgICAgIHN3aXRjaCAob3BbMF0pIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgMDogY2FzZSAxOiB0ID0gb3A7IGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSA0OiBfLmxhYmVsKys7IHJldHVybiB7IHZhbHVlOiBvcFsxXSwgZG9uZTogZmFsc2UgfTtcclxuICAgICAgICAgICAgICAgIGNhc2UgNTogXy5sYWJlbCsrOyB5ID0gb3BbMV07IG9wID0gWzBdOyBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgIGNhc2UgNzogb3AgPSBfLm9wcy5wb3AoKTsgXy50cnlzLnBvcCgpOyBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCEodCA9IF8udHJ5cywgdCA9IHQubGVuZ3RoID4gMCAmJiB0W3QubGVuZ3RoIC0gMV0pICYmIChvcFswXSA9PT0gNiB8fCBvcFswXSA9PT0gMikpIHsgXyA9IDA7IGNvbnRpbnVlOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wWzBdID09PSAzICYmICghdCB8fCAob3BbMV0gPiB0WzBdICYmIG9wWzFdIDwgdFszXSkpKSB7IF8ubGFiZWwgPSBvcFsxXTsgYnJlYWs7IH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAob3BbMF0gPT09IDYgJiYgXy5sYWJlbCA8IHRbMV0pIHsgXy5sYWJlbCA9IHRbMV07IHQgPSBvcDsgYnJlYWs7IH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAodCAmJiBfLmxhYmVsIDwgdFsyXSkgeyBfLmxhYmVsID0gdFsyXTsgXy5vcHMucHVzaChvcCk7IGJyZWFrOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRbMl0pIF8ub3BzLnBvcCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIF8udHJ5cy5wb3AoKTsgY29udGludWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgb3AgPSBib2R5LmNhbGwodGhpc0FyZywgXyk7XHJcbiAgICAgICAgfSBjYXRjaCAoZSkgeyBvcCA9IFs2LCBlXTsgeSA9IDA7IH0gZmluYWxseSB7IGYgPSB0ID0gMDsgfVxyXG4gICAgICAgIGlmIChvcFswXSAmIDUpIHRocm93IG9wWzFdOyByZXR1cm4geyB2YWx1ZTogb3BbMF0gPyBvcFsxXSA6IHZvaWQgMCwgZG9uZTogdHJ1ZSB9O1xyXG4gICAgfVxyXG59O1xyXG5pbXBvcnQgeyBIYW5kc2hha2VQcm90b2NvbCB9IGZyb20gXCIuL0hhbmRzaGFrZVByb3RvY29sXCI7XHJcbmltcG9ydCB7IE1lc3NhZ2VUeXBlIH0gZnJvbSBcIi4vSUh1YlByb3RvY29sXCI7XHJcbmltcG9ydCB7IExvZ0xldmVsIH0gZnJvbSBcIi4vSUxvZ2dlclwiO1xyXG5pbXBvcnQgeyBBcmcsIFN1YmplY3QgfSBmcm9tIFwiLi9VdGlsc1wiO1xyXG52YXIgREVGQVVMVF9USU1FT1VUX0lOX01TID0gMzAgKiAxMDAwO1xyXG52YXIgREVGQVVMVF9QSU5HX0lOVEVSVkFMX0lOX01TID0gMTUgKiAxMDAwO1xyXG4vKiogRGVzY3JpYmVzIHRoZSBjdXJyZW50IHN0YXRlIG9mIHRoZSB7QGxpbmsgSHViQ29ubmVjdGlvbn0gdG8gdGhlIHNlcnZlci4gKi9cclxuZXhwb3J0IHZhciBIdWJDb25uZWN0aW9uU3RhdGU7XHJcbihmdW5jdGlvbiAoSHViQ29ubmVjdGlvblN0YXRlKSB7XHJcbiAgICAvKiogVGhlIGh1YiBjb25uZWN0aW9uIGlzIGRpc2Nvbm5lY3RlZC4gKi9cclxuICAgIEh1YkNvbm5lY3Rpb25TdGF0ZVtIdWJDb25uZWN0aW9uU3RhdGVbXCJEaXNjb25uZWN0ZWRcIl0gPSAwXSA9IFwiRGlzY29ubmVjdGVkXCI7XHJcbiAgICAvKiogVGhlIGh1YiBjb25uZWN0aW9uIGlzIGNvbm5lY3RlZC4gKi9cclxuICAgIEh1YkNvbm5lY3Rpb25TdGF0ZVtIdWJDb25uZWN0aW9uU3RhdGVbXCJDb25uZWN0ZWRcIl0gPSAxXSA9IFwiQ29ubmVjdGVkXCI7XHJcbn0pKEh1YkNvbm5lY3Rpb25TdGF0ZSB8fCAoSHViQ29ubmVjdGlvblN0YXRlID0ge30pKTtcclxuLyoqIFJlcHJlc2VudHMgYSBjb25uZWN0aW9uIHRvIGEgU2lnbmFsUiBIdWIuICovXHJcbnZhciBIdWJDb25uZWN0aW9uID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gSHViQ29ubmVjdGlvbihjb25uZWN0aW9uLCBsb2dnZXIsIHByb3RvY29sKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICBBcmcuaXNSZXF1aXJlZChjb25uZWN0aW9uLCBcImNvbm5lY3Rpb25cIik7XHJcbiAgICAgICAgQXJnLmlzUmVxdWlyZWQobG9nZ2VyLCBcImxvZ2dlclwiKTtcclxuICAgICAgICBBcmcuaXNSZXF1aXJlZChwcm90b2NvbCwgXCJwcm90b2NvbFwiKTtcclxuICAgICAgICB0aGlzLnNlcnZlclRpbWVvdXRJbk1pbGxpc2Vjb25kcyA9IERFRkFVTFRfVElNRU9VVF9JTl9NUztcclxuICAgICAgICB0aGlzLmtlZXBBbGl2ZUludGVydmFsSW5NaWxsaXNlY29uZHMgPSBERUZBVUxUX1BJTkdfSU5URVJWQUxfSU5fTVM7XHJcbiAgICAgICAgdGhpcy5sb2dnZXIgPSBsb2dnZXI7XHJcbiAgICAgICAgdGhpcy5wcm90b2NvbCA9IHByb3RvY29sO1xyXG4gICAgICAgIHRoaXMuY29ubmVjdGlvbiA9IGNvbm5lY3Rpb247XHJcbiAgICAgICAgdGhpcy5oYW5kc2hha2VQcm90b2NvbCA9IG5ldyBIYW5kc2hha2VQcm90b2NvbCgpO1xyXG4gICAgICAgIHRoaXMuY29ubmVjdGlvbi5vbnJlY2VpdmUgPSBmdW5jdGlvbiAoZGF0YSkgeyByZXR1cm4gX3RoaXMucHJvY2Vzc0luY29taW5nRGF0YShkYXRhKTsgfTtcclxuICAgICAgICB0aGlzLmNvbm5lY3Rpb24ub25jbG9zZSA9IGZ1bmN0aW9uIChlcnJvcikgeyByZXR1cm4gX3RoaXMuY29ubmVjdGlvbkNsb3NlZChlcnJvcik7IH07XHJcbiAgICAgICAgdGhpcy5jYWxsYmFja3MgPSB7fTtcclxuICAgICAgICB0aGlzLm1ldGhvZHMgPSB7fTtcclxuICAgICAgICB0aGlzLmNsb3NlZENhbGxiYWNrcyA9IFtdO1xyXG4gICAgICAgIHRoaXMuaWQgPSAwO1xyXG4gICAgICAgIHRoaXMucmVjZWl2ZWRIYW5kc2hha2VSZXNwb25zZSA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMuY29ubmVjdGlvblN0YXRlID0gSHViQ29ubmVjdGlvblN0YXRlLkRpc2Nvbm5lY3RlZDtcclxuICAgICAgICB0aGlzLmNhY2hlZFBpbmdNZXNzYWdlID0gdGhpcy5wcm90b2NvbC53cml0ZU1lc3NhZ2UoeyB0eXBlOiBNZXNzYWdlVHlwZS5QaW5nIH0pO1xyXG4gICAgfVxyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgLy8gVXNpbmcgYSBwdWJsaWMgc3RhdGljIGZhY3RvcnkgbWV0aG9kIG1lYW5zIHdlIGNhbiBoYXZlIGEgcHJpdmF0ZSBjb25zdHJ1Y3RvciBhbmQgYW4gX2ludGVybmFsX1xyXG4gICAgLy8gY3JlYXRlIG1ldGhvZCB0aGF0IGNhbiBiZSB1c2VkIGJ5IEh1YkNvbm5lY3Rpb25CdWlsZGVyLiBBbiBcImludGVybmFsXCIgY29uc3RydWN0b3Igd291bGQganVzdFxyXG4gICAgLy8gYmUgc3RyaXBwZWQgYXdheSBhbmQgdGhlICcuZC50cycgZmlsZSB3b3VsZCBoYXZlIG5vIGNvbnN0cnVjdG9yLCB3aGljaCBpcyBpbnRlcnByZXRlZCBhcyBhXHJcbiAgICAvLyBwdWJsaWMgcGFyYW1ldGVyLWxlc3MgY29uc3RydWN0b3IuXHJcbiAgICBIdWJDb25uZWN0aW9uLmNyZWF0ZSA9IGZ1bmN0aW9uIChjb25uZWN0aW9uLCBsb2dnZXIsIHByb3RvY29sKSB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBIdWJDb25uZWN0aW9uKGNvbm5lY3Rpb24sIGxvZ2dlciwgcHJvdG9jb2wpO1xyXG4gICAgfTtcclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShIdWJDb25uZWN0aW9uLnByb3RvdHlwZSwgXCJzdGF0ZVwiLCB7XHJcbiAgICAgICAgLyoqIEluZGljYXRlcyB0aGUgc3RhdGUgb2YgdGhlIHtAbGluayBIdWJDb25uZWN0aW9ufSB0byB0aGUgc2VydmVyLiAqL1xyXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5jb25uZWN0aW9uU3RhdGU7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgfSk7XHJcbiAgICAvKiogU3RhcnRzIHRoZSBjb25uZWN0aW9uLlxyXG4gICAgICpcclxuICAgICAqIEByZXR1cm5zIHtQcm9taXNlPHZvaWQ+fSBBIFByb21pc2UgdGhhdCByZXNvbHZlcyB3aGVuIHRoZSBjb25uZWN0aW9uIGhhcyBiZWVuIHN1Y2Nlc3NmdWxseSBlc3RhYmxpc2hlZCwgb3IgcmVqZWN0cyB3aXRoIGFuIGVycm9yLlxyXG4gICAgICovXHJcbiAgICBIdWJDb25uZWN0aW9uLnByb3RvdHlwZS5zdGFydCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHZhciBoYW5kc2hha2VSZXF1ZXN0LCBoYW5kc2hha2VQcm9taXNlO1xyXG4gICAgICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgICAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9hKSB7XHJcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKF9hLmxhYmVsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAwOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBoYW5kc2hha2VSZXF1ZXN0ID0ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvdG9jb2w6IHRoaXMucHJvdG9jb2wubmFtZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZlcnNpb246IHRoaXMucHJvdG9jb2wudmVyc2lvbixcclxuICAgICAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5sb2dnZXIubG9nKExvZ0xldmVsLkRlYnVnLCBcIlN0YXJ0aW5nIEh1YkNvbm5lY3Rpb24uXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnJlY2VpdmVkSGFuZHNoYWtlUmVzcG9uc2UgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaGFuZHNoYWtlUHJvbWlzZSA9IG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLmhhbmRzaGFrZVJlc29sdmVyID0gcmVzb2x2ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLmhhbmRzaGFrZVJlamVjdGVyID0gcmVqZWN0O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgdGhpcy5jb25uZWN0aW9uLnN0YXJ0KHRoaXMucHJvdG9jb2wudHJhbnNmZXJGb3JtYXQpXTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9hLnNlbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5sb2dnZXIubG9nKExvZ0xldmVsLkRlYnVnLCBcIlNlbmRpbmcgaGFuZHNoYWtlIHJlcXVlc3QuXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCB0aGlzLnNlbmRNZXNzYWdlKHRoaXMuaGFuZHNoYWtlUHJvdG9jb2wud3JpdGVIYW5kc2hha2VSZXF1ZXN0KGhhbmRzaGFrZVJlcXVlc3QpKV07XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAyOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBfYS5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubG9nZ2VyLmxvZyhMb2dMZXZlbC5JbmZvcm1hdGlvbiwgXCJVc2luZyBIdWJQcm90b2NvbCAnXCIgKyB0aGlzLnByb3RvY29sLm5hbWUgKyBcIicuXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBkZWZlbnNpdmVseSBjbGVhbnVwIHRpbWVvdXQgaW4gY2FzZSB3ZSByZWNlaXZlIGEgbWVzc2FnZSBmcm9tIHRoZSBzZXJ2ZXIgYmVmb3JlIHdlIGZpbmlzaCBzdGFydFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNsZWFudXBUaW1lb3V0KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucmVzZXRUaW1lb3V0UGVyaW9kKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucmVzZXRLZWVwQWxpdmVJbnRlcnZhbCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBXYWl0IGZvciB0aGUgaGFuZHNoYWtlIHRvIGNvbXBsZXRlIGJlZm9yZSBtYXJraW5nIGNvbm5lY3Rpb24gYXMgY29ubmVjdGVkXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIGhhbmRzaGFrZVByb21pc2VdO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMzpcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gV2FpdCBmb3IgdGhlIGhhbmRzaGFrZSB0byBjb21wbGV0ZSBiZWZvcmUgbWFya2luZyBjb25uZWN0aW9uIGFzIGNvbm5lY3RlZFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBfYS5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY29ubmVjdGlvblN0YXRlID0gSHViQ29ubmVjdGlvblN0YXRlLkNvbm5lY3RlZDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi9dO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICAvKiogU3RvcHMgdGhlIGNvbm5lY3Rpb24uXHJcbiAgICAgKlxyXG4gICAgICogQHJldHVybnMge1Byb21pc2U8dm9pZD59IEEgUHJvbWlzZSB0aGF0IHJlc29sdmVzIHdoZW4gdGhlIGNvbm5lY3Rpb24gaGFzIGJlZW4gc3VjY2Vzc2Z1bGx5IHRlcm1pbmF0ZWQsIG9yIHJlamVjdHMgd2l0aCBhbiBlcnJvci5cclxuICAgICAqL1xyXG4gICAgSHViQ29ubmVjdGlvbi5wcm90b3R5cGUuc3RvcCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB0aGlzLmxvZ2dlci5sb2coTG9nTGV2ZWwuRGVidWcsIFwiU3RvcHBpbmcgSHViQ29ubmVjdGlvbi5cIik7XHJcbiAgICAgICAgdGhpcy5jbGVhbnVwVGltZW91dCgpO1xyXG4gICAgICAgIHRoaXMuY2xlYW51cFBpbmdUaW1lcigpO1xyXG4gICAgICAgIHJldHVybiB0aGlzLmNvbm5lY3Rpb24uc3RvcCgpO1xyXG4gICAgfTtcclxuICAgIC8qKiBJbnZva2VzIGEgc3RyZWFtaW5nIGh1YiBtZXRob2Qgb24gdGhlIHNlcnZlciB1c2luZyB0aGUgc3BlY2lmaWVkIG5hbWUgYW5kIGFyZ3VtZW50cy5cclxuICAgICAqXHJcbiAgICAgKiBAdHlwZXBhcmFtIFQgVGhlIHR5cGUgb2YgdGhlIGl0ZW1zIHJldHVybmVkIGJ5IHRoZSBzZXJ2ZXIuXHJcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gbWV0aG9kTmFtZSBUaGUgbmFtZSBvZiB0aGUgc2VydmVyIG1ldGhvZCB0byBpbnZva2UuXHJcbiAgICAgKiBAcGFyYW0ge2FueVtdfSBhcmdzIFRoZSBhcmd1bWVudHMgdXNlZCB0byBpbnZva2UgdGhlIHNlcnZlciBtZXRob2QuXHJcbiAgICAgKiBAcmV0dXJucyB7SVN0cmVhbVJlc3VsdDxUPn0gQW4gb2JqZWN0IHRoYXQgeWllbGRzIHJlc3VsdHMgZnJvbSB0aGUgc2VydmVyIGFzIHRoZXkgYXJlIHJlY2VpdmVkLlxyXG4gICAgICovXHJcbiAgICBIdWJDb25uZWN0aW9uLnByb3RvdHlwZS5zdHJlYW0gPSBmdW5jdGlvbiAobWV0aG9kTmFtZSkge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgdmFyIGFyZ3MgPSBbXTtcclxuICAgICAgICBmb3IgKHZhciBfaSA9IDE7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xyXG4gICAgICAgICAgICBhcmdzW19pIC0gMV0gPSBhcmd1bWVudHNbX2ldO1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgaW52b2NhdGlvbkRlc2NyaXB0b3IgPSB0aGlzLmNyZWF0ZVN0cmVhbUludm9jYXRpb24obWV0aG9kTmFtZSwgYXJncyk7XHJcbiAgICAgICAgdmFyIHByb21pc2VRdWV1ZTtcclxuICAgICAgICB2YXIgc3ViamVjdCA9IG5ldyBTdWJqZWN0KCk7XHJcbiAgICAgICAgc3ViamVjdC5jYW5jZWxDYWxsYmFjayA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdmFyIGNhbmNlbEludm9jYXRpb24gPSBfdGhpcy5jcmVhdGVDYW5jZWxJbnZvY2F0aW9uKGludm9jYXRpb25EZXNjcmlwdG9yLmludm9jYXRpb25JZCk7XHJcbiAgICAgICAgICAgIHZhciBjYW5jZWxNZXNzYWdlID0gX3RoaXMucHJvdG9jb2wud3JpdGVNZXNzYWdlKGNhbmNlbEludm9jYXRpb24pO1xyXG4gICAgICAgICAgICBkZWxldGUgX3RoaXMuY2FsbGJhY2tzW2ludm9jYXRpb25EZXNjcmlwdG9yLmludm9jYXRpb25JZF07XHJcbiAgICAgICAgICAgIHJldHVybiBwcm9taXNlUXVldWUudGhlbihmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gX3RoaXMuc2VuZE1lc3NhZ2UoY2FuY2VsTWVzc2FnZSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgdGhpcy5jYWxsYmFja3NbaW52b2NhdGlvbkRlc2NyaXB0b3IuaW52b2NhdGlvbklkXSA9IGZ1bmN0aW9uIChpbnZvY2F0aW9uRXZlbnQsIGVycm9yKSB7XHJcbiAgICAgICAgICAgIGlmIChlcnJvcikge1xyXG4gICAgICAgICAgICAgICAgc3ViamVjdC5lcnJvcihlcnJvcik7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAoaW52b2NhdGlvbkV2ZW50KSB7XHJcbiAgICAgICAgICAgICAgICAvLyBpbnZvY2F0aW9uRXZlbnQgd2lsbCBub3QgYmUgbnVsbCB3aGVuIGFuIGVycm9yIGlzIG5vdCBwYXNzZWQgdG8gdGhlIGNhbGxiYWNrXHJcbiAgICAgICAgICAgICAgICBpZiAoaW52b2NhdGlvbkV2ZW50LnR5cGUgPT09IE1lc3NhZ2VUeXBlLkNvbXBsZXRpb24pIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoaW52b2NhdGlvbkV2ZW50LmVycm9yKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHN1YmplY3QuZXJyb3IobmV3IEVycm9yKGludm9jYXRpb25FdmVudC5lcnJvcikpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc3ViamVjdC5jb21wbGV0ZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHN1YmplY3QubmV4dCgoaW52b2NhdGlvbkV2ZW50Lml0ZW0pKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgdmFyIG1lc3NhZ2UgPSB0aGlzLnByb3RvY29sLndyaXRlTWVzc2FnZShpbnZvY2F0aW9uRGVzY3JpcHRvcik7XHJcbiAgICAgICAgcHJvbWlzZVF1ZXVlID0gdGhpcy5zZW5kTWVzc2FnZShtZXNzYWdlKVxyXG4gICAgICAgICAgICAuY2F0Y2goZnVuY3Rpb24gKGUpIHtcclxuICAgICAgICAgICAgc3ViamVjdC5lcnJvcihlKTtcclxuICAgICAgICAgICAgZGVsZXRlIF90aGlzLmNhbGxiYWNrc1tpbnZvY2F0aW9uRGVzY3JpcHRvci5pbnZvY2F0aW9uSWRdO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHJldHVybiBzdWJqZWN0O1xyXG4gICAgfTtcclxuICAgIEh1YkNvbm5lY3Rpb24ucHJvdG90eXBlLnNlbmRNZXNzYWdlID0gZnVuY3Rpb24gKG1lc3NhZ2UpIHtcclxuICAgICAgICB0aGlzLnJlc2V0S2VlcEFsaXZlSW50ZXJ2YWwoKTtcclxuICAgICAgICByZXR1cm4gdGhpcy5jb25uZWN0aW9uLnNlbmQobWVzc2FnZSk7XHJcbiAgICB9O1xyXG4gICAgLyoqIEludm9rZXMgYSBodWIgbWV0aG9kIG9uIHRoZSBzZXJ2ZXIgdXNpbmcgdGhlIHNwZWNpZmllZCBuYW1lIGFuZCBhcmd1bWVudHMuIERvZXMgbm90IHdhaXQgZm9yIGEgcmVzcG9uc2UgZnJvbSB0aGUgcmVjZWl2ZXIuXHJcbiAgICAgKlxyXG4gICAgICogVGhlIFByb21pc2UgcmV0dXJuZWQgYnkgdGhpcyBtZXRob2QgcmVzb2x2ZXMgd2hlbiB0aGUgY2xpZW50IGhhcyBzZW50IHRoZSBpbnZvY2F0aW9uIHRvIHRoZSBzZXJ2ZXIuIFRoZSBzZXJ2ZXIgbWF5IHN0aWxsXHJcbiAgICAgKiBiZSBwcm9jZXNzaW5nIHRoZSBpbnZvY2F0aW9uLlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBtZXRob2ROYW1lIFRoZSBuYW1lIG9mIHRoZSBzZXJ2ZXIgbWV0aG9kIHRvIGludm9rZS5cclxuICAgICAqIEBwYXJhbSB7YW55W119IGFyZ3MgVGhlIGFyZ3VtZW50cyB1c2VkIHRvIGludm9rZSB0aGUgc2VydmVyIG1ldGhvZC5cclxuICAgICAqIEByZXR1cm5zIHtQcm9taXNlPHZvaWQ+fSBBIFByb21pc2UgdGhhdCByZXNvbHZlcyB3aGVuIHRoZSBpbnZvY2F0aW9uIGhhcyBiZWVuIHN1Y2Nlc3NmdWxseSBzZW50LCBvciByZWplY3RzIHdpdGggYW4gZXJyb3IuXHJcbiAgICAgKi9cclxuICAgIEh1YkNvbm5lY3Rpb24ucHJvdG90eXBlLnNlbmQgPSBmdW5jdGlvbiAobWV0aG9kTmFtZSkge1xyXG4gICAgICAgIHZhciBhcmdzID0gW107XHJcbiAgICAgICAgZm9yICh2YXIgX2kgPSAxOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcclxuICAgICAgICAgICAgYXJnc1tfaSAtIDFdID0gYXJndW1lbnRzW19pXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIGludm9jYXRpb25EZXNjcmlwdG9yID0gdGhpcy5jcmVhdGVJbnZvY2F0aW9uKG1ldGhvZE5hbWUsIGFyZ3MsIHRydWUpO1xyXG4gICAgICAgIHZhciBtZXNzYWdlID0gdGhpcy5wcm90b2NvbC53cml0ZU1lc3NhZ2UoaW52b2NhdGlvbkRlc2NyaXB0b3IpO1xyXG4gICAgICAgIHJldHVybiB0aGlzLnNlbmRNZXNzYWdlKG1lc3NhZ2UpO1xyXG4gICAgfTtcclxuICAgIC8qKiBJbnZva2VzIGEgaHViIG1ldGhvZCBvbiB0aGUgc2VydmVyIHVzaW5nIHRoZSBzcGVjaWZpZWQgbmFtZSBhbmQgYXJndW1lbnRzLlxyXG4gICAgICpcclxuICAgICAqIFRoZSBQcm9taXNlIHJldHVybmVkIGJ5IHRoaXMgbWV0aG9kIHJlc29sdmVzIHdoZW4gdGhlIHNlcnZlciBpbmRpY2F0ZXMgaXQgaGFzIGZpbmlzaGVkIGludm9raW5nIHRoZSBtZXRob2QuIFdoZW4gdGhlIHByb21pc2VcclxuICAgICAqIHJlc29sdmVzLCB0aGUgc2VydmVyIGhhcyBmaW5pc2hlZCBpbnZva2luZyB0aGUgbWV0aG9kLiBJZiB0aGUgc2VydmVyIG1ldGhvZCByZXR1cm5zIGEgcmVzdWx0LCBpdCBpcyBwcm9kdWNlZCBhcyB0aGUgcmVzdWx0IG9mXHJcbiAgICAgKiByZXNvbHZpbmcgdGhlIFByb21pc2UuXHJcbiAgICAgKlxyXG4gICAgICogQHR5cGVwYXJhbSBUIFRoZSBleHBlY3RlZCByZXR1cm4gdHlwZS5cclxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBtZXRob2ROYW1lIFRoZSBuYW1lIG9mIHRoZSBzZXJ2ZXIgbWV0aG9kIHRvIGludm9rZS5cclxuICAgICAqIEBwYXJhbSB7YW55W119IGFyZ3MgVGhlIGFyZ3VtZW50cyB1c2VkIHRvIGludm9rZSB0aGUgc2VydmVyIG1ldGhvZC5cclxuICAgICAqIEByZXR1cm5zIHtQcm9taXNlPFQ+fSBBIFByb21pc2UgdGhhdCByZXNvbHZlcyB3aXRoIHRoZSByZXN1bHQgb2YgdGhlIHNlcnZlciBtZXRob2QgKGlmIGFueSksIG9yIHJlamVjdHMgd2l0aCBhbiBlcnJvci5cclxuICAgICAqL1xyXG4gICAgSHViQ29ubmVjdGlvbi5wcm90b3R5cGUuaW52b2tlID0gZnVuY3Rpb24gKG1ldGhvZE5hbWUpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIHZhciBhcmdzID0gW107XHJcbiAgICAgICAgZm9yICh2YXIgX2kgPSAxOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcclxuICAgICAgICAgICAgYXJnc1tfaSAtIDFdID0gYXJndW1lbnRzW19pXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIGludm9jYXRpb25EZXNjcmlwdG9yID0gdGhpcy5jcmVhdGVJbnZvY2F0aW9uKG1ldGhvZE5hbWUsIGFyZ3MsIGZhbHNlKTtcclxuICAgICAgICB2YXIgcCA9IG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcclxuICAgICAgICAgICAgLy8gaW52b2NhdGlvbklkIHdpbGwgYWx3YXlzIGhhdmUgYSB2YWx1ZSBmb3IgYSBub24tYmxvY2tpbmcgaW52b2NhdGlvblxyXG4gICAgICAgICAgICBfdGhpcy5jYWxsYmFja3NbaW52b2NhdGlvbkRlc2NyaXB0b3IuaW52b2NhdGlvbklkXSA9IGZ1bmN0aW9uIChpbnZvY2F0aW9uRXZlbnQsIGVycm9yKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoZXJyb3IpIHtcclxuICAgICAgICAgICAgICAgICAgICByZWplY3QoZXJyb3IpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKGludm9jYXRpb25FdmVudCkge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIGludm9jYXRpb25FdmVudCB3aWxsIG5vdCBiZSBudWxsIHdoZW4gYW4gZXJyb3IgaXMgbm90IHBhc3NlZCB0byB0aGUgY2FsbGJhY2tcclxuICAgICAgICAgICAgICAgICAgICBpZiAoaW52b2NhdGlvbkV2ZW50LnR5cGUgPT09IE1lc3NhZ2VUeXBlLkNvbXBsZXRpb24pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGludm9jYXRpb25FdmVudC5lcnJvcikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVqZWN0KG5ldyBFcnJvcihpbnZvY2F0aW9uRXZlbnQuZXJyb3IpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUoaW52b2NhdGlvbkV2ZW50LnJlc3VsdCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlamVjdChuZXcgRXJyb3IoXCJVbmV4cGVjdGVkIG1lc3NhZ2UgdHlwZTogXCIgKyBpbnZvY2F0aW9uRXZlbnQudHlwZSkpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgdmFyIG1lc3NhZ2UgPSBfdGhpcy5wcm90b2NvbC53cml0ZU1lc3NhZ2UoaW52b2NhdGlvbkRlc2NyaXB0b3IpO1xyXG4gICAgICAgICAgICBfdGhpcy5zZW5kTWVzc2FnZShtZXNzYWdlKVxyXG4gICAgICAgICAgICAgICAgLmNhdGNoKGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgICAgICAgICAgICByZWplY3QoZSk7XHJcbiAgICAgICAgICAgICAgICAvLyBpbnZvY2F0aW9uSWQgd2lsbCBhbHdheXMgaGF2ZSBhIHZhbHVlIGZvciBhIG5vbi1ibG9ja2luZyBpbnZvY2F0aW9uXHJcbiAgICAgICAgICAgICAgICBkZWxldGUgX3RoaXMuY2FsbGJhY2tzW2ludm9jYXRpb25EZXNjcmlwdG9yLmludm9jYXRpb25JZF07XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHJldHVybiBwO1xyXG4gICAgfTtcclxuICAgIC8qKiBSZWdpc3RlcnMgYSBoYW5kbGVyIHRoYXQgd2lsbCBiZSBpbnZva2VkIHdoZW4gdGhlIGh1YiBtZXRob2Qgd2l0aCB0aGUgc3BlY2lmaWVkIG1ldGhvZCBuYW1lIGlzIGludm9rZWQuXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IG1ldGhvZE5hbWUgVGhlIG5hbWUgb2YgdGhlIGh1YiBtZXRob2QgdG8gZGVmaW5lLlxyXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gbmV3TWV0aG9kIFRoZSBoYW5kbGVyIHRoYXQgd2lsbCBiZSByYWlzZWQgd2hlbiB0aGUgaHViIG1ldGhvZCBpcyBpbnZva2VkLlxyXG4gICAgICovXHJcbiAgICBIdWJDb25uZWN0aW9uLnByb3RvdHlwZS5vbiA9IGZ1bmN0aW9uIChtZXRob2ROYW1lLCBuZXdNZXRob2QpIHtcclxuICAgICAgICBpZiAoIW1ldGhvZE5hbWUgfHwgIW5ld01ldGhvZCkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIG1ldGhvZE5hbWUgPSBtZXRob2ROYW1lLnRvTG93ZXJDYXNlKCk7XHJcbiAgICAgICAgaWYgKCF0aGlzLm1ldGhvZHNbbWV0aG9kTmFtZV0pIHtcclxuICAgICAgICAgICAgdGhpcy5tZXRob2RzW21ldGhvZE5hbWVdID0gW107XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIFByZXZlbnRpbmcgYWRkaW5nIHRoZSBzYW1lIGhhbmRsZXIgbXVsdGlwbGUgdGltZXMuXHJcbiAgICAgICAgaWYgKHRoaXMubWV0aG9kc1ttZXRob2ROYW1lXS5pbmRleE9mKG5ld01ldGhvZCkgIT09IC0xKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5tZXRob2RzW21ldGhvZE5hbWVdLnB1c2gobmV3TWV0aG9kKTtcclxuICAgIH07XHJcbiAgICBIdWJDb25uZWN0aW9uLnByb3RvdHlwZS5vZmYgPSBmdW5jdGlvbiAobWV0aG9kTmFtZSwgbWV0aG9kKSB7XHJcbiAgICAgICAgaWYgKCFtZXRob2ROYW1lKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgbWV0aG9kTmFtZSA9IG1ldGhvZE5hbWUudG9Mb3dlckNhc2UoKTtcclxuICAgICAgICB2YXIgaGFuZGxlcnMgPSB0aGlzLm1ldGhvZHNbbWV0aG9kTmFtZV07XHJcbiAgICAgICAgaWYgKCFoYW5kbGVycykge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChtZXRob2QpIHtcclxuICAgICAgICAgICAgdmFyIHJlbW92ZUlkeCA9IGhhbmRsZXJzLmluZGV4T2YobWV0aG9kKTtcclxuICAgICAgICAgICAgaWYgKHJlbW92ZUlkeCAhPT0gLTEpIHtcclxuICAgICAgICAgICAgICAgIGhhbmRsZXJzLnNwbGljZShyZW1vdmVJZHgsIDEpO1xyXG4gICAgICAgICAgICAgICAgaWYgKGhhbmRsZXJzLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGRlbGV0ZSB0aGlzLm1ldGhvZHNbbWV0aG9kTmFtZV07XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIGRlbGV0ZSB0aGlzLm1ldGhvZHNbbWV0aG9kTmFtZV07XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIC8qKiBSZWdpc3RlcnMgYSBoYW5kbGVyIHRoYXQgd2lsbCBiZSBpbnZva2VkIHdoZW4gdGhlIGNvbm5lY3Rpb24gaXMgY2xvc2VkLlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrIFRoZSBoYW5kbGVyIHRoYXQgd2lsbCBiZSBpbnZva2VkIHdoZW4gdGhlIGNvbm5lY3Rpb24gaXMgY2xvc2VkLiBPcHRpb25hbGx5IHJlY2VpdmVzIGEgc2luZ2xlIGFyZ3VtZW50IGNvbnRhaW5pbmcgdGhlIGVycm9yIHRoYXQgY2F1c2VkIHRoZSBjb25uZWN0aW9uIHRvIGNsb3NlIChpZiBhbnkpLlxyXG4gICAgICovXHJcbiAgICBIdWJDb25uZWN0aW9uLnByb3RvdHlwZS5vbmNsb3NlID0gZnVuY3Rpb24gKGNhbGxiYWNrKSB7XHJcbiAgICAgICAgaWYgKGNhbGxiYWNrKSB7XHJcbiAgICAgICAgICAgIHRoaXMuY2xvc2VkQ2FsbGJhY2tzLnB1c2goY2FsbGJhY2spO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBIdWJDb25uZWN0aW9uLnByb3RvdHlwZS5wcm9jZXNzSW5jb21pbmdEYXRhID0gZnVuY3Rpb24gKGRhdGEpIHtcclxuICAgICAgICB0aGlzLmNsZWFudXBUaW1lb3V0KCk7XHJcbiAgICAgICAgaWYgKCF0aGlzLnJlY2VpdmVkSGFuZHNoYWtlUmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgZGF0YSA9IHRoaXMucHJvY2Vzc0hhbmRzaGFrZVJlc3BvbnNlKGRhdGEpO1xyXG4gICAgICAgICAgICB0aGlzLnJlY2VpdmVkSGFuZHNoYWtlUmVzcG9uc2UgPSB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBEYXRhIG1heSBoYXZlIGFsbCBiZWVuIHJlYWQgd2hlbiBwcm9jZXNzaW5nIGhhbmRzaGFrZSByZXNwb25zZVxyXG4gICAgICAgIGlmIChkYXRhKSB7XHJcbiAgICAgICAgICAgIC8vIFBhcnNlIHRoZSBtZXNzYWdlc1xyXG4gICAgICAgICAgICB2YXIgbWVzc2FnZXMgPSB0aGlzLnByb3RvY29sLnBhcnNlTWVzc2FnZXMoZGF0YSwgdGhpcy5sb2dnZXIpO1xyXG4gICAgICAgICAgICBmb3IgKHZhciBfaSA9IDAsIG1lc3NhZ2VzXzEgPSBtZXNzYWdlczsgX2kgPCBtZXNzYWdlc18xLmxlbmd0aDsgX2krKykge1xyXG4gICAgICAgICAgICAgICAgdmFyIG1lc3NhZ2UgPSBtZXNzYWdlc18xW19pXTtcclxuICAgICAgICAgICAgICAgIHN3aXRjaCAobWVzc2FnZS50eXBlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBNZXNzYWdlVHlwZS5JbnZvY2F0aW9uOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmludm9rZUNsaWVudE1ldGhvZChtZXNzYWdlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBNZXNzYWdlVHlwZS5TdHJlYW1JdGVtOlxyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgTWVzc2FnZVR5cGUuQ29tcGxldGlvbjpcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGNhbGxiYWNrID0gdGhpcy5jYWxsYmFja3NbbWVzc2FnZS5pbnZvY2F0aW9uSWRdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY2FsbGJhY2sgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG1lc3NhZ2UudHlwZSA9PT0gTWVzc2FnZVR5cGUuQ29tcGxldGlvbikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlbGV0ZSB0aGlzLmNhbGxiYWNrc1ttZXNzYWdlLmludm9jYXRpb25JZF07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYWxsYmFjayhtZXNzYWdlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIE1lc3NhZ2VUeXBlLlBpbmc6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIERvbid0IGNhcmUgYWJvdXQgcGluZ3NcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBNZXNzYWdlVHlwZS5DbG9zZTpcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5sb2dnZXIubG9nKExvZ0xldmVsLkluZm9ybWF0aW9uLCBcIkNsb3NlIG1lc3NhZ2UgcmVjZWl2ZWQgZnJvbSBzZXJ2ZXIuXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBXZSBkb24ndCB3YW50IHRvIHdhaXQgb24gdGhlIHN0b3AgaXRzZWxmLlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bm8tZmxvYXRpbmctcHJvbWlzZXNcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jb25uZWN0aW9uLnN0b3AobWVzc2FnZS5lcnJvciA/IG5ldyBFcnJvcihcIlNlcnZlciByZXR1cm5lZCBhbiBlcnJvciBvbiBjbG9zZTogXCIgKyBtZXNzYWdlLmVycm9yKSA6IHVuZGVmaW5lZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubG9nZ2VyLmxvZyhMb2dMZXZlbC5XYXJuaW5nLCBcIkludmFsaWQgbWVzc2FnZSB0eXBlOiBcIiArIG1lc3NhZ2UudHlwZSArIFwiLlwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5yZXNldFRpbWVvdXRQZXJpb2QoKTtcclxuICAgIH07XHJcbiAgICBIdWJDb25uZWN0aW9uLnByb3RvdHlwZS5wcm9jZXNzSGFuZHNoYWtlUmVzcG9uc2UgPSBmdW5jdGlvbiAoZGF0YSkge1xyXG4gICAgICAgIHZhciBfYTtcclxuICAgICAgICB2YXIgcmVzcG9uc2VNZXNzYWdlO1xyXG4gICAgICAgIHZhciByZW1haW5pbmdEYXRhO1xyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIF9hID0gdGhpcy5oYW5kc2hha2VQcm90b2NvbC5wYXJzZUhhbmRzaGFrZVJlc3BvbnNlKGRhdGEpLCByZW1haW5pbmdEYXRhID0gX2FbMF0sIHJlc3BvbnNlTWVzc2FnZSA9IF9hWzFdO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjYXRjaCAoZSkge1xyXG4gICAgICAgICAgICB2YXIgbWVzc2FnZSA9IFwiRXJyb3IgcGFyc2luZyBoYW5kc2hha2UgcmVzcG9uc2U6IFwiICsgZTtcclxuICAgICAgICAgICAgdGhpcy5sb2dnZXIubG9nKExvZ0xldmVsLkVycm9yLCBtZXNzYWdlKTtcclxuICAgICAgICAgICAgdmFyIGVycm9yID0gbmV3IEVycm9yKG1lc3NhZ2UpO1xyXG4gICAgICAgICAgICAvLyBXZSBkb24ndCB3YW50IHRvIHdhaXQgb24gdGhlIHN0b3AgaXRzZWxmLlxyXG4gICAgICAgICAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bm8tZmxvYXRpbmctcHJvbWlzZXNcclxuICAgICAgICAgICAgdGhpcy5jb25uZWN0aW9uLnN0b3AoZXJyb3IpO1xyXG4gICAgICAgICAgICB0aGlzLmhhbmRzaGFrZVJlamVjdGVyKGVycm9yKTtcclxuICAgICAgICAgICAgdGhyb3cgZXJyb3I7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChyZXNwb25zZU1lc3NhZ2UuZXJyb3IpIHtcclxuICAgICAgICAgICAgdmFyIG1lc3NhZ2UgPSBcIlNlcnZlciByZXR1cm5lZCBoYW5kc2hha2UgZXJyb3I6IFwiICsgcmVzcG9uc2VNZXNzYWdlLmVycm9yO1xyXG4gICAgICAgICAgICB0aGlzLmxvZ2dlci5sb2coTG9nTGV2ZWwuRXJyb3IsIG1lc3NhZ2UpO1xyXG4gICAgICAgICAgICB0aGlzLmhhbmRzaGFrZVJlamVjdGVyKG1lc3NhZ2UpO1xyXG4gICAgICAgICAgICAvLyBXZSBkb24ndCB3YW50IHRvIHdhaXQgb24gdGhlIHN0b3AgaXRzZWxmLlxyXG4gICAgICAgICAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bm8tZmxvYXRpbmctcHJvbWlzZXNcclxuICAgICAgICAgICAgdGhpcy5jb25uZWN0aW9uLnN0b3AobmV3IEVycm9yKG1lc3NhZ2UpKTtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKG1lc3NhZ2UpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5sb2dnZXIubG9nKExvZ0xldmVsLkRlYnVnLCBcIlNlcnZlciBoYW5kc2hha2UgY29tcGxldGUuXCIpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmhhbmRzaGFrZVJlc29sdmVyKCk7XHJcbiAgICAgICAgcmV0dXJuIHJlbWFpbmluZ0RhdGE7XHJcbiAgICB9O1xyXG4gICAgSHViQ29ubmVjdGlvbi5wcm90b3R5cGUucmVzZXRLZWVwQWxpdmVJbnRlcnZhbCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIHRoaXMuY2xlYW51cFBpbmdUaW1lcigpO1xyXG4gICAgICAgIHRoaXMucGluZ1NlcnZlckhhbmRsZSA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkgeyByZXR1cm4gX19hd2FpdGVyKF90aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB2YXIgX2E7XHJcbiAgICAgICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2IpIHtcclxuICAgICAgICAgICAgICAgIHN3aXRjaCAoX2IubGFiZWwpIHtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDA6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghKHRoaXMuY29ubmVjdGlvblN0YXRlID09PSBIdWJDb25uZWN0aW9uU3RhdGUuQ29ubmVjdGVkKSkgcmV0dXJuIFszIC8qYnJlYWsqLywgNF07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9iLmxhYmVsID0gMTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9iLnRyeXMucHVzaChbMSwgMywgLCA0XSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIHRoaXMuc2VuZE1lc3NhZ2UodGhpcy5jYWNoZWRQaW5nTWVzc2FnZSldO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMjpcclxuICAgICAgICAgICAgICAgICAgICAgICAgX2Iuc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzMgLypicmVhayovLCA0XTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDM6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9hID0gX2Iuc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBXZSBkb24ndCBjYXJlIGFib3V0IHRoZSBlcnJvci4gSXQgc2hvdWxkIGJlIHNlZW4gZWxzZXdoZXJlIGluIHRoZSBjbGllbnQuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFRoZSBjb25uZWN0aW9uIGlzIHByb2JhYmx5IGluIGEgYmFkIG9yIGNsb3NlZCBzdGF0ZSBub3csIGNsZWFudXAgdGhlIHRpbWVyIHNvIGl0IHN0b3BzIHRyaWdnZXJpbmdcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jbGVhbnVwUGluZ1RpbWVyKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMyAvKmJyZWFrKi8sIDRdO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNDogcmV0dXJuIFsyIC8qcmV0dXJuKi9dO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTsgfSwgdGhpcy5rZWVwQWxpdmVJbnRlcnZhbEluTWlsbGlzZWNvbmRzKTtcclxuICAgIH07XHJcbiAgICBIdWJDb25uZWN0aW9uLnByb3RvdHlwZS5yZXNldFRpbWVvdXRQZXJpb2QgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICBpZiAoIXRoaXMuY29ubmVjdGlvbi5mZWF0dXJlcyB8fCAhdGhpcy5jb25uZWN0aW9uLmZlYXR1cmVzLmluaGVyZW50S2VlcEFsaXZlKSB7XHJcbiAgICAgICAgICAgIC8vIFNldCB0aGUgdGltZW91dCB0aW1lclxyXG4gICAgICAgICAgICB0aGlzLnRpbWVvdXRIYW5kbGUgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHsgcmV0dXJuIF90aGlzLnNlcnZlclRpbWVvdXQoKTsgfSwgdGhpcy5zZXJ2ZXJUaW1lb3V0SW5NaWxsaXNlY29uZHMpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBIdWJDb25uZWN0aW9uLnByb3RvdHlwZS5zZXJ2ZXJUaW1lb3V0ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIC8vIFRoZSBzZXJ2ZXIgaGFzbid0IHRhbGtlZCB0byB1cyBpbiBhIHdoaWxlLiBJdCBkb2Vzbid0IGxpa2UgdXMgYW55bW9yZSAuLi4gOihcclxuICAgICAgICAvLyBUZXJtaW5hdGUgdGhlIGNvbm5lY3Rpb24sIGJ1dCB3ZSBkb24ndCBuZWVkIHRvIHdhaXQgb24gdGhlIHByb21pc2UuXHJcbiAgICAgICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm5vLWZsb2F0aW5nLXByb21pc2VzXHJcbiAgICAgICAgdGhpcy5jb25uZWN0aW9uLnN0b3AobmV3IEVycm9yKFwiU2VydmVyIHRpbWVvdXQgZWxhcHNlZCB3aXRob3V0IHJlY2VpdmluZyBhIG1lc3NhZ2UgZnJvbSB0aGUgc2VydmVyLlwiKSk7XHJcbiAgICB9O1xyXG4gICAgSHViQ29ubmVjdGlvbi5wcm90b3R5cGUuaW52b2tlQ2xpZW50TWV0aG9kID0gZnVuY3Rpb24gKGludm9jYXRpb25NZXNzYWdlKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICB2YXIgbWV0aG9kcyA9IHRoaXMubWV0aG9kc1tpbnZvY2F0aW9uTWVzc2FnZS50YXJnZXQudG9Mb3dlckNhc2UoKV07XHJcbiAgICAgICAgaWYgKG1ldGhvZHMpIHtcclxuICAgICAgICAgICAgbWV0aG9kcy5mb3JFYWNoKGZ1bmN0aW9uIChtKSB7IHJldHVybiBtLmFwcGx5KF90aGlzLCBpbnZvY2F0aW9uTWVzc2FnZS5hcmd1bWVudHMpOyB9KTtcclxuICAgICAgICAgICAgaWYgKGludm9jYXRpb25NZXNzYWdlLmludm9jYXRpb25JZCkge1xyXG4gICAgICAgICAgICAgICAgLy8gVGhpcyBpcyBub3Qgc3VwcG9ydGVkIGluIHYxLiBTbyB3ZSByZXR1cm4gYW4gZXJyb3IgdG8gYXZvaWQgYmxvY2tpbmcgdGhlIHNlcnZlciB3YWl0aW5nIGZvciB0aGUgcmVzcG9uc2UuXHJcbiAgICAgICAgICAgICAgICB2YXIgbWVzc2FnZSA9IFwiU2VydmVyIHJlcXVlc3RlZCBhIHJlc3BvbnNlLCB3aGljaCBpcyBub3Qgc3VwcG9ydGVkIGluIHRoaXMgdmVyc2lvbiBvZiB0aGUgY2xpZW50LlwiO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5sb2dnZXIubG9nKExvZ0xldmVsLkVycm9yLCBtZXNzYWdlKTtcclxuICAgICAgICAgICAgICAgIC8vIFdlIGRvbid0IG5lZWQgdG8gd2FpdCBvbiB0aGlzIFByb21pc2UuXHJcbiAgICAgICAgICAgICAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bm8tZmxvYXRpbmctcHJvbWlzZXNcclxuICAgICAgICAgICAgICAgIHRoaXMuY29ubmVjdGlvbi5zdG9wKG5ldyBFcnJvcihtZXNzYWdlKSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMubG9nZ2VyLmxvZyhMb2dMZXZlbC5XYXJuaW5nLCBcIk5vIGNsaWVudCBtZXRob2Qgd2l0aCB0aGUgbmFtZSAnXCIgKyBpbnZvY2F0aW9uTWVzc2FnZS50YXJnZXQgKyBcIicgZm91bmQuXCIpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBIdWJDb25uZWN0aW9uLnByb3RvdHlwZS5jb25uZWN0aW9uQ2xvc2VkID0gZnVuY3Rpb24gKGVycm9yKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICB2YXIgY2FsbGJhY2tzID0gdGhpcy5jYWxsYmFja3M7XHJcbiAgICAgICAgdGhpcy5jYWxsYmFja3MgPSB7fTtcclxuICAgICAgICB0aGlzLmNvbm5lY3Rpb25TdGF0ZSA9IEh1YkNvbm5lY3Rpb25TdGF0ZS5EaXNjb25uZWN0ZWQ7XHJcbiAgICAgICAgLy8gaWYgaGFuZHNoYWtlIGlzIGluIHByb2dyZXNzIHN0YXJ0IHdpbGwgYmUgd2FpdGluZyBmb3IgdGhlIGhhbmRzaGFrZSBwcm9taXNlLCBzbyB3ZSBjb21wbGV0ZSBpdFxyXG4gICAgICAgIC8vIGlmIGl0IGhhcyBhbHJlYWR5IGNvbXBsZXRlZCB0aGlzIHNob3VsZCBqdXN0IG5vb3BcclxuICAgICAgICBpZiAodGhpcy5oYW5kc2hha2VSZWplY3Rlcikge1xyXG4gICAgICAgICAgICB0aGlzLmhhbmRzaGFrZVJlamVjdGVyKGVycm9yKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgT2JqZWN0LmtleXMoY2FsbGJhY2tzKVxyXG4gICAgICAgICAgICAuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XHJcbiAgICAgICAgICAgIHZhciBjYWxsYmFjayA9IGNhbGxiYWNrc1trZXldO1xyXG4gICAgICAgICAgICBjYWxsYmFjayhudWxsLCBlcnJvciA/IGVycm9yIDogbmV3IEVycm9yKFwiSW52b2NhdGlvbiBjYW5jZWxlZCBkdWUgdG8gY29ubmVjdGlvbiBiZWluZyBjbG9zZWQuXCIpKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICB0aGlzLmNsZWFudXBUaW1lb3V0KCk7XHJcbiAgICAgICAgdGhpcy5jbGVhbnVwUGluZ1RpbWVyKCk7XHJcbiAgICAgICAgdGhpcy5jbG9zZWRDYWxsYmFja3MuZm9yRWFjaChmdW5jdGlvbiAoYykgeyByZXR1cm4gYy5hcHBseShfdGhpcywgW2Vycm9yXSk7IH0pO1xyXG4gICAgfTtcclxuICAgIEh1YkNvbm5lY3Rpb24ucHJvdG90eXBlLmNsZWFudXBQaW5nVGltZXIgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMucGluZ1NlcnZlckhhbmRsZSkge1xyXG4gICAgICAgICAgICBjbGVhclRpbWVvdXQodGhpcy5waW5nU2VydmVySGFuZGxlKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgSHViQ29ubmVjdGlvbi5wcm90b3R5cGUuY2xlYW51cFRpbWVvdXQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMudGltZW91dEhhbmRsZSkge1xyXG4gICAgICAgICAgICBjbGVhclRpbWVvdXQodGhpcy50aW1lb3V0SGFuZGxlKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgSHViQ29ubmVjdGlvbi5wcm90b3R5cGUuY3JlYXRlSW52b2NhdGlvbiA9IGZ1bmN0aW9uIChtZXRob2ROYW1lLCBhcmdzLCBub25ibG9ja2luZykge1xyXG4gICAgICAgIGlmIChub25ibG9ja2luZykge1xyXG4gICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgYXJndW1lbnRzOiBhcmdzLFxyXG4gICAgICAgICAgICAgICAgdGFyZ2V0OiBtZXRob2ROYW1lLFxyXG4gICAgICAgICAgICAgICAgdHlwZTogTWVzc2FnZVR5cGUuSW52b2NhdGlvbixcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHZhciBpZCA9IHRoaXMuaWQ7XHJcbiAgICAgICAgICAgIHRoaXMuaWQrKztcclxuICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgIGFyZ3VtZW50czogYXJncyxcclxuICAgICAgICAgICAgICAgIGludm9jYXRpb25JZDogaWQudG9TdHJpbmcoKSxcclxuICAgICAgICAgICAgICAgIHRhcmdldDogbWV0aG9kTmFtZSxcclxuICAgICAgICAgICAgICAgIHR5cGU6IE1lc3NhZ2VUeXBlLkludm9jYXRpb24sXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIEh1YkNvbm5lY3Rpb24ucHJvdG90eXBlLmNyZWF0ZVN0cmVhbUludm9jYXRpb24gPSBmdW5jdGlvbiAobWV0aG9kTmFtZSwgYXJncykge1xyXG4gICAgICAgIHZhciBpZCA9IHRoaXMuaWQ7XHJcbiAgICAgICAgdGhpcy5pZCsrO1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIGFyZ3VtZW50czogYXJncyxcclxuICAgICAgICAgICAgaW52b2NhdGlvbklkOiBpZC50b1N0cmluZygpLFxyXG4gICAgICAgICAgICB0YXJnZXQ6IG1ldGhvZE5hbWUsXHJcbiAgICAgICAgICAgIHR5cGU6IE1lc3NhZ2VUeXBlLlN0cmVhbUludm9jYXRpb24sXHJcbiAgICAgICAgfTtcclxuICAgIH07XHJcbiAgICBIdWJDb25uZWN0aW9uLnByb3RvdHlwZS5jcmVhdGVDYW5jZWxJbnZvY2F0aW9uID0gZnVuY3Rpb24gKGlkKSB7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgaW52b2NhdGlvbklkOiBpZCxcclxuICAgICAgICAgICAgdHlwZTogTWVzc2FnZVR5cGUuQ2FuY2VsSW52b2NhdGlvbixcclxuICAgICAgICB9O1xyXG4gICAgfTtcclxuICAgIHJldHVybiBIdWJDb25uZWN0aW9uO1xyXG59KCkpO1xyXG5leHBvcnQgeyBIdWJDb25uZWN0aW9uIH07XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUh1YkNvbm5lY3Rpb24uanMubWFwIiwiLy8gQ29weXJpZ2h0IChjKSAuTkVUIEZvdW5kYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAuIFNlZSBMaWNlbnNlLnR4dCBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxyXG4vLyBUaGlzIHdpbGwgYmUgdHJlYXRlZCBhcyBhIGJpdCBmbGFnIGluIHRoZSBmdXR1cmUsIHNvIHdlIGtlZXAgaXQgdXNpbmcgcG93ZXItb2YtdHdvIHZhbHVlcy5cclxuLyoqIFNwZWNpZmllcyBhIHNwZWNpZmljIEhUVFAgdHJhbnNwb3J0IHR5cGUuICovXHJcbmV4cG9ydCB2YXIgSHR0cFRyYW5zcG9ydFR5cGU7XHJcbihmdW5jdGlvbiAoSHR0cFRyYW5zcG9ydFR5cGUpIHtcclxuICAgIC8qKiBTcGVjaWZpZXMgbm8gdHJhbnNwb3J0IHByZWZlcmVuY2UuICovXHJcbiAgICBIdHRwVHJhbnNwb3J0VHlwZVtIdHRwVHJhbnNwb3J0VHlwZVtcIk5vbmVcIl0gPSAwXSA9IFwiTm9uZVwiO1xyXG4gICAgLyoqIFNwZWNpZmllcyB0aGUgV2ViU29ja2V0cyB0cmFuc3BvcnQuICovXHJcbiAgICBIdHRwVHJhbnNwb3J0VHlwZVtIdHRwVHJhbnNwb3J0VHlwZVtcIldlYlNvY2tldHNcIl0gPSAxXSA9IFwiV2ViU29ja2V0c1wiO1xyXG4gICAgLyoqIFNwZWNpZmllcyB0aGUgU2VydmVyLVNlbnQgRXZlbnRzIHRyYW5zcG9ydC4gKi9cclxuICAgIEh0dHBUcmFuc3BvcnRUeXBlW0h0dHBUcmFuc3BvcnRUeXBlW1wiU2VydmVyU2VudEV2ZW50c1wiXSA9IDJdID0gXCJTZXJ2ZXJTZW50RXZlbnRzXCI7XHJcbiAgICAvKiogU3BlY2lmaWVzIHRoZSBMb25nIFBvbGxpbmcgdHJhbnNwb3J0LiAqL1xyXG4gICAgSHR0cFRyYW5zcG9ydFR5cGVbSHR0cFRyYW5zcG9ydFR5cGVbXCJMb25nUG9sbGluZ1wiXSA9IDRdID0gXCJMb25nUG9sbGluZ1wiO1xyXG59KShIdHRwVHJhbnNwb3J0VHlwZSB8fCAoSHR0cFRyYW5zcG9ydFR5cGUgPSB7fSkpO1xyXG4vKiogU3BlY2lmaWVzIHRoZSB0cmFuc2ZlciBmb3JtYXQgZm9yIGEgY29ubmVjdGlvbi4gKi9cclxuZXhwb3J0IHZhciBUcmFuc2ZlckZvcm1hdDtcclxuKGZ1bmN0aW9uIChUcmFuc2ZlckZvcm1hdCkge1xyXG4gICAgLyoqIFNwZWNpZmllcyB0aGF0IG9ubHkgdGV4dCBkYXRhIHdpbGwgYmUgdHJhbnNtaXR0ZWQgb3ZlciB0aGUgY29ubmVjdGlvbi4gKi9cclxuICAgIFRyYW5zZmVyRm9ybWF0W1RyYW5zZmVyRm9ybWF0W1wiVGV4dFwiXSA9IDFdID0gXCJUZXh0XCI7XHJcbiAgICAvKiogU3BlY2lmaWVzIHRoYXQgYmluYXJ5IGRhdGEgd2lsbCBiZSB0cmFuc21pdHRlZCBvdmVyIHRoZSBjb25uZWN0aW9uLiAqL1xyXG4gICAgVHJhbnNmZXJGb3JtYXRbVHJhbnNmZXJGb3JtYXRbXCJCaW5hcnlcIl0gPSAyXSA9IFwiQmluYXJ5XCI7XHJcbn0pKFRyYW5zZmVyRm9ybWF0IHx8IChUcmFuc2ZlckZvcm1hdCA9IHt9KSk7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUlUcmFuc3BvcnQuanMubWFwIiwiLy8gQ29weXJpZ2h0IChjKSAuTkVUIEZvdW5kYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAuIFNlZSBMaWNlbnNlLnR4dCBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxyXG4vLyBSb3VnaCBwb2x5ZmlsbCBvZiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvQWJvcnRDb250cm9sbGVyXHJcbi8vIFdlIGRvbid0IGFjdHVhbGx5IGV2ZXIgdXNlIHRoZSBBUEkgYmVpbmcgcG9seWZpbGxlZCwgd2UgYWx3YXlzIHVzZSB0aGUgcG9seWZpbGwgYmVjYXVzZVxyXG4vLyBpdCdzIGEgdmVyeSBuZXcgQVBJIHJpZ2h0IG5vdy5cclxuLy8gTm90IGV4cG9ydGVkIGZyb20gaW5kZXguXHJcbi8qKiBAcHJpdmF0ZSAqL1xyXG52YXIgQWJvcnRDb250cm9sbGVyID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gQWJvcnRDb250cm9sbGVyKCkge1xyXG4gICAgICAgIHRoaXMuaXNBYm9ydGVkID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5vbmFib3J0ID0gbnVsbDtcclxuICAgIH1cclxuICAgIEFib3J0Q29udHJvbGxlci5wcm90b3R5cGUuYWJvcnQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLmlzQWJvcnRlZCkge1xyXG4gICAgICAgICAgICB0aGlzLmlzQWJvcnRlZCA9IHRydWU7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLm9uYWJvcnQpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMub25hYm9ydCgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShBYm9ydENvbnRyb2xsZXIucHJvdG90eXBlLCBcInNpZ25hbFwiLCB7XHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgIH0pO1xyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEFib3J0Q29udHJvbGxlci5wcm90b3R5cGUsIFwiYWJvcnRlZFwiLCB7XHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmlzQWJvcnRlZDtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXHJcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICB9KTtcclxuICAgIHJldHVybiBBYm9ydENvbnRyb2xsZXI7XHJcbn0oKSk7XHJcbmV4cG9ydCB7IEFib3J0Q29udHJvbGxlciB9O1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1BYm9ydENvbnRyb2xsZXIuanMubWFwIiwiLy8gQ29weXJpZ2h0IChjKSAuTkVUIEZvdW5kYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAuIFNlZSBMaWNlbnNlLnR4dCBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxyXG52YXIgX19hd2FpdGVyID0gKHRoaXMgJiYgdGhpcy5fX2F3YWl0ZXIpIHx8IGZ1bmN0aW9uICh0aGlzQXJnLCBfYXJndW1lbnRzLCBQLCBnZW5lcmF0b3IpIHtcclxuICAgIHJldHVybiBuZXcgKFAgfHwgKFAgPSBQcm9taXNlKSkoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xyXG4gICAgICAgIGZ1bmN0aW9uIGZ1bGZpbGxlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvci5uZXh0KHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cclxuICAgICAgICBmdW5jdGlvbiByZWplY3RlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvcltcInRocm93XCJdKHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cclxuICAgICAgICBmdW5jdGlvbiBzdGVwKHJlc3VsdCkgeyByZXN1bHQuZG9uZSA/IHJlc29sdmUocmVzdWx0LnZhbHVlKSA6IG5ldyBQKGZ1bmN0aW9uIChyZXNvbHZlKSB7IHJlc29sdmUocmVzdWx0LnZhbHVlKTsgfSkudGhlbihmdWxmaWxsZWQsIHJlamVjdGVkKTsgfVxyXG4gICAgICAgIHN0ZXAoKGdlbmVyYXRvciA9IGdlbmVyYXRvci5hcHBseSh0aGlzQXJnLCBfYXJndW1lbnRzIHx8IFtdKSkubmV4dCgpKTtcclxuICAgIH0pO1xyXG59O1xyXG52YXIgX19nZW5lcmF0b3IgPSAodGhpcyAmJiB0aGlzLl9fZ2VuZXJhdG9yKSB8fCBmdW5jdGlvbiAodGhpc0FyZywgYm9keSkge1xyXG4gICAgdmFyIF8gPSB7IGxhYmVsOiAwLCBzZW50OiBmdW5jdGlvbigpIHsgaWYgKHRbMF0gJiAxKSB0aHJvdyB0WzFdOyByZXR1cm4gdFsxXTsgfSwgdHJ5czogW10sIG9wczogW10gfSwgZiwgeSwgdCwgZztcclxuICAgIHJldHVybiBnID0geyBuZXh0OiB2ZXJiKDApLCBcInRocm93XCI6IHZlcmIoMSksIFwicmV0dXJuXCI6IHZlcmIoMikgfSwgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIChnW1N5bWJvbC5pdGVyYXRvcl0gPSBmdW5jdGlvbigpIHsgcmV0dXJuIHRoaXM7IH0pLCBnO1xyXG4gICAgZnVuY3Rpb24gdmVyYihuKSB7IHJldHVybiBmdW5jdGlvbiAodikgeyByZXR1cm4gc3RlcChbbiwgdl0pOyB9OyB9XHJcbiAgICBmdW5jdGlvbiBzdGVwKG9wKSB7XHJcbiAgICAgICAgaWYgKGYpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJHZW5lcmF0b3IgaXMgYWxyZWFkeSBleGVjdXRpbmcuXCIpO1xyXG4gICAgICAgIHdoaWxlIChfKSB0cnkge1xyXG4gICAgICAgICAgICBpZiAoZiA9IDEsIHkgJiYgKHQgPSBvcFswXSAmIDIgPyB5W1wicmV0dXJuXCJdIDogb3BbMF0gPyB5W1widGhyb3dcIl0gfHwgKCh0ID0geVtcInJldHVyblwiXSkgJiYgdC5jYWxsKHkpLCAwKSA6IHkubmV4dCkgJiYgISh0ID0gdC5jYWxsKHksIG9wWzFdKSkuZG9uZSkgcmV0dXJuIHQ7XHJcbiAgICAgICAgICAgIGlmICh5ID0gMCwgdCkgb3AgPSBbb3BbMF0gJiAyLCB0LnZhbHVlXTtcclxuICAgICAgICAgICAgc3dpdGNoIChvcFswXSkge1xyXG4gICAgICAgICAgICAgICAgY2FzZSAwOiBjYXNlIDE6IHQgPSBvcDsgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDQ6IF8ubGFiZWwrKzsgcmV0dXJuIHsgdmFsdWU6IG9wWzFdLCBkb25lOiBmYWxzZSB9O1xyXG4gICAgICAgICAgICAgICAgY2FzZSA1OiBfLmxhYmVsKys7IHkgPSBvcFsxXTsgb3AgPSBbMF07IGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgY2FzZSA3OiBvcCA9IF8ub3BzLnBvcCgpOyBfLnRyeXMucG9wKCk7IGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgICAgICBpZiAoISh0ID0gXy50cnlzLCB0ID0gdC5sZW5ndGggPiAwICYmIHRbdC5sZW5ndGggLSAxXSkgJiYgKG9wWzBdID09PSA2IHx8IG9wWzBdID09PSAyKSkgeyBfID0gMDsgY29udGludWU7IH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAob3BbMF0gPT09IDMgJiYgKCF0IHx8IChvcFsxXSA+IHRbMF0gJiYgb3BbMV0gPCB0WzNdKSkpIHsgXy5sYWJlbCA9IG9wWzFdOyBicmVhazsgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChvcFswXSA9PT0gNiAmJiBfLmxhYmVsIDwgdFsxXSkgeyBfLmxhYmVsID0gdFsxXTsgdCA9IG9wOyBicmVhazsgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0ICYmIF8ubGFiZWwgPCB0WzJdKSB7IF8ubGFiZWwgPSB0WzJdOyBfLm9wcy5wdXNoKG9wKTsgYnJlYWs7IH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAodFsyXSkgXy5vcHMucG9wKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgXy50cnlzLnBvcCgpOyBjb250aW51ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBvcCA9IGJvZHkuY2FsbCh0aGlzQXJnLCBfKTtcclxuICAgICAgICB9IGNhdGNoIChlKSB7IG9wID0gWzYsIGVdOyB5ID0gMDsgfSBmaW5hbGx5IHsgZiA9IHQgPSAwOyB9XHJcbiAgICAgICAgaWYgKG9wWzBdICYgNSkgdGhyb3cgb3BbMV07IHJldHVybiB7IHZhbHVlOiBvcFswXSA/IG9wWzFdIDogdm9pZCAwLCBkb25lOiB0cnVlIH07XHJcbiAgICB9XHJcbn07XHJcbmltcG9ydCB7IEFib3J0Q29udHJvbGxlciB9IGZyb20gXCIuL0Fib3J0Q29udHJvbGxlclwiO1xyXG5pbXBvcnQgeyBIdHRwRXJyb3IsIFRpbWVvdXRFcnJvciB9IGZyb20gXCIuL0Vycm9yc1wiO1xyXG5pbXBvcnQgeyBMb2dMZXZlbCB9IGZyb20gXCIuL0lMb2dnZXJcIjtcclxuaW1wb3J0IHsgVHJhbnNmZXJGb3JtYXQgfSBmcm9tIFwiLi9JVHJhbnNwb3J0XCI7XHJcbmltcG9ydCB7IEFyZywgZ2V0RGF0YURldGFpbCwgc2VuZE1lc3NhZ2UgfSBmcm9tIFwiLi9VdGlsc1wiO1xyXG4vLyBOb3QgZXhwb3J0ZWQgZnJvbSAnaW5kZXgnLCB0aGlzIHR5cGUgaXMgaW50ZXJuYWwuXHJcbi8qKiBAcHJpdmF0ZSAqL1xyXG52YXIgTG9uZ1BvbGxpbmdUcmFuc3BvcnQgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBMb25nUG9sbGluZ1RyYW5zcG9ydChodHRwQ2xpZW50LCBhY2Nlc3NUb2tlbkZhY3RvcnksIGxvZ2dlciwgbG9nTWVzc2FnZUNvbnRlbnQpIHtcclxuICAgICAgICB0aGlzLmh0dHBDbGllbnQgPSBodHRwQ2xpZW50O1xyXG4gICAgICAgIHRoaXMuYWNjZXNzVG9rZW5GYWN0b3J5ID0gYWNjZXNzVG9rZW5GYWN0b3J5O1xyXG4gICAgICAgIHRoaXMubG9nZ2VyID0gbG9nZ2VyO1xyXG4gICAgICAgIHRoaXMucG9sbEFib3J0ID0gbmV3IEFib3J0Q29udHJvbGxlcigpO1xyXG4gICAgICAgIHRoaXMubG9nTWVzc2FnZUNvbnRlbnQgPSBsb2dNZXNzYWdlQ29udGVudDtcclxuICAgICAgICB0aGlzLnJ1bm5pbmcgPSBmYWxzZTtcclxuICAgICAgICB0aGlzLm9ucmVjZWl2ZSA9IG51bGw7XHJcbiAgICAgICAgdGhpcy5vbmNsb3NlID0gbnVsbDtcclxuICAgIH1cclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShMb25nUG9sbGluZ1RyYW5zcG9ydC5wcm90b3R5cGUsIFwicG9sbEFib3J0ZWRcIiwge1xyXG4gICAgICAgIC8vIFRoaXMgaXMgYW4gaW50ZXJuYWwgdHlwZSwgbm90IGV4cG9ydGVkIGZyb20gJ2luZGV4JyBzbyB0aGlzIGlzIHJlYWxseSBqdXN0IGludGVybmFsLlxyXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5wb2xsQWJvcnQuYWJvcnRlZDtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXHJcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICB9KTtcclxuICAgIExvbmdQb2xsaW5nVHJhbnNwb3J0LnByb3RvdHlwZS5jb25uZWN0ID0gZnVuY3Rpb24gKHVybCwgdHJhbnNmZXJGb3JtYXQpIHtcclxuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHZhciBwb2xsT3B0aW9ucywgdG9rZW4sIHBvbGxVcmwsIHJlc3BvbnNlO1xyXG4gICAgICAgICAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9hKSB7XHJcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKF9hLmxhYmVsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAwOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBBcmcuaXNSZXF1aXJlZCh1cmwsIFwidXJsXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBBcmcuaXNSZXF1aXJlZCh0cmFuc2ZlckZvcm1hdCwgXCJ0cmFuc2ZlckZvcm1hdFwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgQXJnLmlzSW4odHJhbnNmZXJGb3JtYXQsIFRyYW5zZmVyRm9ybWF0LCBcInRyYW5zZmVyRm9ybWF0XCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnVybCA9IHVybDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5sb2dnZXIubG9nKExvZ0xldmVsLlRyYWNlLCBcIihMb25nUG9sbGluZyB0cmFuc3BvcnQpIENvbm5lY3RpbmcuXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBBbGxvdyBiaW5hcnkgZm9ybWF0IG9uIE5vZGUgYW5kIEJyb3dzZXJzIHRoYXQgc3VwcG9ydCBiaW5hcnkgY29udGVudCAoaW5kaWNhdGVkIGJ5IHRoZSBwcmVzZW5jZSBvZiByZXNwb25zZVR5cGUgcHJvcGVydHkpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0cmFuc2ZlckZvcm1hdCA9PT0gVHJhbnNmZXJGb3JtYXQuQmluYXJ5ICYmXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAodHlwZW9mIFhNTEh0dHBSZXF1ZXN0ICE9PSBcInVuZGVmaW5lZFwiICYmIHR5cGVvZiBuZXcgWE1MSHR0cFJlcXVlc3QoKS5yZXNwb25zZVR5cGUgIT09IFwic3RyaW5nXCIpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJCaW5hcnkgcHJvdG9jb2xzIG92ZXIgWG1sSHR0cFJlcXVlc3Qgbm90IGltcGxlbWVudGluZyBhZHZhbmNlZCBmZWF0dXJlcyBhcmUgbm90IHN1cHBvcnRlZC5cIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgcG9sbE9wdGlvbnMgPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhYm9ydFNpZ25hbDogdGhpcy5wb2xsQWJvcnQuc2lnbmFsLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaGVhZGVyczoge30sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aW1lb3V0OiAxMDAwMDAsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0cmFuc2ZlckZvcm1hdCA9PT0gVHJhbnNmZXJGb3JtYXQuQmluYXJ5KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb2xsT3B0aW9ucy5yZXNwb25zZVR5cGUgPSBcImFycmF5YnVmZmVyXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgdGhpcy5nZXRBY2Nlc3NUb2tlbigpXTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRva2VuID0gX2Euc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnVwZGF0ZUhlYWRlclRva2VuKHBvbGxPcHRpb25zLCB0b2tlbik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBvbGxVcmwgPSB1cmwgKyBcIiZfPVwiICsgRGF0ZS5ub3coKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5sb2dnZXIubG9nKExvZ0xldmVsLlRyYWNlLCBcIihMb25nUG9sbGluZyB0cmFuc3BvcnQpIHBvbGxpbmc6IFwiICsgcG9sbFVybCArIFwiLlwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgdGhpcy5odHRwQ2xpZW50LmdldChwb2xsVXJsLCBwb2xsT3B0aW9ucyldO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMjpcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzcG9uc2UgPSBfYS5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZXNwb25zZS5zdGF0dXNDb2RlICE9PSAyMDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubG9nZ2VyLmxvZyhMb2dMZXZlbC5FcnJvciwgXCIoTG9uZ1BvbGxpbmcgdHJhbnNwb3J0KSBVbmV4cGVjdGVkIHJlc3BvbnNlIGNvZGU6IFwiICsgcmVzcG9uc2Uuc3RhdHVzQ29kZSArIFwiLlwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIE1hcmsgcnVubmluZyBhcyBmYWxzZSBzbyB0aGF0IHRoZSBwb2xsIGltbWVkaWF0ZWx5IGVuZHMgYW5kIHJ1bnMgdGhlIGNsb3NlIGxvZ2ljXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNsb3NlRXJyb3IgPSBuZXcgSHR0cEVycm9yKHJlc3BvbnNlLnN0YXR1c1RleHQgfHwgXCJcIiwgcmVzcG9uc2Uuc3RhdHVzQ29kZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnJ1bm5pbmcgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucnVubmluZyA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5yZWNlaXZpbmcgPSB0aGlzLnBvbGwodGhpcy51cmwsIHBvbGxPcHRpb25zKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi9dO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICBMb25nUG9sbGluZ1RyYW5zcG9ydC5wcm90b3R5cGUuZ2V0QWNjZXNzVG9rZW4gPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9hKSB7XHJcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKF9hLmxhYmVsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAwOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXRoaXMuYWNjZXNzVG9rZW5GYWN0b3J5KSByZXR1cm4gWzMgLypicmVhayovLCAyXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgdGhpcy5hY2Nlc3NUb2tlbkZhY3RvcnkoKV07XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxOiByZXR1cm4gWzIgLypyZXR1cm4qLywgX2Euc2VudCgpXTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDI6IHJldHVybiBbMiAvKnJldHVybiovLCBudWxsXTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgTG9uZ1BvbGxpbmdUcmFuc3BvcnQucHJvdG90eXBlLnVwZGF0ZUhlYWRlclRva2VuID0gZnVuY3Rpb24gKHJlcXVlc3QsIHRva2VuKSB7XHJcbiAgICAgICAgaWYgKCFyZXF1ZXN0LmhlYWRlcnMpIHtcclxuICAgICAgICAgICAgcmVxdWVzdC5oZWFkZXJzID0ge307XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0b2tlbikge1xyXG4gICAgICAgICAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bm8tc3RyaW5nLWxpdGVyYWxcclxuICAgICAgICAgICAgcmVxdWVzdC5oZWFkZXJzW1wiQXV0aG9yaXphdGlvblwiXSA9IFwiQmVhcmVyIFwiICsgdG9rZW47XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm5vLXN0cmluZy1saXRlcmFsXHJcbiAgICAgICAgaWYgKHJlcXVlc3QuaGVhZGVyc1tcIkF1dGhvcml6YXRpb25cIl0pIHtcclxuICAgICAgICAgICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm5vLXN0cmluZy1saXRlcmFsXHJcbiAgICAgICAgICAgIGRlbGV0ZSByZXF1ZXN0LmhlYWRlcnNbXCJBdXRob3JpemF0aW9uXCJdO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBMb25nUG9sbGluZ1RyYW5zcG9ydC5wcm90b3R5cGUucG9sbCA9IGZ1bmN0aW9uICh1cmwsIHBvbGxPcHRpb25zKSB7XHJcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB2YXIgdG9rZW4sIHBvbGxVcmwsIHJlc3BvbnNlLCBlXzE7XHJcbiAgICAgICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2EpIHtcclxuICAgICAgICAgICAgICAgIHN3aXRjaCAoX2EubGFiZWwpIHtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDA6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9hLnRyeXMucHVzaChbMCwgLCA4LCA5XSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9hLmxhYmVsID0gMTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghdGhpcy5ydW5uaW5nKSByZXR1cm4gWzMgLypicmVhayovLCA3XTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgdGhpcy5nZXRBY2Nlc3NUb2tlbigpXTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDI6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRva2VuID0gX2Euc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnVwZGF0ZUhlYWRlclRva2VuKHBvbGxPcHRpb25zLCB0b2tlbik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9hLmxhYmVsID0gMztcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDM6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9hLnRyeXMucHVzaChbMywgNSwgLCA2XSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBvbGxVcmwgPSB1cmwgKyBcIiZfPVwiICsgRGF0ZS5ub3coKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5sb2dnZXIubG9nKExvZ0xldmVsLlRyYWNlLCBcIihMb25nUG9sbGluZyB0cmFuc3BvcnQpIHBvbGxpbmc6IFwiICsgcG9sbFVybCArIFwiLlwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgdGhpcy5odHRwQ2xpZW50LmdldChwb2xsVXJsLCBwb2xsT3B0aW9ucyldO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzcG9uc2UgPSBfYS5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZXNwb25zZS5zdGF0dXNDb2RlID09PSAyMDQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubG9nZ2VyLmxvZyhMb2dMZXZlbC5JbmZvcm1hdGlvbiwgXCIoTG9uZ1BvbGxpbmcgdHJhbnNwb3J0KSBQb2xsIHRlcm1pbmF0ZWQgYnkgc2VydmVyLlwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucnVubmluZyA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKHJlc3BvbnNlLnN0YXR1c0NvZGUgIT09IDIwMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5sb2dnZXIubG9nKExvZ0xldmVsLkVycm9yLCBcIihMb25nUG9sbGluZyB0cmFuc3BvcnQpIFVuZXhwZWN0ZWQgcmVzcG9uc2UgY29kZTogXCIgKyByZXNwb25zZS5zdGF0dXNDb2RlICsgXCIuXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gVW5leHBlY3RlZCBzdGF0dXMgY29kZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jbG9zZUVycm9yID0gbmV3IEh0dHBFcnJvcihyZXNwb25zZS5zdGF0dXNUZXh0IHx8IFwiXCIsIHJlc3BvbnNlLnN0YXR1c0NvZGUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5ydW5uaW5nID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBQcm9jZXNzIHRoZSByZXNwb25zZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3BvbnNlLmNvbnRlbnQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmxvZ2dlci5sb2coTG9nTGV2ZWwuVHJhY2UsIFwiKExvbmdQb2xsaW5nIHRyYW5zcG9ydCkgZGF0YSByZWNlaXZlZC4gXCIgKyBnZXREYXRhRGV0YWlsKHJlc3BvbnNlLmNvbnRlbnQsIHRoaXMubG9nTWVzc2FnZUNvbnRlbnQpICsgXCIuXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLm9ucmVjZWl2ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm9ucmVjZWl2ZShyZXNwb25zZS5jb250ZW50KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBUaGlzIGlzIGFub3RoZXIgd2F5IHRpbWVvdXQgbWFuaWZlc3QuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5sb2dnZXIubG9nKExvZ0xldmVsLlRyYWNlLCBcIihMb25nUG9sbGluZyB0cmFuc3BvcnQpIFBvbGwgdGltZWQgb3V0LCByZWlzc3VpbmcuXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMyAvKmJyZWFrKi8sIDZdO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNTpcclxuICAgICAgICAgICAgICAgICAgICAgICAgZV8xID0gX2Euc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXRoaXMucnVubmluZykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gTG9nIGJ1dCBkaXNyZWdhcmQgZXJyb3JzIHRoYXQgb2NjdXIgYWZ0ZXIgc3RvcHBpbmdcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubG9nZ2VyLmxvZyhMb2dMZXZlbC5UcmFjZSwgXCIoTG9uZ1BvbGxpbmcgdHJhbnNwb3J0KSBQb2xsIGVycm9yZWQgYWZ0ZXIgc2h1dGRvd246IFwiICsgZV8xLm1lc3NhZ2UpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGVfMSBpbnN0YW5jZW9mIFRpbWVvdXRFcnJvcikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIElnbm9yZSB0aW1lb3V0cyBhbmQgcmVpc3N1ZSB0aGUgcG9sbC5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmxvZ2dlci5sb2coTG9nTGV2ZWwuVHJhY2UsIFwiKExvbmdQb2xsaW5nIHRyYW5zcG9ydCkgUG9sbCB0aW1lZCBvdXQsIHJlaXNzdWluZy5cIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBDbG9zZSB0aGUgY29ubmVjdGlvbiB3aXRoIHRoZSBlcnJvciBhcyB0aGUgcmVzdWx0LlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY2xvc2VFcnJvciA9IGVfMTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnJ1bm5pbmcgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzMgLypicmVhayovLCA2XTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDY6IHJldHVybiBbMyAvKmJyZWFrKi8sIDFdO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNzogcmV0dXJuIFszIC8qYnJlYWsqLywgOV07XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA4OlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmxvZ2dlci5sb2coTG9nTGV2ZWwuVHJhY2UsIFwiKExvbmdQb2xsaW5nIHRyYW5zcG9ydCkgUG9sbGluZyBjb21wbGV0ZS5cIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFdlIHdpbGwgcmVhY2ggaGVyZSB3aXRoIHBvbGxBYm9ydGVkPT1mYWxzZSB3aGVuIHRoZSBzZXJ2ZXIgcmV0dXJuZWQgYSByZXNwb25zZSBjYXVzaW5nIHRoZSB0cmFuc3BvcnQgdG8gc3RvcC5cclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gSWYgcG9sbEFib3J0ZWQ9PXRydWUgdGhlbiBjbGllbnQgaW5pdGlhdGVkIHRoZSBzdG9wIGFuZCB0aGUgc3RvcCBtZXRob2Qgd2lsbCByYWlzZSB0aGUgY2xvc2UgZXZlbnQgYWZ0ZXIgREVMRVRFIGlzIHNlbnQuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghdGhpcy5wb2xsQWJvcnRlZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5yYWlzZU9uQ2xvc2UoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzcgLyplbmRmaW5hbGx5Ki9dO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgOTogcmV0dXJuIFsyIC8qcmV0dXJuKi9dO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICBMb25nUG9sbGluZ1RyYW5zcG9ydC5wcm90b3R5cGUuc2VuZCA9IGZ1bmN0aW9uIChkYXRhKSB7XHJcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9hKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMucnVubmluZykge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovLCBQcm9taXNlLnJlamVjdChuZXcgRXJyb3IoXCJDYW5ub3Qgc2VuZCB1bnRpbCB0aGUgdHJhbnNwb3J0IGlzIGNvbm5lY3RlZFwiKSldO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi8sIHNlbmRNZXNzYWdlKHRoaXMubG9nZ2VyLCBcIkxvbmdQb2xsaW5nXCIsIHRoaXMuaHR0cENsaWVudCwgdGhpcy51cmwsIHRoaXMuYWNjZXNzVG9rZW5GYWN0b3J5LCBkYXRhLCB0aGlzLmxvZ01lc3NhZ2VDb250ZW50KV07XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIExvbmdQb2xsaW5nVHJhbnNwb3J0LnByb3RvdHlwZS5zdG9wID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdmFyIGRlbGV0ZU9wdGlvbnMsIHRva2VuO1xyXG4gICAgICAgICAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9hKSB7XHJcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKF9hLmxhYmVsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAwOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmxvZ2dlci5sb2coTG9nTGV2ZWwuVHJhY2UsIFwiKExvbmdQb2xsaW5nIHRyYW5zcG9ydCkgU3RvcHBpbmcgcG9sbGluZy5cIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFRlbGwgcmVjZWl2aW5nIGxvb3AgdG8gc3RvcCwgYWJvcnQgYW55IGN1cnJlbnQgcmVxdWVzdCwgYW5kIHRoZW4gd2FpdCBmb3IgaXQgdG8gZmluaXNoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucnVubmluZyA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnBvbGxBYm9ydC5hYm9ydCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBfYS5sYWJlbCA9IDE7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBfYS50cnlzLnB1c2goWzEsICwgNSwgNl0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCB0aGlzLnJlY2VpdmluZ107XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAyOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBfYS5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFNlbmQgREVMRVRFIHRvIGNsZWFuIHVwIGxvbmcgcG9sbGluZyBvbiB0aGUgc2VydmVyXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubG9nZ2VyLmxvZyhMb2dMZXZlbC5UcmFjZSwgXCIoTG9uZ1BvbGxpbmcgdHJhbnNwb3J0KSBzZW5kaW5nIERFTEVURSByZXF1ZXN0IHRvIFwiICsgdGhpcy51cmwgKyBcIi5cIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlbGV0ZU9wdGlvbnMgPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBoZWFkZXJzOiB7fSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgdGhpcy5nZXRBY2Nlc3NUb2tlbigpXTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDM6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRva2VuID0gX2Euc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnVwZGF0ZUhlYWRlclRva2VuKGRlbGV0ZU9wdGlvbnMsIHRva2VuKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgdGhpcy5odHRwQ2xpZW50LmRlbGV0ZSh0aGlzLnVybCwgZGVsZXRlT3B0aW9ucyldO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgX2Euc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmxvZ2dlci5sb2coTG9nTGV2ZWwuVHJhY2UsIFwiKExvbmdQb2xsaW5nIHRyYW5zcG9ydCkgREVMRVRFIHJlcXVlc3Qgc2VudC5cIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMyAvKmJyZWFrKi8sIDZdO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNTpcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5sb2dnZXIubG9nKExvZ0xldmVsLlRyYWNlLCBcIihMb25nUG9sbGluZyB0cmFuc3BvcnQpIFN0b3AgZmluaXNoZWQuXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBSYWlzZSBjbG9zZSBldmVudCBoZXJlIGluc3RlYWQgb2YgaW4gcG9sbGluZ1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBJdCBuZWVkcyB0byBoYXBwZW4gYWZ0ZXIgdGhlIERFTEVURSByZXF1ZXN0IGlzIHNlbnRcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5yYWlzZU9uQ2xvc2UoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs3IC8qZW5kZmluYWxseSovXTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDY6IHJldHVybiBbMiAvKnJldHVybiovXTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgTG9uZ1BvbGxpbmdUcmFuc3BvcnQucHJvdG90eXBlLnJhaXNlT25DbG9zZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBpZiAodGhpcy5vbmNsb3NlKSB7XHJcbiAgICAgICAgICAgIHZhciBsb2dNZXNzYWdlID0gXCIoTG9uZ1BvbGxpbmcgdHJhbnNwb3J0KSBGaXJpbmcgb25jbG9zZSBldmVudC5cIjtcclxuICAgICAgICAgICAgaWYgKHRoaXMuY2xvc2VFcnJvcikge1xyXG4gICAgICAgICAgICAgICAgbG9nTWVzc2FnZSArPSBcIiBFcnJvcjogXCIgKyB0aGlzLmNsb3NlRXJyb3I7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGhpcy5sb2dnZXIubG9nKExvZ0xldmVsLlRyYWNlLCBsb2dNZXNzYWdlKTtcclxuICAgICAgICAgICAgdGhpcy5vbmNsb3NlKHRoaXMuY2xvc2VFcnJvcik7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIHJldHVybiBMb25nUG9sbGluZ1RyYW5zcG9ydDtcclxufSgpKTtcclxuZXhwb3J0IHsgTG9uZ1BvbGxpbmdUcmFuc3BvcnQgfTtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9TG9uZ1BvbGxpbmdUcmFuc3BvcnQuanMubWFwIiwiLy8gQ29weXJpZ2h0IChjKSAuTkVUIEZvdW5kYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAuIFNlZSBMaWNlbnNlLnR4dCBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxyXG52YXIgX19hd2FpdGVyID0gKHRoaXMgJiYgdGhpcy5fX2F3YWl0ZXIpIHx8IGZ1bmN0aW9uICh0aGlzQXJnLCBfYXJndW1lbnRzLCBQLCBnZW5lcmF0b3IpIHtcclxuICAgIHJldHVybiBuZXcgKFAgfHwgKFAgPSBQcm9taXNlKSkoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xyXG4gICAgICAgIGZ1bmN0aW9uIGZ1bGZpbGxlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvci5uZXh0KHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cclxuICAgICAgICBmdW5jdGlvbiByZWplY3RlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvcltcInRocm93XCJdKHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cclxuICAgICAgICBmdW5jdGlvbiBzdGVwKHJlc3VsdCkgeyByZXN1bHQuZG9uZSA/IHJlc29sdmUocmVzdWx0LnZhbHVlKSA6IG5ldyBQKGZ1bmN0aW9uIChyZXNvbHZlKSB7IHJlc29sdmUocmVzdWx0LnZhbHVlKTsgfSkudGhlbihmdWxmaWxsZWQsIHJlamVjdGVkKTsgfVxyXG4gICAgICAgIHN0ZXAoKGdlbmVyYXRvciA9IGdlbmVyYXRvci5hcHBseSh0aGlzQXJnLCBfYXJndW1lbnRzIHx8IFtdKSkubmV4dCgpKTtcclxuICAgIH0pO1xyXG59O1xyXG52YXIgX19nZW5lcmF0b3IgPSAodGhpcyAmJiB0aGlzLl9fZ2VuZXJhdG9yKSB8fCBmdW5jdGlvbiAodGhpc0FyZywgYm9keSkge1xyXG4gICAgdmFyIF8gPSB7IGxhYmVsOiAwLCBzZW50OiBmdW5jdGlvbigpIHsgaWYgKHRbMF0gJiAxKSB0aHJvdyB0WzFdOyByZXR1cm4gdFsxXTsgfSwgdHJ5czogW10sIG9wczogW10gfSwgZiwgeSwgdCwgZztcclxuICAgIHJldHVybiBnID0geyBuZXh0OiB2ZXJiKDApLCBcInRocm93XCI6IHZlcmIoMSksIFwicmV0dXJuXCI6IHZlcmIoMikgfSwgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIChnW1N5bWJvbC5pdGVyYXRvcl0gPSBmdW5jdGlvbigpIHsgcmV0dXJuIHRoaXM7IH0pLCBnO1xyXG4gICAgZnVuY3Rpb24gdmVyYihuKSB7IHJldHVybiBmdW5jdGlvbiAodikgeyByZXR1cm4gc3RlcChbbiwgdl0pOyB9OyB9XHJcbiAgICBmdW5jdGlvbiBzdGVwKG9wKSB7XHJcbiAgICAgICAgaWYgKGYpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJHZW5lcmF0b3IgaXMgYWxyZWFkeSBleGVjdXRpbmcuXCIpO1xyXG4gICAgICAgIHdoaWxlIChfKSB0cnkge1xyXG4gICAgICAgICAgICBpZiAoZiA9IDEsIHkgJiYgKHQgPSBvcFswXSAmIDIgPyB5W1wicmV0dXJuXCJdIDogb3BbMF0gPyB5W1widGhyb3dcIl0gfHwgKCh0ID0geVtcInJldHVyblwiXSkgJiYgdC5jYWxsKHkpLCAwKSA6IHkubmV4dCkgJiYgISh0ID0gdC5jYWxsKHksIG9wWzFdKSkuZG9uZSkgcmV0dXJuIHQ7XHJcbiAgICAgICAgICAgIGlmICh5ID0gMCwgdCkgb3AgPSBbb3BbMF0gJiAyLCB0LnZhbHVlXTtcclxuICAgICAgICAgICAgc3dpdGNoIChvcFswXSkge1xyXG4gICAgICAgICAgICAgICAgY2FzZSAwOiBjYXNlIDE6IHQgPSBvcDsgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDQ6IF8ubGFiZWwrKzsgcmV0dXJuIHsgdmFsdWU6IG9wWzFdLCBkb25lOiBmYWxzZSB9O1xyXG4gICAgICAgICAgICAgICAgY2FzZSA1OiBfLmxhYmVsKys7IHkgPSBvcFsxXTsgb3AgPSBbMF07IGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgY2FzZSA3OiBvcCA9IF8ub3BzLnBvcCgpOyBfLnRyeXMucG9wKCk7IGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgICAgICBpZiAoISh0ID0gXy50cnlzLCB0ID0gdC5sZW5ndGggPiAwICYmIHRbdC5sZW5ndGggLSAxXSkgJiYgKG9wWzBdID09PSA2IHx8IG9wWzBdID09PSAyKSkgeyBfID0gMDsgY29udGludWU7IH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAob3BbMF0gPT09IDMgJiYgKCF0IHx8IChvcFsxXSA+IHRbMF0gJiYgb3BbMV0gPCB0WzNdKSkpIHsgXy5sYWJlbCA9IG9wWzFdOyBicmVhazsgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChvcFswXSA9PT0gNiAmJiBfLmxhYmVsIDwgdFsxXSkgeyBfLmxhYmVsID0gdFsxXTsgdCA9IG9wOyBicmVhazsgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0ICYmIF8ubGFiZWwgPCB0WzJdKSB7IF8ubGFiZWwgPSB0WzJdOyBfLm9wcy5wdXNoKG9wKTsgYnJlYWs7IH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAodFsyXSkgXy5vcHMucG9wKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgXy50cnlzLnBvcCgpOyBjb250aW51ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBvcCA9IGJvZHkuY2FsbCh0aGlzQXJnLCBfKTtcclxuICAgICAgICB9IGNhdGNoIChlKSB7IG9wID0gWzYsIGVdOyB5ID0gMDsgfSBmaW5hbGx5IHsgZiA9IHQgPSAwOyB9XHJcbiAgICAgICAgaWYgKG9wWzBdICYgNSkgdGhyb3cgb3BbMV07IHJldHVybiB7IHZhbHVlOiBvcFswXSA/IG9wWzFdIDogdm9pZCAwLCBkb25lOiB0cnVlIH07XHJcbiAgICB9XHJcbn07XHJcbmltcG9ydCB7IExvZ0xldmVsIH0gZnJvbSBcIi4vSUxvZ2dlclwiO1xyXG5pbXBvcnQgeyBUcmFuc2ZlckZvcm1hdCB9IGZyb20gXCIuL0lUcmFuc3BvcnRcIjtcclxuaW1wb3J0IHsgQXJnLCBnZXREYXRhRGV0YWlsLCBzZW5kTWVzc2FnZSB9IGZyb20gXCIuL1V0aWxzXCI7XHJcbi8qKiBAcHJpdmF0ZSAqL1xyXG52YXIgU2VydmVyU2VudEV2ZW50c1RyYW5zcG9ydCA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIFNlcnZlclNlbnRFdmVudHNUcmFuc3BvcnQoaHR0cENsaWVudCwgYWNjZXNzVG9rZW5GYWN0b3J5LCBsb2dnZXIsIGxvZ01lc3NhZ2VDb250ZW50LCBldmVudFNvdXJjZUNvbnN0cnVjdG9yKSB7XHJcbiAgICAgICAgdGhpcy5odHRwQ2xpZW50ID0gaHR0cENsaWVudDtcclxuICAgICAgICB0aGlzLmFjY2Vzc1Rva2VuRmFjdG9yeSA9IGFjY2Vzc1Rva2VuRmFjdG9yeTtcclxuICAgICAgICB0aGlzLmxvZ2dlciA9IGxvZ2dlcjtcclxuICAgICAgICB0aGlzLmxvZ01lc3NhZ2VDb250ZW50ID0gbG9nTWVzc2FnZUNvbnRlbnQ7XHJcbiAgICAgICAgdGhpcy5ldmVudFNvdXJjZUNvbnN0cnVjdG9yID0gZXZlbnRTb3VyY2VDb25zdHJ1Y3RvcjtcclxuICAgICAgICB0aGlzLm9ucmVjZWl2ZSA9IG51bGw7XHJcbiAgICAgICAgdGhpcy5vbmNsb3NlID0gbnVsbDtcclxuICAgIH1cclxuICAgIFNlcnZlclNlbnRFdmVudHNUcmFuc3BvcnQucHJvdG90eXBlLmNvbm5lY3QgPSBmdW5jdGlvbiAodXJsLCB0cmFuc2ZlckZvcm1hdCkge1xyXG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdmFyIHRva2VuO1xyXG4gICAgICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgICAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9hKSB7XHJcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKF9hLmxhYmVsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAwOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBBcmcuaXNSZXF1aXJlZCh1cmwsIFwidXJsXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBBcmcuaXNSZXF1aXJlZCh0cmFuc2ZlckZvcm1hdCwgXCJ0cmFuc2ZlckZvcm1hdFwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgQXJnLmlzSW4odHJhbnNmZXJGb3JtYXQsIFRyYW5zZmVyRm9ybWF0LCBcInRyYW5zZmVyRm9ybWF0XCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmxvZ2dlci5sb2coTG9nTGV2ZWwuVHJhY2UsIFwiKFNTRSB0cmFuc3BvcnQpIENvbm5lY3RpbmcuXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBzZXQgdXJsIGJlZm9yZSBhY2Nlc3NUb2tlbkZhY3RvcnkgYmVjYXVzZSB0aGlzLnVybCBpcyBvbmx5IGZvciBzZW5kIGFuZCB3ZSBzZXQgdGhlIGF1dGggaGVhZGVyIGluc3RlYWQgb2YgdGhlIHF1ZXJ5IHN0cmluZyBmb3Igc2VuZFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnVybCA9IHVybDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCF0aGlzLmFjY2Vzc1Rva2VuRmFjdG9yeSkgcmV0dXJuIFszIC8qYnJlYWsqLywgMl07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIHRoaXMuYWNjZXNzVG9rZW5GYWN0b3J5KCldO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcclxuICAgICAgICAgICAgICAgICAgICAgICAgdG9rZW4gPSBfYS5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0b2tlbikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdXJsICs9ICh1cmwuaW5kZXhPZihcIj9cIikgPCAwID8gXCI/XCIgOiBcIiZcIikgKyAoXCJhY2Nlc3NfdG9rZW49XCIgKyBlbmNvZGVVUklDb21wb25lbnQodG9rZW4pKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBfYS5sYWJlbCA9IDI7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAyOiByZXR1cm4gWzIgLypyZXR1cm4qLywgbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG9wZW5lZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRyYW5zZmVyRm9ybWF0ICE9PSBUcmFuc2ZlckZvcm1hdC5UZXh0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVqZWN0KG5ldyBFcnJvcihcIlRoZSBTZXJ2ZXItU2VudCBFdmVudHMgdHJhbnNwb3J0IG9ubHkgc3VwcG9ydHMgdGhlICdUZXh0JyB0cmFuc2ZlciBmb3JtYXRcIikpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBldmVudFNvdXJjZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnRTb3VyY2UgPSBuZXcgX3RoaXMuZXZlbnRTb3VyY2VDb25zdHJ1Y3Rvcih1cmwsIHsgd2l0aENyZWRlbnRpYWxzOiB0cnVlIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gTm9uLWJyb3dzZXIgcGFzc2VzIGNvb2tpZXMgdmlhIHRoZSBkaWN0aW9uYXJ5XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGNvb2tpZXMgPSBfdGhpcy5odHRwQ2xpZW50LmdldENvb2tpZVN0cmluZyh1cmwpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50U291cmNlID0gbmV3IF90aGlzLmV2ZW50U291cmNlQ29uc3RydWN0b3IodXJsLCB7IHdpdGhDcmVkZW50aWFsczogdHJ1ZSwgaGVhZGVyczogeyBDb29raWU6IGNvb2tpZXMgfSB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnRTb3VyY2Uub25tZXNzYWdlID0gZnVuY3Rpb24gKGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKF90aGlzLm9ucmVjZWl2ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5sb2dnZXIubG9nKExvZ0xldmVsLlRyYWNlLCBcIihTU0UgdHJhbnNwb3J0KSBkYXRhIHJlY2VpdmVkLiBcIiArIGdldERhdGFEZXRhaWwoZS5kYXRhLCBfdGhpcy5sb2dNZXNzYWdlQ29udGVudCkgKyBcIi5cIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMub25yZWNlaXZlKGUuZGF0YSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5jbG9zZShlcnJvcik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBldmVudFNvdXJjZS5vbmVycm9yID0gZnVuY3Rpb24gKGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGVycm9yID0gbmV3IEVycm9yKGUuZGF0YSB8fCBcIkVycm9yIG9jY3VycmVkXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAob3BlbmVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5jbG9zZShlcnJvcik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWplY3QoZXJyb3IpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBldmVudFNvdXJjZS5vbm9wZW4gPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLmxvZ2dlci5sb2coTG9nTGV2ZWwuSW5mb3JtYXRpb24sIFwiU1NFIGNvbm5lY3RlZCB0byBcIiArIF90aGlzLnVybCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLmV2ZW50U291cmNlID0gZXZlbnRTb3VyY2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wZW5lZCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2F0Y2ggKGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWplY3QoZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KV07XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIFNlcnZlclNlbnRFdmVudHNUcmFuc3BvcnQucHJvdG90eXBlLnNlbmQgPSBmdW5jdGlvbiAoZGF0YSkge1xyXG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIF9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLmV2ZW50U291cmNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi8sIFByb21pc2UucmVqZWN0KG5ldyBFcnJvcihcIkNhbm5vdCBzZW5kIHVudGlsIHRoZSB0cmFuc3BvcnQgaXMgY29ubmVjdGVkXCIpKV07XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qLywgc2VuZE1lc3NhZ2UodGhpcy5sb2dnZXIsIFwiU1NFXCIsIHRoaXMuaHR0cENsaWVudCwgdGhpcy51cmwsIHRoaXMuYWNjZXNzVG9rZW5GYWN0b3J5LCBkYXRhLCB0aGlzLmxvZ01lc3NhZ2VDb250ZW50KV07XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIFNlcnZlclNlbnRFdmVudHNUcmFuc3BvcnQucHJvdG90eXBlLnN0b3AgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdGhpcy5jbG9zZSgpO1xyXG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcclxuICAgIH07XHJcbiAgICBTZXJ2ZXJTZW50RXZlbnRzVHJhbnNwb3J0LnByb3RvdHlwZS5jbG9zZSA9IGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuZXZlbnRTb3VyY2UpIHtcclxuICAgICAgICAgICAgdGhpcy5ldmVudFNvdXJjZS5jbG9zZSgpO1xyXG4gICAgICAgICAgICB0aGlzLmV2ZW50U291cmNlID0gdW5kZWZpbmVkO1xyXG4gICAgICAgICAgICBpZiAodGhpcy5vbmNsb3NlKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm9uY2xvc2UoZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIFNlcnZlclNlbnRFdmVudHNUcmFuc3BvcnQ7XHJcbn0oKSk7XHJcbmV4cG9ydCB7IFNlcnZlclNlbnRFdmVudHNUcmFuc3BvcnQgfTtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9U2VydmVyU2VudEV2ZW50c1RyYW5zcG9ydC5qcy5tYXAiLCIvLyBDb3B5cmlnaHQgKGMpIC5ORVQgRm91bmRhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMC4gU2VlIExpY2Vuc2UudHh0IGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXHJcbnZhciBfX2F3YWl0ZXIgPSAodGhpcyAmJiB0aGlzLl9fYXdhaXRlcikgfHwgZnVuY3Rpb24gKHRoaXNBcmcsIF9hcmd1bWVudHMsIFAsIGdlbmVyYXRvcikge1xyXG4gICAgcmV0dXJuIG5ldyAoUCB8fCAoUCA9IFByb21pc2UpKShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XHJcbiAgICAgICAgZnVuY3Rpb24gZnVsZmlsbGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yLm5leHQodmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxyXG4gICAgICAgIGZ1bmN0aW9uIHJlamVjdGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yW1widGhyb3dcIl0odmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxyXG4gICAgICAgIGZ1bmN0aW9uIHN0ZXAocmVzdWx0KSB7IHJlc3VsdC5kb25lID8gcmVzb2x2ZShyZXN1bHQudmFsdWUpIDogbmV3IFAoZnVuY3Rpb24gKHJlc29sdmUpIHsgcmVzb2x2ZShyZXN1bHQudmFsdWUpOyB9KS50aGVuKGZ1bGZpbGxlZCwgcmVqZWN0ZWQpOyB9XHJcbiAgICAgICAgc3RlcCgoZ2VuZXJhdG9yID0gZ2VuZXJhdG9yLmFwcGx5KHRoaXNBcmcsIF9hcmd1bWVudHMgfHwgW10pKS5uZXh0KCkpO1xyXG4gICAgfSk7XHJcbn07XHJcbnZhciBfX2dlbmVyYXRvciA9ICh0aGlzICYmIHRoaXMuX19nZW5lcmF0b3IpIHx8IGZ1bmN0aW9uICh0aGlzQXJnLCBib2R5KSB7XHJcbiAgICB2YXIgXyA9IHsgbGFiZWw6IDAsIHNlbnQ6IGZ1bmN0aW9uKCkgeyBpZiAodFswXSAmIDEpIHRocm93IHRbMV07IHJldHVybiB0WzFdOyB9LCB0cnlzOiBbXSwgb3BzOiBbXSB9LCBmLCB5LCB0LCBnO1xyXG4gICAgcmV0dXJuIGcgPSB7IG5leHQ6IHZlcmIoMCksIFwidGhyb3dcIjogdmVyYigxKSwgXCJyZXR1cm5cIjogdmVyYigyKSB9LCB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgKGdbU3ltYm9sLml0ZXJhdG9yXSA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gdGhpczsgfSksIGc7XHJcbiAgICBmdW5jdGlvbiB2ZXJiKG4pIHsgcmV0dXJuIGZ1bmN0aW9uICh2KSB7IHJldHVybiBzdGVwKFtuLCB2XSk7IH07IH1cclxuICAgIGZ1bmN0aW9uIHN0ZXAob3ApIHtcclxuICAgICAgICBpZiAoZikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkdlbmVyYXRvciBpcyBhbHJlYWR5IGV4ZWN1dGluZy5cIik7XHJcbiAgICAgICAgd2hpbGUgKF8pIHRyeSB7XHJcbiAgICAgICAgICAgIGlmIChmID0gMSwgeSAmJiAodCA9IG9wWzBdICYgMiA/IHlbXCJyZXR1cm5cIl0gOiBvcFswXSA/IHlbXCJ0aHJvd1wiXSB8fCAoKHQgPSB5W1wicmV0dXJuXCJdKSAmJiB0LmNhbGwoeSksIDApIDogeS5uZXh0KSAmJiAhKHQgPSB0LmNhbGwoeSwgb3BbMV0pKS5kb25lKSByZXR1cm4gdDtcclxuICAgICAgICAgICAgaWYgKHkgPSAwLCB0KSBvcCA9IFtvcFswXSAmIDIsIHQudmFsdWVdO1xyXG4gICAgICAgICAgICBzd2l0Y2ggKG9wWzBdKSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDA6IGNhc2UgMTogdCA9IG9wOyBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgNDogXy5sYWJlbCsrOyByZXR1cm4geyB2YWx1ZTogb3BbMV0sIGRvbmU6IGZhbHNlIH07XHJcbiAgICAgICAgICAgICAgICBjYXNlIDU6IF8ubGFiZWwrKzsgeSA9IG9wWzFdOyBvcCA9IFswXTsgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDc6IG9wID0gXy5vcHMucG9wKCk7IF8udHJ5cy5wb3AoKTsgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgICAgIGlmICghKHQgPSBfLnRyeXMsIHQgPSB0Lmxlbmd0aCA+IDAgJiYgdFt0Lmxlbmd0aCAtIDFdKSAmJiAob3BbMF0gPT09IDYgfHwgb3BbMF0gPT09IDIpKSB7IF8gPSAwOyBjb250aW51ZTsgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChvcFswXSA9PT0gMyAmJiAoIXQgfHwgKG9wWzFdID4gdFswXSAmJiBvcFsxXSA8IHRbM10pKSkgeyBfLmxhYmVsID0gb3BbMV07IGJyZWFrOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wWzBdID09PSA2ICYmIF8ubGFiZWwgPCB0WzFdKSB7IF8ubGFiZWwgPSB0WzFdOyB0ID0gb3A7IGJyZWFrOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHQgJiYgXy5sYWJlbCA8IHRbMl0pIHsgXy5sYWJlbCA9IHRbMl07IF8ub3BzLnB1c2gob3ApOyBicmVhazsgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0WzJdKSBfLm9wcy5wb3AoKTtcclxuICAgICAgICAgICAgICAgICAgICBfLnRyeXMucG9wKCk7IGNvbnRpbnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIG9wID0gYm9keS5jYWxsKHRoaXNBcmcsIF8pO1xyXG4gICAgICAgIH0gY2F0Y2ggKGUpIHsgb3AgPSBbNiwgZV07IHkgPSAwOyB9IGZpbmFsbHkgeyBmID0gdCA9IDA7IH1cclxuICAgICAgICBpZiAob3BbMF0gJiA1KSB0aHJvdyBvcFsxXTsgcmV0dXJuIHsgdmFsdWU6IG9wWzBdID8gb3BbMV0gOiB2b2lkIDAsIGRvbmU6IHRydWUgfTtcclxuICAgIH1cclxufTtcclxuaW1wb3J0IHsgTG9nTGV2ZWwgfSBmcm9tIFwiLi9JTG9nZ2VyXCI7XHJcbmltcG9ydCB7IFRyYW5zZmVyRm9ybWF0IH0gZnJvbSBcIi4vSVRyYW5zcG9ydFwiO1xyXG5pbXBvcnQgeyBBcmcsIGdldERhdGFEZXRhaWwgfSBmcm9tIFwiLi9VdGlsc1wiO1xyXG4vKiogQHByaXZhdGUgKi9cclxudmFyIFdlYlNvY2tldFRyYW5zcG9ydCA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIFdlYlNvY2tldFRyYW5zcG9ydChodHRwQ2xpZW50LCBhY2Nlc3NUb2tlbkZhY3RvcnksIGxvZ2dlciwgbG9nTWVzc2FnZUNvbnRlbnQsIHdlYlNvY2tldENvbnN0cnVjdG9yKSB7XHJcbiAgICAgICAgdGhpcy5sb2dnZXIgPSBsb2dnZXI7XHJcbiAgICAgICAgdGhpcy5hY2Nlc3NUb2tlbkZhY3RvcnkgPSBhY2Nlc3NUb2tlbkZhY3Rvcnk7XHJcbiAgICAgICAgdGhpcy5sb2dNZXNzYWdlQ29udGVudCA9IGxvZ01lc3NhZ2VDb250ZW50O1xyXG4gICAgICAgIHRoaXMud2ViU29ja2V0Q29uc3RydWN0b3IgPSB3ZWJTb2NrZXRDb25zdHJ1Y3RvcjtcclxuICAgICAgICB0aGlzLmh0dHBDbGllbnQgPSBodHRwQ2xpZW50O1xyXG4gICAgICAgIHRoaXMub25yZWNlaXZlID0gbnVsbDtcclxuICAgICAgICB0aGlzLm9uY2xvc2UgPSBudWxsO1xyXG4gICAgfVxyXG4gICAgV2ViU29ja2V0VHJhbnNwb3J0LnByb3RvdHlwZS5jb25uZWN0ID0gZnVuY3Rpb24gKHVybCwgdHJhbnNmZXJGb3JtYXQpIHtcclxuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHZhciB0b2tlbjtcclxuICAgICAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICAgICAgcmV0dXJuIF9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYSkge1xyXG4gICAgICAgICAgICAgICAgc3dpdGNoIChfYS5sYWJlbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgQXJnLmlzUmVxdWlyZWQodXJsLCBcInVybFwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgQXJnLmlzUmVxdWlyZWQodHJhbnNmZXJGb3JtYXQsIFwidHJhbnNmZXJGb3JtYXRcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIEFyZy5pc0luKHRyYW5zZmVyRm9ybWF0LCBUcmFuc2ZlckZvcm1hdCwgXCJ0cmFuc2ZlckZvcm1hdFwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5sb2dnZXIubG9nKExvZ0xldmVsLlRyYWNlLCBcIihXZWJTb2NrZXRzIHRyYW5zcG9ydCkgQ29ubmVjdGluZy5cIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghdGhpcy5hY2Nlc3NUb2tlbkZhY3RvcnkpIHJldHVybiBbMyAvKmJyZWFrKi8sIDJdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCB0aGlzLmFjY2Vzc1Rva2VuRmFjdG9yeSgpXTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRva2VuID0gX2Euc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodG9rZW4pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVybCArPSAodXJsLmluZGV4T2YoXCI/XCIpIDwgMCA/IFwiP1wiIDogXCImXCIpICsgKFwiYWNjZXNzX3Rva2VuPVwiICsgZW5jb2RlVVJJQ29tcG9uZW50KHRva2VuKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgX2EubGFiZWwgPSAyO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMjogcmV0dXJuIFsyIC8qcmV0dXJuKi8sIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVybCA9IHVybC5yZXBsYWNlKC9eaHR0cC8sIFwid3NcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgd2ViU29ja2V0O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGNvb2tpZXMgPSBfdGhpcy5odHRwQ2xpZW50LmdldENvb2tpZVN0cmluZyh1cmwpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiB3aW5kb3cgPT09IFwidW5kZWZpbmVkXCIgJiYgY29va2llcykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIE9ubHkgcGFzcyBjb29raWVzIHdoZW4gaW4gbm9uLWJyb3dzZXIgZW52aXJvbm1lbnRzXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2ViU29ja2V0ID0gbmV3IF90aGlzLndlYlNvY2tldENvbnN0cnVjdG9yKHVybCwgdW5kZWZpbmVkLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhlYWRlcnM6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIENvb2tpZTogXCJcIiArIGNvb2tpZXMsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXdlYlNvY2tldCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIENocm9tZSBpcyBub3QgaGFwcHkgd2l0aCBwYXNzaW5nICd1bmRlZmluZWQnIGFzIHByb3RvY29sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2ViU29ja2V0ID0gbmV3IF90aGlzLndlYlNvY2tldENvbnN0cnVjdG9yKHVybCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodHJhbnNmZXJGb3JtYXQgPT09IFRyYW5zZmVyRm9ybWF0LkJpbmFyeSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdlYlNvY2tldC5iaW5hcnlUeXBlID0gXCJhcnJheWJ1ZmZlclwiO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOnZhcmlhYmxlLW5hbWVcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdlYlNvY2tldC5vbm9wZW4gPSBmdW5jdGlvbiAoX2V2ZW50KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMubG9nZ2VyLmxvZyhMb2dMZXZlbC5JbmZvcm1hdGlvbiwgXCJXZWJTb2NrZXQgY29ubmVjdGVkIHRvIFwiICsgdXJsICsgXCIuXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLndlYlNvY2tldCA9IHdlYlNvY2tldDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgd2ViU29ja2V0Lm9uZXJyb3IgPSBmdW5jdGlvbiAoZXZlbnQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZXJyb3IgPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEVycm9yRXZlbnQgaXMgYSBicm93c2VyIG9ubHkgdHlwZSB3ZSBuZWVkIHRvIGNoZWNrIGlmIHRoZSB0eXBlIGV4aXN0cyBiZWZvcmUgdXNpbmcgaXRcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIEVycm9yRXZlbnQgIT09IFwidW5kZWZpbmVkXCIgJiYgZXZlbnQgaW5zdGFuY2VvZiBFcnJvckV2ZW50KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVycm9yID0gZXZlbnQuZXJyb3I7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlamVjdChlcnJvcik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgd2ViU29ja2V0Lm9ubWVzc2FnZSA9IGZ1bmN0aW9uIChtZXNzYWdlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMubG9nZ2VyLmxvZyhMb2dMZXZlbC5UcmFjZSwgXCIoV2ViU29ja2V0cyB0cmFuc3BvcnQpIGRhdGEgcmVjZWl2ZWQuIFwiICsgZ2V0RGF0YURldGFpbChtZXNzYWdlLmRhdGEsIF90aGlzLmxvZ01lc3NhZ2VDb250ZW50KSArIFwiLlwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoX3RoaXMub25yZWNlaXZlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLm9ucmVjZWl2ZShtZXNzYWdlLmRhdGEpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3ZWJTb2NrZXQub25jbG9zZSA9IGZ1bmN0aW9uIChldmVudCkgeyByZXR1cm4gX3RoaXMuY2xvc2UoZXZlbnQpOyB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KV07XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIFdlYlNvY2tldFRyYW5zcG9ydC5wcm90b3R5cGUuc2VuZCA9IGZ1bmN0aW9uIChkYXRhKSB7XHJcbiAgICAgICAgaWYgKHRoaXMud2ViU29ja2V0ICYmIHRoaXMud2ViU29ja2V0LnJlYWR5U3RhdGUgPT09IHRoaXMud2ViU29ja2V0Q29uc3RydWN0b3IuT1BFTikge1xyXG4gICAgICAgICAgICB0aGlzLmxvZ2dlci5sb2coTG9nTGV2ZWwuVHJhY2UsIFwiKFdlYlNvY2tldHMgdHJhbnNwb3J0KSBzZW5kaW5nIGRhdGEuIFwiICsgZ2V0RGF0YURldGFpbChkYXRhLCB0aGlzLmxvZ01lc3NhZ2VDb250ZW50KSArIFwiLlwiKTtcclxuICAgICAgICAgICAgdGhpcy53ZWJTb2NrZXQuc2VuZChkYXRhKTtcclxuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoXCJXZWJTb2NrZXQgaXMgbm90IGluIHRoZSBPUEVOIHN0YXRlXCIpO1xyXG4gICAgfTtcclxuICAgIFdlYlNvY2tldFRyYW5zcG9ydC5wcm90b3R5cGUuc3RvcCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBpZiAodGhpcy53ZWJTb2NrZXQpIHtcclxuICAgICAgICAgICAgLy8gQ2xlYXIgd2Vic29ja2V0IGhhbmRsZXJzIGJlY2F1c2Ugd2UgYXJlIGNvbnNpZGVyaW5nIHRoZSBzb2NrZXQgY2xvc2VkIG5vd1xyXG4gICAgICAgICAgICB0aGlzLndlYlNvY2tldC5vbmNsb3NlID0gZnVuY3Rpb24gKCkgeyB9O1xyXG4gICAgICAgICAgICB0aGlzLndlYlNvY2tldC5vbm1lc3NhZ2UgPSBmdW5jdGlvbiAoKSB7IH07XHJcbiAgICAgICAgICAgIHRoaXMud2ViU29ja2V0Lm9uZXJyb3IgPSBmdW5jdGlvbiAoKSB7IH07XHJcbiAgICAgICAgICAgIHRoaXMud2ViU29ja2V0LmNsb3NlKCk7XHJcbiAgICAgICAgICAgIHRoaXMud2ViU29ja2V0ID0gdW5kZWZpbmVkO1xyXG4gICAgICAgICAgICAvLyBNYW51YWxseSBpbnZva2Ugb25jbG9zZSBjYWxsYmFjayBpbmxpbmUgc28gd2Uga25vdyB0aGUgSHR0cENvbm5lY3Rpb24gd2FzIGNsb3NlZCBwcm9wZXJseSBiZWZvcmUgcmV0dXJuaW5nXHJcbiAgICAgICAgICAgIC8vIFRoaXMgYWxzbyBzb2x2ZXMgYW4gaXNzdWUgd2hlcmUgd2Vic29ja2V0Lm9uY2xvc2UgY291bGQgdGFrZSAxOCsgc2Vjb25kcyB0byB0cmlnZ2VyIGR1cmluZyBuZXR3b3JrIGRpc2Nvbm5lY3RzXHJcbiAgICAgICAgICAgIHRoaXMuY2xvc2UodW5kZWZpbmVkKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpO1xyXG4gICAgfTtcclxuICAgIFdlYlNvY2tldFRyYW5zcG9ydC5wcm90b3R5cGUuY2xvc2UgPSBmdW5jdGlvbiAoZXZlbnQpIHtcclxuICAgICAgICAvLyB3ZWJTb2NrZXQgd2lsbCBiZSBudWxsIGlmIHRoZSB0cmFuc3BvcnQgZGlkIG5vdCBzdGFydCBzdWNjZXNzZnVsbHlcclxuICAgICAgICB0aGlzLmxvZ2dlci5sb2coTG9nTGV2ZWwuVHJhY2UsIFwiKFdlYlNvY2tldHMgdHJhbnNwb3J0KSBzb2NrZXQgY2xvc2VkLlwiKTtcclxuICAgICAgICBpZiAodGhpcy5vbmNsb3NlKSB7XHJcbiAgICAgICAgICAgIGlmIChldmVudCAmJiAoZXZlbnQud2FzQ2xlYW4gPT09IGZhbHNlIHx8IGV2ZW50LmNvZGUgIT09IDEwMDApKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm9uY2xvc2UobmV3IEVycm9yKFwiV2ViU29ja2V0IGNsb3NlZCB3aXRoIHN0YXR1cyBjb2RlOiBcIiArIGV2ZW50LmNvZGUgKyBcIiAoXCIgKyBldmVudC5yZWFzb24gKyBcIikuXCIpKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHRoaXMub25jbG9zZSgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIHJldHVybiBXZWJTb2NrZXRUcmFuc3BvcnQ7XHJcbn0oKSk7XHJcbmV4cG9ydCB7IFdlYlNvY2tldFRyYW5zcG9ydCB9O1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1XZWJTb2NrZXRUcmFuc3BvcnQuanMubWFwIiwiLy8gQ29weXJpZ2h0IChjKSAuTkVUIEZvdW5kYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAuIFNlZSBMaWNlbnNlLnR4dCBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxyXG52YXIgX19hd2FpdGVyID0gKHRoaXMgJiYgdGhpcy5fX2F3YWl0ZXIpIHx8IGZ1bmN0aW9uICh0aGlzQXJnLCBfYXJndW1lbnRzLCBQLCBnZW5lcmF0b3IpIHtcclxuICAgIHJldHVybiBuZXcgKFAgfHwgKFAgPSBQcm9taXNlKSkoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xyXG4gICAgICAgIGZ1bmN0aW9uIGZ1bGZpbGxlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvci5uZXh0KHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cclxuICAgICAgICBmdW5jdGlvbiByZWplY3RlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvcltcInRocm93XCJdKHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cclxuICAgICAgICBmdW5jdGlvbiBzdGVwKHJlc3VsdCkgeyByZXN1bHQuZG9uZSA/IHJlc29sdmUocmVzdWx0LnZhbHVlKSA6IG5ldyBQKGZ1bmN0aW9uIChyZXNvbHZlKSB7IHJlc29sdmUocmVzdWx0LnZhbHVlKTsgfSkudGhlbihmdWxmaWxsZWQsIHJlamVjdGVkKTsgfVxyXG4gICAgICAgIHN0ZXAoKGdlbmVyYXRvciA9IGdlbmVyYXRvci5hcHBseSh0aGlzQXJnLCBfYXJndW1lbnRzIHx8IFtdKSkubmV4dCgpKTtcclxuICAgIH0pO1xyXG59O1xyXG52YXIgX19nZW5lcmF0b3IgPSAodGhpcyAmJiB0aGlzLl9fZ2VuZXJhdG9yKSB8fCBmdW5jdGlvbiAodGhpc0FyZywgYm9keSkge1xyXG4gICAgdmFyIF8gPSB7IGxhYmVsOiAwLCBzZW50OiBmdW5jdGlvbigpIHsgaWYgKHRbMF0gJiAxKSB0aHJvdyB0WzFdOyByZXR1cm4gdFsxXTsgfSwgdHJ5czogW10sIG9wczogW10gfSwgZiwgeSwgdCwgZztcclxuICAgIHJldHVybiBnID0geyBuZXh0OiB2ZXJiKDApLCBcInRocm93XCI6IHZlcmIoMSksIFwicmV0dXJuXCI6IHZlcmIoMikgfSwgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIChnW1N5bWJvbC5pdGVyYXRvcl0gPSBmdW5jdGlvbigpIHsgcmV0dXJuIHRoaXM7IH0pLCBnO1xyXG4gICAgZnVuY3Rpb24gdmVyYihuKSB7IHJldHVybiBmdW5jdGlvbiAodikgeyByZXR1cm4gc3RlcChbbiwgdl0pOyB9OyB9XHJcbiAgICBmdW5jdGlvbiBzdGVwKG9wKSB7XHJcbiAgICAgICAgaWYgKGYpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJHZW5lcmF0b3IgaXMgYWxyZWFkeSBleGVjdXRpbmcuXCIpO1xyXG4gICAgICAgIHdoaWxlIChfKSB0cnkge1xyXG4gICAgICAgICAgICBpZiAoZiA9IDEsIHkgJiYgKHQgPSBvcFswXSAmIDIgPyB5W1wicmV0dXJuXCJdIDogb3BbMF0gPyB5W1widGhyb3dcIl0gfHwgKCh0ID0geVtcInJldHVyblwiXSkgJiYgdC5jYWxsKHkpLCAwKSA6IHkubmV4dCkgJiYgISh0ID0gdC5jYWxsKHksIG9wWzFdKSkuZG9uZSkgcmV0dXJuIHQ7XHJcbiAgICAgICAgICAgIGlmICh5ID0gMCwgdCkgb3AgPSBbb3BbMF0gJiAyLCB0LnZhbHVlXTtcclxuICAgICAgICAgICAgc3dpdGNoIChvcFswXSkge1xyXG4gICAgICAgICAgICAgICAgY2FzZSAwOiBjYXNlIDE6IHQgPSBvcDsgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDQ6IF8ubGFiZWwrKzsgcmV0dXJuIHsgdmFsdWU6IG9wWzFdLCBkb25lOiBmYWxzZSB9O1xyXG4gICAgICAgICAgICAgICAgY2FzZSA1OiBfLmxhYmVsKys7IHkgPSBvcFsxXTsgb3AgPSBbMF07IGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgY2FzZSA3OiBvcCA9IF8ub3BzLnBvcCgpOyBfLnRyeXMucG9wKCk7IGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgICAgICBpZiAoISh0ID0gXy50cnlzLCB0ID0gdC5sZW5ndGggPiAwICYmIHRbdC5sZW5ndGggLSAxXSkgJiYgKG9wWzBdID09PSA2IHx8IG9wWzBdID09PSAyKSkgeyBfID0gMDsgY29udGludWU7IH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAob3BbMF0gPT09IDMgJiYgKCF0IHx8IChvcFsxXSA+IHRbMF0gJiYgb3BbMV0gPCB0WzNdKSkpIHsgXy5sYWJlbCA9IG9wWzFdOyBicmVhazsgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChvcFswXSA9PT0gNiAmJiBfLmxhYmVsIDwgdFsxXSkgeyBfLmxhYmVsID0gdFsxXTsgdCA9IG9wOyBicmVhazsgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0ICYmIF8ubGFiZWwgPCB0WzJdKSB7IF8ubGFiZWwgPSB0WzJdOyBfLm9wcy5wdXNoKG9wKTsgYnJlYWs7IH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAodFsyXSkgXy5vcHMucG9wKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgXy50cnlzLnBvcCgpOyBjb250aW51ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBvcCA9IGJvZHkuY2FsbCh0aGlzQXJnLCBfKTtcclxuICAgICAgICB9IGNhdGNoIChlKSB7IG9wID0gWzYsIGVdOyB5ID0gMDsgfSBmaW5hbGx5IHsgZiA9IHQgPSAwOyB9XHJcbiAgICAgICAgaWYgKG9wWzBdICYgNSkgdGhyb3cgb3BbMV07IHJldHVybiB7IHZhbHVlOiBvcFswXSA/IG9wWzFdIDogdm9pZCAwLCBkb25lOiB0cnVlIH07XHJcbiAgICB9XHJcbn07XHJcbmltcG9ydCB7IERlZmF1bHRIdHRwQ2xpZW50IH0gZnJvbSBcIi4vRGVmYXVsdEh0dHBDbGllbnRcIjtcclxuaW1wb3J0IHsgTG9nTGV2ZWwgfSBmcm9tIFwiLi9JTG9nZ2VyXCI7XHJcbmltcG9ydCB7IEh0dHBUcmFuc3BvcnRUeXBlLCBUcmFuc2ZlckZvcm1hdCB9IGZyb20gXCIuL0lUcmFuc3BvcnRcIjtcclxuaW1wb3J0IHsgTG9uZ1BvbGxpbmdUcmFuc3BvcnQgfSBmcm9tIFwiLi9Mb25nUG9sbGluZ1RyYW5zcG9ydFwiO1xyXG5pbXBvcnQgeyBTZXJ2ZXJTZW50RXZlbnRzVHJhbnNwb3J0IH0gZnJvbSBcIi4vU2VydmVyU2VudEV2ZW50c1RyYW5zcG9ydFwiO1xyXG5pbXBvcnQgeyBBcmcsIGNyZWF0ZUxvZ2dlciB9IGZyb20gXCIuL1V0aWxzXCI7XHJcbmltcG9ydCB7IFdlYlNvY2tldFRyYW5zcG9ydCB9IGZyb20gXCIuL1dlYlNvY2tldFRyYW5zcG9ydFwiO1xyXG52YXIgTUFYX1JFRElSRUNUUyA9IDEwMDtcclxudmFyIFdlYlNvY2tldE1vZHVsZSA9IG51bGw7XHJcbnZhciBFdmVudFNvdXJjZU1vZHVsZSA9IG51bGw7XHJcbmlmICh0eXBlb2Ygd2luZG93ID09PSBcInVuZGVmaW5lZFwiICYmIHR5cGVvZiByZXF1aXJlICE9PSBcInVuZGVmaW5lZFwiKSB7XHJcbiAgICAvLyBJbiBvcmRlciB0byBpZ25vcmUgdGhlIGR5bmFtaWMgcmVxdWlyZSBpbiB3ZWJwYWNrIGJ1aWxkcyB3ZSBuZWVkIHRvIGRvIHRoaXMgbWFnaWNcclxuICAgIC8vIEB0cy1pZ25vcmU6IFRTIGRvZXNuJ3Qga25vdyBhYm91dCB0aGVzZSBuYW1lc1xyXG4gICAgdmFyIHJlcXVpcmVGdW5jID0gdHlwZW9mIF9fd2VicGFja19yZXF1aXJlX18gPT09IFwiZnVuY3Rpb25cIiA/IF9fbm9uX3dlYnBhY2tfcmVxdWlyZV9fIDogcmVxdWlyZTtcclxuICAgIFdlYlNvY2tldE1vZHVsZSA9IHJlcXVpcmVGdW5jKFwid3NcIik7XHJcbiAgICBFdmVudFNvdXJjZU1vZHVsZSA9IHJlcXVpcmVGdW5jKFwiZXZlbnRzb3VyY2VcIik7XHJcbn1cclxuLyoqIEBwcml2YXRlICovXHJcbnZhciBIdHRwQ29ubmVjdGlvbiA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIEh0dHBDb25uZWN0aW9uKHVybCwgb3B0aW9ucykge1xyXG4gICAgICAgIGlmIChvcHRpb25zID09PSB2b2lkIDApIHsgb3B0aW9ucyA9IHt9OyB9XHJcbiAgICAgICAgdGhpcy5mZWF0dXJlcyA9IHt9O1xyXG4gICAgICAgIEFyZy5pc1JlcXVpcmVkKHVybCwgXCJ1cmxcIik7XHJcbiAgICAgICAgdGhpcy5sb2dnZXIgPSBjcmVhdGVMb2dnZXIob3B0aW9ucy5sb2dnZXIpO1xyXG4gICAgICAgIHRoaXMuYmFzZVVybCA9IHRoaXMucmVzb2x2ZVVybCh1cmwpO1xyXG4gICAgICAgIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xyXG4gICAgICAgIG9wdGlvbnMubG9nTWVzc2FnZUNvbnRlbnQgPSBvcHRpb25zLmxvZ01lc3NhZ2VDb250ZW50IHx8IGZhbHNlO1xyXG4gICAgICAgIHZhciBpc05vZGUgPSB0eXBlb2Ygd2luZG93ID09PSBcInVuZGVmaW5lZFwiO1xyXG4gICAgICAgIGlmICghaXNOb2RlICYmIHR5cGVvZiBXZWJTb2NrZXQgIT09IFwidW5kZWZpbmVkXCIgJiYgIW9wdGlvbnMuV2ViU29ja2V0KSB7XHJcbiAgICAgICAgICAgIG9wdGlvbnMuV2ViU29ja2V0ID0gV2ViU29ja2V0O1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmIChpc05vZGUgJiYgIW9wdGlvbnMuV2ViU29ja2V0KSB7XHJcbiAgICAgICAgICAgIGlmIChXZWJTb2NrZXRNb2R1bGUpIHtcclxuICAgICAgICAgICAgICAgIG9wdGlvbnMuV2ViU29ja2V0ID0gV2ViU29ja2V0TW9kdWxlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICghaXNOb2RlICYmIHR5cGVvZiBFdmVudFNvdXJjZSAhPT0gXCJ1bmRlZmluZWRcIiAmJiAhb3B0aW9ucy5FdmVudFNvdXJjZSkge1xyXG4gICAgICAgICAgICBvcHRpb25zLkV2ZW50U291cmNlID0gRXZlbnRTb3VyY2U7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKGlzTm9kZSAmJiAhb3B0aW9ucy5FdmVudFNvdXJjZSkge1xyXG4gICAgICAgICAgICBpZiAodHlwZW9mIEV2ZW50U291cmNlTW9kdWxlICE9PSBcInVuZGVmaW5lZFwiKSB7XHJcbiAgICAgICAgICAgICAgICBvcHRpb25zLkV2ZW50U291cmNlID0gRXZlbnRTb3VyY2VNb2R1bGU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5odHRwQ2xpZW50ID0gb3B0aW9ucy5odHRwQ2xpZW50IHx8IG5ldyBEZWZhdWx0SHR0cENsaWVudCh0aGlzLmxvZ2dlcik7XHJcbiAgICAgICAgdGhpcy5jb25uZWN0aW9uU3RhdGUgPSAyIC8qIERpc2Nvbm5lY3RlZCAqLztcclxuICAgICAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xyXG4gICAgICAgIHRoaXMub25yZWNlaXZlID0gbnVsbDtcclxuICAgICAgICB0aGlzLm9uY2xvc2UgPSBudWxsO1xyXG4gICAgfVxyXG4gICAgSHR0cENvbm5lY3Rpb24ucHJvdG90eXBlLnN0YXJ0ID0gZnVuY3Rpb24gKHRyYW5zZmVyRm9ybWF0KSB7XHJcbiAgICAgICAgdHJhbnNmZXJGb3JtYXQgPSB0cmFuc2ZlckZvcm1hdCB8fCBUcmFuc2ZlckZvcm1hdC5CaW5hcnk7XHJcbiAgICAgICAgQXJnLmlzSW4odHJhbnNmZXJGb3JtYXQsIFRyYW5zZmVyRm9ybWF0LCBcInRyYW5zZmVyRm9ybWF0XCIpO1xyXG4gICAgICAgIHRoaXMubG9nZ2VyLmxvZyhMb2dMZXZlbC5EZWJ1ZywgXCJTdGFydGluZyBjb25uZWN0aW9uIHdpdGggdHJhbnNmZXIgZm9ybWF0ICdcIiArIFRyYW5zZmVyRm9ybWF0W3RyYW5zZmVyRm9ybWF0XSArIFwiJy5cIik7XHJcbiAgICAgICAgaWYgKHRoaXMuY29ubmVjdGlvblN0YXRlICE9PSAyIC8qIERpc2Nvbm5lY3RlZCAqLykge1xyXG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QobmV3IEVycm9yKFwiQ2Fubm90IHN0YXJ0IGEgY29ubmVjdGlvbiB0aGF0IGlzIG5vdCBpbiB0aGUgJ0Rpc2Nvbm5lY3RlZCcgc3RhdGUuXCIpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5jb25uZWN0aW9uU3RhdGUgPSAwIC8qIENvbm5lY3RpbmcgKi87XHJcbiAgICAgICAgdGhpcy5zdGFydFByb21pc2UgPSB0aGlzLnN0YXJ0SW50ZXJuYWwodHJhbnNmZXJGb3JtYXQpO1xyXG4gICAgICAgIHJldHVybiB0aGlzLnN0YXJ0UHJvbWlzZTtcclxuICAgIH07XHJcbiAgICBIdHRwQ29ubmVjdGlvbi5wcm90b3R5cGUuc2VuZCA9IGZ1bmN0aW9uIChkYXRhKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuY29ubmVjdGlvblN0YXRlICE9PSAxIC8qIENvbm5lY3RlZCAqLykge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJDYW5ub3Qgc2VuZCBkYXRhIGlmIHRoZSBjb25uZWN0aW9uIGlzIG5vdCBpbiB0aGUgJ0Nvbm5lY3RlZCcgU3RhdGUuXCIpO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBUcmFuc3BvcnQgd2lsbCBub3QgYmUgbnVsbCBpZiBzdGF0ZSBpcyBjb25uZWN0ZWRcclxuICAgICAgICByZXR1cm4gdGhpcy50cmFuc3BvcnQuc2VuZChkYXRhKTtcclxuICAgIH07XHJcbiAgICBIdHRwQ29ubmVjdGlvbi5wcm90b3R5cGUuc3RvcCA9IGZ1bmN0aW9uIChlcnJvcikge1xyXG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdmFyIGVfMTtcclxuICAgICAgICAgICAgcmV0dXJuIF9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYSkge1xyXG4gICAgICAgICAgICAgICAgc3dpdGNoIChfYS5sYWJlbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jb25uZWN0aW9uU3RhdGUgPSAyIC8qIERpc2Nvbm5lY3RlZCAqLztcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gU2V0IGVycm9yIGFzIHNvb24gYXMgcG9zc2libGUgb3RoZXJ3aXNlIHRoZXJlIGlzIGEgcmFjZSBiZXR3ZWVuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHRoZSB0cmFuc3BvcnQgY2xvc2luZyBhbmQgcHJvdmlkaW5nIGFuIGVycm9yIGFuZCB0aGUgZXJyb3IgZnJvbSBhIGNsb3NlIG1lc3NhZ2VcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gV2Ugd291bGQgcHJlZmVyIHRoZSBjbG9zZSBtZXNzYWdlIGVycm9yLlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnN0b3BFcnJvciA9IGVycm9yO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBfYS5sYWJlbCA9IDE7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBfYS50cnlzLnB1c2goWzEsIDMsICwgNF0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCB0aGlzLnN0YXJ0UHJvbWlzZV07XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAyOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBfYS5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMyAvKmJyZWFrKi8sIDRdO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMzpcclxuICAgICAgICAgICAgICAgICAgICAgICAgZV8xID0gX2Euc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzMgLypicmVhayovLCA0XTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDQ6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghdGhpcy50cmFuc3BvcnQpIHJldHVybiBbMyAvKmJyZWFrKi8sIDZdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCB0aGlzLnRyYW5zcG9ydC5zdG9wKCldO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNTpcclxuICAgICAgICAgICAgICAgICAgICAgICAgX2Euc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnRyYW5zcG9ydCA9IHVuZGVmaW5lZDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgX2EubGFiZWwgPSA2O1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNjogcmV0dXJuIFsyIC8qcmV0dXJuKi9dO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICBIdHRwQ29ubmVjdGlvbi5wcm90b3R5cGUuc3RhcnRJbnRlcm5hbCA9IGZ1bmN0aW9uICh0cmFuc2ZlckZvcm1hdCkge1xyXG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdmFyIHVybCwgbmVnb3RpYXRlUmVzcG9uc2UsIHJlZGlyZWN0cywgX2xvb3BfMSwgdGhpc18xLCBzdGF0ZV8xLCBlXzI7XHJcbiAgICAgICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2EpIHtcclxuICAgICAgICAgICAgICAgIHN3aXRjaCAoX2EubGFiZWwpIHtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDA6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHVybCA9IHRoaXMuYmFzZVVybDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5hY2Nlc3NUb2tlbkZhY3RvcnkgPSB0aGlzLm9wdGlvbnMuYWNjZXNzVG9rZW5GYWN0b3J5O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBfYS5sYWJlbCA9IDE7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBfYS50cnlzLnB1c2goWzEsIDEyLCAsIDEzXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghdGhpcy5vcHRpb25zLnNraXBOZWdvdGlhdGlvbikgcmV0dXJuIFszIC8qYnJlYWsqLywgNV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghKHRoaXMub3B0aW9ucy50cmFuc3BvcnQgPT09IEh0dHBUcmFuc3BvcnRUeXBlLldlYlNvY2tldHMpKSByZXR1cm4gWzMgLypicmVhayovLCAzXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gTm8gbmVlZCB0byBhZGQgYSBjb25uZWN0aW9uIElEIGluIHRoaXMgY2FzZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnRyYW5zcG9ydCA9IHRoaXMuY29uc3RydWN0VHJhbnNwb3J0KEh0dHBUcmFuc3BvcnRUeXBlLldlYlNvY2tldHMpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBXZSBzaG91bGQganVzdCBjYWxsIGNvbm5lY3QgZGlyZWN0bHkgaW4gdGhpcyBjYXNlLlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBObyBmYWxsYmFjayBvciBuZWdvdGlhdGUgaW4gdGhpcyBjYXNlLlxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCB0aGlzLnRyYW5zcG9ydC5jb25uZWN0KHVybCwgdHJhbnNmZXJGb3JtYXQpXTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDI6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFdlIHNob3VsZCBqdXN0IGNhbGwgY29ubmVjdCBkaXJlY3RseSBpbiB0aGlzIGNhc2UuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIE5vIGZhbGxiYWNrIG9yIG5lZ290aWF0ZSBpbiB0aGlzIGNhc2UuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9hLnNlbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFszIC8qYnJlYWsqLywgNF07XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAzOiB0aHJvdyBFcnJvcihcIk5lZ290aWF0aW9uIGNhbiBvbmx5IGJlIHNraXBwZWQgd2hlbiB1c2luZyB0aGUgV2ViU29ja2V0IHRyYW5zcG9ydCBkaXJlY3RseS5cIik7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA0OiByZXR1cm4gWzMgLypicmVhayovLCAxMV07XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA1OlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBuZWdvdGlhdGVSZXNwb25zZSA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlZGlyZWN0cyA9IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9sb29wXzEgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgYWNjZXNzVG9rZW5fMTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2EpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKF9hLmxhYmVsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMDogcmV0dXJuIFs0IC8qeWllbGQqLywgdGhpc18xLmdldE5lZ290aWF0aW9uUmVzcG9uc2UodXJsKV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5lZ290aWF0ZVJlc3BvbnNlID0gX2Euc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gdGhlIHVzZXIgdHJpZXMgdG8gc3RvcCB0aGUgY29ubmVjdGlvbiB3aGVuIGl0IGlzIGJlaW5nIHN0YXJ0ZWRcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzXzEuY29ubmVjdGlvblN0YXRlID09PSAyIC8qIERpc2Nvbm5lY3RlZCAqLykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovLCB7IHZhbHVlOiB2b2lkIDAgfV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobmVnb3RpYXRlUmVzcG9uc2UuZXJyb3IpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBFcnJvcihuZWdvdGlhdGVSZXNwb25zZS5lcnJvcik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobmVnb3RpYXRlUmVzcG9uc2UuUHJvdG9jb2xWZXJzaW9uKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgRXJyb3IoXCJEZXRlY3RlZCBhIGNvbm5lY3Rpb24gYXR0ZW1wdCB0byBhbiBBU1AuTkVUIFNpZ25hbFIgU2VydmVyLiBUaGlzIGNsaWVudCBvbmx5IHN1cHBvcnRzIGNvbm5lY3RpbmcgdG8gYW4gQVNQLk5FVCBDb3JlIFNpZ25hbFIgU2VydmVyLiBTZWUgaHR0cHM6Ly9ha2EubXMvc2lnbmFsci1jb3JlLWRpZmZlcmVuY2VzIGZvciBkZXRhaWxzLlwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChuZWdvdGlhdGVSZXNwb25zZS51cmwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1cmwgPSBuZWdvdGlhdGVSZXNwb25zZS51cmw7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobmVnb3RpYXRlUmVzcG9uc2UuYWNjZXNzVG9rZW4pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhY2Nlc3NUb2tlbl8xID0gbmVnb3RpYXRlUmVzcG9uc2UuYWNjZXNzVG9rZW47XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpc18xLmFjY2Vzc1Rva2VuRmFjdG9yeSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGFjY2Vzc1Rva2VuXzE7IH07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWRpcmVjdHMrKztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpc18xID0gdGhpcztcclxuICAgICAgICAgICAgICAgICAgICAgICAgX2EubGFiZWwgPSA2O1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNjogcmV0dXJuIFs1IC8qeWllbGQqKi8sIF9sb29wXzEoKV07XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA3OlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzdGF0ZV8xID0gX2Euc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHN0YXRlXzEgPT09IFwib2JqZWN0XCIpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qLywgc3RhdGVfMS52YWx1ZV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9hLmxhYmVsID0gODtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDg6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChuZWdvdGlhdGVSZXNwb25zZS51cmwgJiYgcmVkaXJlY3RzIDwgTUFYX1JFRElSRUNUUykgcmV0dXJuIFszIC8qYnJlYWsqLywgNl07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9hLmxhYmVsID0gOTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDk6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZWRpcmVjdHMgPT09IE1BWF9SRURJUkVDVFMgJiYgbmVnb3RpYXRlUmVzcG9uc2UudXJsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBFcnJvcihcIk5lZ290aWF0ZSByZWRpcmVjdGlvbiBsaW1pdCBleGNlZWRlZC5cIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgdGhpcy5jcmVhdGVUcmFuc3BvcnQodXJsLCB0aGlzLm9wdGlvbnMudHJhbnNwb3J0LCBuZWdvdGlhdGVSZXNwb25zZSwgdHJhbnNmZXJGb3JtYXQpXTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDEwOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBfYS5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9hLmxhYmVsID0gMTE7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxMTpcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMudHJhbnNwb3J0IGluc3RhbmNlb2YgTG9uZ1BvbGxpbmdUcmFuc3BvcnQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZmVhdHVyZXMuaW5oZXJlbnRLZWVwQWxpdmUgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudHJhbnNwb3J0Lm9ucmVjZWl2ZSA9IHRoaXMub25yZWNlaXZlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnRyYW5zcG9ydC5vbmNsb3NlID0gZnVuY3Rpb24gKGUpIHsgcmV0dXJuIF90aGlzLnN0b3BDb25uZWN0aW9uKGUpOyB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBvbmx5IGNoYW5nZSB0aGUgc3RhdGUgaWYgd2Ugd2VyZSBjb25uZWN0aW5nIHRvIG5vdCBvdmVyd3JpdGVcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gdGhlIHN0YXRlIGlmIHRoZSBjb25uZWN0aW9uIGlzIGFscmVhZHkgbWFya2VkIGFzIERpc2Nvbm5lY3RlZFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNoYW5nZVN0YXRlKDAgLyogQ29ubmVjdGluZyAqLywgMSAvKiBDb25uZWN0ZWQgKi8pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzMgLypicmVhayovLCAxM107XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxMjpcclxuICAgICAgICAgICAgICAgICAgICAgICAgZV8yID0gX2Euc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmxvZ2dlci5sb2coTG9nTGV2ZWwuRXJyb3IsIFwiRmFpbGVkIHRvIHN0YXJ0IHRoZSBjb25uZWN0aW9uOiBcIiArIGVfMik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY29ubmVjdGlvblN0YXRlID0gMiAvKiBEaXNjb25uZWN0ZWQgKi87XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudHJhbnNwb3J0ID0gdW5kZWZpbmVkO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBlXzI7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxMzogcmV0dXJuIFsyIC8qcmV0dXJuKi9dO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICBIdHRwQ29ubmVjdGlvbi5wcm90b3R5cGUuZ2V0TmVnb3RpYXRpb25SZXNwb25zZSA9IGZ1bmN0aW9uICh1cmwpIHtcclxuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHZhciBfYSwgaGVhZGVycywgdG9rZW4sIG5lZ290aWF0ZVVybCwgcmVzcG9uc2UsIGVfMztcclxuICAgICAgICAgICAgcmV0dXJuIF9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYikge1xyXG4gICAgICAgICAgICAgICAgc3dpdGNoIChfYi5sYWJlbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCF0aGlzLmFjY2Vzc1Rva2VuRmFjdG9yeSkgcmV0dXJuIFszIC8qYnJlYWsqLywgMl07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIHRoaXMuYWNjZXNzVG9rZW5GYWN0b3J5KCldO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcclxuICAgICAgICAgICAgICAgICAgICAgICAgdG9rZW4gPSBfYi5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0b2tlbikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaGVhZGVycyA9IChfYSA9IHt9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9hW1wiQXV0aG9yaXphdGlvblwiXSA9IFwiQmVhcmVyIFwiICsgdG9rZW4sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX2EpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9iLmxhYmVsID0gMjtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDI6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5lZ290aWF0ZVVybCA9IHRoaXMucmVzb2x2ZU5lZ290aWF0ZVVybCh1cmwpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmxvZ2dlci5sb2coTG9nTGV2ZWwuRGVidWcsIFwiU2VuZGluZyBuZWdvdGlhdGlvbiByZXF1ZXN0OiBcIiArIG5lZ290aWF0ZVVybCArIFwiLlwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgX2IubGFiZWwgPSAzO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMzpcclxuICAgICAgICAgICAgICAgICAgICAgICAgX2IudHJ5cy5wdXNoKFszLCA1LCAsIDZdKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgdGhpcy5odHRwQ2xpZW50LnBvc3QobmVnb3RpYXRlVXJsLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGVudDogXCJcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoZWFkZXJzOiBoZWFkZXJzLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSldO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzcG9uc2UgPSBfYi5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZXNwb25zZS5zdGF0dXNDb2RlICE9PSAyMDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IEVycm9yKFwiVW5leHBlY3RlZCBzdGF0dXMgY29kZSByZXR1cm5lZCBmcm9tIG5lZ290aWF0ZSBcIiArIHJlc3BvbnNlLnN0YXR1c0NvZGUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovLCBKU09OLnBhcnNlKHJlc3BvbnNlLmNvbnRlbnQpXTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDU6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVfMyA9IF9iLnNlbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5sb2dnZXIubG9nKExvZ0xldmVsLkVycm9yLCBcIkZhaWxlZCB0byBjb21wbGV0ZSBuZWdvdGlhdGlvbiB3aXRoIHRoZSBzZXJ2ZXI6IFwiICsgZV8zKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgZV8zO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNjogcmV0dXJuIFsyIC8qcmV0dXJuKi9dO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICBIdHRwQ29ubmVjdGlvbi5wcm90b3R5cGUuY3JlYXRlQ29ubmVjdFVybCA9IGZ1bmN0aW9uICh1cmwsIGNvbm5lY3Rpb25JZCkge1xyXG4gICAgICAgIGlmICghY29ubmVjdGlvbklkKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB1cmw7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB1cmwgKyAodXJsLmluZGV4T2YoXCI/XCIpID09PSAtMSA/IFwiP1wiIDogXCImXCIpICsgKFwiaWQ9XCIgKyBjb25uZWN0aW9uSWQpO1xyXG4gICAgfTtcclxuICAgIEh0dHBDb25uZWN0aW9uLnByb3RvdHlwZS5jcmVhdGVUcmFuc3BvcnQgPSBmdW5jdGlvbiAodXJsLCByZXF1ZXN0ZWRUcmFuc3BvcnQsIG5lZ290aWF0ZVJlc3BvbnNlLCByZXF1ZXN0ZWRUcmFuc2ZlckZvcm1hdCkge1xyXG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdmFyIGNvbm5lY3RVcmwsIHRyYW5zcG9ydHMsIF9pLCB0cmFuc3BvcnRzXzEsIGVuZHBvaW50LCB0cmFuc3BvcnQsIGV4XzE7XHJcbiAgICAgICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2EpIHtcclxuICAgICAgICAgICAgICAgIHN3aXRjaCAoX2EubGFiZWwpIHtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDA6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbm5lY3RVcmwgPSB0aGlzLmNyZWF0ZUNvbm5lY3RVcmwodXJsLCBuZWdvdGlhdGVSZXNwb25zZS5jb25uZWN0aW9uSWQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXRoaXMuaXNJVHJhbnNwb3J0KHJlcXVlc3RlZFRyYW5zcG9ydCkpIHJldHVybiBbMyAvKmJyZWFrKi8sIDJdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmxvZ2dlci5sb2coTG9nTGV2ZWwuRGVidWcsIFwiQ29ubmVjdGlvbiB3YXMgcHJvdmlkZWQgYW4gaW5zdGFuY2Ugb2YgSVRyYW5zcG9ydCwgdXNpbmcgdGhhdCBkaXJlY3RseS5cIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudHJhbnNwb3J0ID0gcmVxdWVzdGVkVHJhbnNwb3J0O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCB0aGlzLnRyYW5zcG9ydC5jb25uZWN0KGNvbm5lY3RVcmwsIHJlcXVlc3RlZFRyYW5zZmVyRm9ybWF0KV07XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBfYS5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIG9ubHkgY2hhbmdlIHRoZSBzdGF0ZSBpZiB3ZSB3ZXJlIGNvbm5lY3RpbmcgdG8gbm90IG92ZXJ3cml0ZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyB0aGUgc3RhdGUgaWYgdGhlIGNvbm5lY3Rpb24gaXMgYWxyZWFkeSBtYXJrZWQgYXMgRGlzY29ubmVjdGVkXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY2hhbmdlU3RhdGUoMCAvKiBDb25uZWN0aW5nICovLCAxIC8qIENvbm5lY3RlZCAqLyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovXTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDI6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRyYW5zcG9ydHMgPSBuZWdvdGlhdGVSZXNwb25zZS5hdmFpbGFibGVUcmFuc3BvcnRzIHx8IFtdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBfaSA9IDAsIHRyYW5zcG9ydHNfMSA9IHRyYW5zcG9ydHM7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9hLmxhYmVsID0gMztcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDM6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghKF9pIDwgdHJhbnNwb3J0c18xLmxlbmd0aCkpIHJldHVybiBbMyAvKmJyZWFrKi8sIDldO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbmRwb2ludCA9IHRyYW5zcG9ydHNfMVtfaV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY29ubmVjdGlvblN0YXRlID0gMCAvKiBDb25uZWN0aW5nICovO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0cmFuc3BvcnQgPSB0aGlzLnJlc29sdmVUcmFuc3BvcnQoZW5kcG9pbnQsIHJlcXVlc3RlZFRyYW5zcG9ydCwgcmVxdWVzdGVkVHJhbnNmZXJGb3JtYXQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoISh0eXBlb2YgdHJhbnNwb3J0ID09PSBcIm51bWJlclwiKSkgcmV0dXJuIFszIC8qYnJlYWsqLywgOF07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudHJhbnNwb3J0ID0gdGhpcy5jb25zdHJ1Y3RUcmFuc3BvcnQodHJhbnNwb3J0KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCEhbmVnb3RpYXRlUmVzcG9uc2UuY29ubmVjdGlvbklkKSByZXR1cm4gWzMgLypicmVhayovLCA1XTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgdGhpcy5nZXROZWdvdGlhdGlvblJlc3BvbnNlKHVybCldO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgbmVnb3RpYXRlUmVzcG9uc2UgPSBfYS5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbm5lY3RVcmwgPSB0aGlzLmNyZWF0ZUNvbm5lY3RVcmwodXJsLCBuZWdvdGlhdGVSZXNwb25zZS5jb25uZWN0aW9uSWQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBfYS5sYWJlbCA9IDU7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA1OlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBfYS50cnlzLnB1c2goWzUsIDcsICwgOF0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCB0aGlzLnRyYW5zcG9ydC5jb25uZWN0KGNvbm5lY3RVcmwsIHJlcXVlc3RlZFRyYW5zZmVyRm9ybWF0KV07XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA2OlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBfYS5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY2hhbmdlU3RhdGUoMCAvKiBDb25uZWN0aW5nICovLCAxIC8qIENvbm5lY3RlZCAqLyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovXTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDc6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGV4XzEgPSBfYS5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubG9nZ2VyLmxvZyhMb2dMZXZlbC5FcnJvciwgXCJGYWlsZWQgdG8gc3RhcnQgdGhlIHRyYW5zcG9ydCAnXCIgKyBIdHRwVHJhbnNwb3J0VHlwZVt0cmFuc3BvcnRdICsgXCInOiBcIiArIGV4XzEpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbm5lY3Rpb25TdGF0ZSA9IDIgLyogRGlzY29ubmVjdGVkICovO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBuZWdvdGlhdGVSZXNwb25zZS5jb25uZWN0aW9uSWQgPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMyAvKmJyZWFrKi8sIDhdO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgODpcclxuICAgICAgICAgICAgICAgICAgICAgICAgX2krKztcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFszIC8qYnJlYWsqLywgM107XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA5OiB0aHJvdyBuZXcgRXJyb3IoXCJVbmFibGUgdG8gaW5pdGlhbGl6ZSBhbnkgb2YgdGhlIGF2YWlsYWJsZSB0cmFuc3BvcnRzLlwiKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgSHR0cENvbm5lY3Rpb24ucHJvdG90eXBlLmNvbnN0cnVjdFRyYW5zcG9ydCA9IGZ1bmN0aW9uICh0cmFuc3BvcnQpIHtcclxuICAgICAgICBzd2l0Y2ggKHRyYW5zcG9ydCkge1xyXG4gICAgICAgICAgICBjYXNlIEh0dHBUcmFuc3BvcnRUeXBlLldlYlNvY2tldHM6XHJcbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMub3B0aW9ucy5XZWJTb2NrZXQpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCInV2ViU29ja2V0JyBpcyBub3Qgc3VwcG9ydGVkIGluIHlvdXIgZW52aXJvbm1lbnQuXCIpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBXZWJTb2NrZXRUcmFuc3BvcnQodGhpcy5odHRwQ2xpZW50LCB0aGlzLmFjY2Vzc1Rva2VuRmFjdG9yeSwgdGhpcy5sb2dnZXIsIHRoaXMub3B0aW9ucy5sb2dNZXNzYWdlQ29udGVudCB8fCBmYWxzZSwgdGhpcy5vcHRpb25zLldlYlNvY2tldCk7XHJcbiAgICAgICAgICAgIGNhc2UgSHR0cFRyYW5zcG9ydFR5cGUuU2VydmVyU2VudEV2ZW50czpcclxuICAgICAgICAgICAgICAgIGlmICghdGhpcy5vcHRpb25zLkV2ZW50U291cmNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiJ0V2ZW50U291cmNlJyBpcyBub3Qgc3VwcG9ydGVkIGluIHlvdXIgZW52aXJvbm1lbnQuXCIpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBTZXJ2ZXJTZW50RXZlbnRzVHJhbnNwb3J0KHRoaXMuaHR0cENsaWVudCwgdGhpcy5hY2Nlc3NUb2tlbkZhY3RvcnksIHRoaXMubG9nZ2VyLCB0aGlzLm9wdGlvbnMubG9nTWVzc2FnZUNvbnRlbnQgfHwgZmFsc2UsIHRoaXMub3B0aW9ucy5FdmVudFNvdXJjZSk7XHJcbiAgICAgICAgICAgIGNhc2UgSHR0cFRyYW5zcG9ydFR5cGUuTG9uZ1BvbGxpbmc6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IExvbmdQb2xsaW5nVHJhbnNwb3J0KHRoaXMuaHR0cENsaWVudCwgdGhpcy5hY2Nlc3NUb2tlbkZhY3RvcnksIHRoaXMubG9nZ2VyLCB0aGlzLm9wdGlvbnMubG9nTWVzc2FnZUNvbnRlbnQgfHwgZmFsc2UpO1xyXG4gICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVW5rbm93biB0cmFuc3BvcnQ6IFwiICsgdHJhbnNwb3J0ICsgXCIuXCIpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBIdHRwQ29ubmVjdGlvbi5wcm90b3R5cGUucmVzb2x2ZVRyYW5zcG9ydCA9IGZ1bmN0aW9uIChlbmRwb2ludCwgcmVxdWVzdGVkVHJhbnNwb3J0LCByZXF1ZXN0ZWRUcmFuc2ZlckZvcm1hdCkge1xyXG4gICAgICAgIHZhciB0cmFuc3BvcnQgPSBIdHRwVHJhbnNwb3J0VHlwZVtlbmRwb2ludC50cmFuc3BvcnRdO1xyXG4gICAgICAgIGlmICh0cmFuc3BvcnQgPT09IG51bGwgfHwgdHJhbnNwb3J0ID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgdGhpcy5sb2dnZXIubG9nKExvZ0xldmVsLkRlYnVnLCBcIlNraXBwaW5nIHRyYW5zcG9ydCAnXCIgKyBlbmRwb2ludC50cmFuc3BvcnQgKyBcIicgYmVjYXVzZSBpdCBpcyBub3Qgc3VwcG9ydGVkIGJ5IHRoaXMgY2xpZW50LlwiKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHZhciB0cmFuc2ZlckZvcm1hdHMgPSBlbmRwb2ludC50cmFuc2ZlckZvcm1hdHMubWFwKGZ1bmN0aW9uIChzKSB7IHJldHVybiBUcmFuc2ZlckZvcm1hdFtzXTsgfSk7XHJcbiAgICAgICAgICAgIGlmICh0cmFuc3BvcnRNYXRjaGVzKHJlcXVlc3RlZFRyYW5zcG9ydCwgdHJhbnNwb3J0KSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHRyYW5zZmVyRm9ybWF0cy5pbmRleE9mKHJlcXVlc3RlZFRyYW5zZmVyRm9ybWF0KSA+PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCh0cmFuc3BvcnQgPT09IEh0dHBUcmFuc3BvcnRUeXBlLldlYlNvY2tldHMgJiYgIXRoaXMub3B0aW9ucy5XZWJTb2NrZXQpIHx8XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICh0cmFuc3BvcnQgPT09IEh0dHBUcmFuc3BvcnRUeXBlLlNlcnZlclNlbnRFdmVudHMgJiYgIXRoaXMub3B0aW9ucy5FdmVudFNvdXJjZSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5sb2dnZXIubG9nKExvZ0xldmVsLkRlYnVnLCBcIlNraXBwaW5nIHRyYW5zcG9ydCAnXCIgKyBIdHRwVHJhbnNwb3J0VHlwZVt0cmFuc3BvcnRdICsgXCInIGJlY2F1c2UgaXQgaXMgbm90IHN1cHBvcnRlZCBpbiB5b3VyIGVudmlyb25tZW50LidcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmxvZ2dlci5sb2coTG9nTGV2ZWwuRGVidWcsIFwiU2VsZWN0aW5nIHRyYW5zcG9ydCAnXCIgKyBIdHRwVHJhbnNwb3J0VHlwZVt0cmFuc3BvcnRdICsgXCInLlwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRyYW5zcG9ydDtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmxvZ2dlci5sb2coTG9nTGV2ZWwuRGVidWcsIFwiU2tpcHBpbmcgdHJhbnNwb3J0ICdcIiArIEh0dHBUcmFuc3BvcnRUeXBlW3RyYW5zcG9ydF0gKyBcIicgYmVjYXVzZSBpdCBkb2VzIG5vdCBzdXBwb3J0IHRoZSByZXF1ZXN0ZWQgdHJhbnNmZXIgZm9ybWF0ICdcIiArIFRyYW5zZmVyRm9ybWF0W3JlcXVlc3RlZFRyYW5zZmVyRm9ybWF0XSArIFwiJy5cIik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmxvZ2dlci5sb2coTG9nTGV2ZWwuRGVidWcsIFwiU2tpcHBpbmcgdHJhbnNwb3J0ICdcIiArIEh0dHBUcmFuc3BvcnRUeXBlW3RyYW5zcG9ydF0gKyBcIicgYmVjYXVzZSBpdCB3YXMgZGlzYWJsZWQgYnkgdGhlIGNsaWVudC5cIik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICB9O1xyXG4gICAgSHR0cENvbm5lY3Rpb24ucHJvdG90eXBlLmlzSVRyYW5zcG9ydCA9IGZ1bmN0aW9uICh0cmFuc3BvcnQpIHtcclxuICAgICAgICByZXR1cm4gdHJhbnNwb3J0ICYmIHR5cGVvZiAodHJhbnNwb3J0KSA9PT0gXCJvYmplY3RcIiAmJiBcImNvbm5lY3RcIiBpbiB0cmFuc3BvcnQ7XHJcbiAgICB9O1xyXG4gICAgSHR0cENvbm5lY3Rpb24ucHJvdG90eXBlLmNoYW5nZVN0YXRlID0gZnVuY3Rpb24gKGZyb20sIHRvKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuY29ubmVjdGlvblN0YXRlID09PSBmcm9tKSB7XHJcbiAgICAgICAgICAgIHRoaXMuY29ubmVjdGlvblN0YXRlID0gdG87XHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9O1xyXG4gICAgSHR0cENvbm5lY3Rpb24ucHJvdG90eXBlLnN0b3BDb25uZWN0aW9uID0gZnVuY3Rpb24gKGVycm9yKSB7XHJcbiAgICAgICAgdGhpcy50cmFuc3BvcnQgPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgLy8gSWYgd2UgaGF2ZSBhIHN0b3BFcnJvciwgaXQgdGFrZXMgcHJlY2VkZW5jZSBvdmVyIHRoZSBlcnJvciBmcm9tIHRoZSB0cmFuc3BvcnRcclxuICAgICAgICBlcnJvciA9IHRoaXMuc3RvcEVycm9yIHx8IGVycm9yO1xyXG4gICAgICAgIGlmIChlcnJvcikge1xyXG4gICAgICAgICAgICB0aGlzLmxvZ2dlci5sb2coTG9nTGV2ZWwuRXJyb3IsIFwiQ29ubmVjdGlvbiBkaXNjb25uZWN0ZWQgd2l0aCBlcnJvciAnXCIgKyBlcnJvciArIFwiJy5cIik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLmxvZ2dlci5sb2coTG9nTGV2ZWwuSW5mb3JtYXRpb24sIFwiQ29ubmVjdGlvbiBkaXNjb25uZWN0ZWQuXCIpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmNvbm5lY3Rpb25TdGF0ZSA9IDIgLyogRGlzY29ubmVjdGVkICovO1xyXG4gICAgICAgIGlmICh0aGlzLm9uY2xvc2UpIHtcclxuICAgICAgICAgICAgdGhpcy5vbmNsb3NlKGVycm9yKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgSHR0cENvbm5lY3Rpb24ucHJvdG90eXBlLnJlc29sdmVVcmwgPSBmdW5jdGlvbiAodXJsKSB7XHJcbiAgICAgICAgLy8gc3RhcnRzV2l0aCBpcyBub3Qgc3VwcG9ydGVkIGluIElFXHJcbiAgICAgICAgaWYgKHVybC5sYXN0SW5kZXhPZihcImh0dHBzOi8vXCIsIDApID09PSAwIHx8IHVybC5sYXN0SW5kZXhPZihcImh0dHA6Ly9cIiwgMCkgPT09IDApIHtcclxuICAgICAgICAgICAgcmV0dXJuIHVybDtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHR5cGVvZiB3aW5kb3cgPT09IFwidW5kZWZpbmVkXCIgfHwgIXdpbmRvdyB8fCAhd2luZG93LmRvY3VtZW50KSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkNhbm5vdCByZXNvbHZlICdcIiArIHVybCArIFwiJy5cIik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIFNldHRpbmcgdGhlIHVybCB0byB0aGUgaHJlZiBwcm9wZXJ5IG9mIGFuIGFuY2hvciB0YWcgaGFuZGxlcyBub3JtYWxpemF0aW9uXHJcbiAgICAgICAgLy8gZm9yIHVzLiBUaGVyZSBhcmUgMyBtYWluIGNhc2VzLlxyXG4gICAgICAgIC8vIDEuIFJlbGF0aXZlICBwYXRoIG5vcm1hbGl6YXRpb24gZS5nIFwiYlwiIC0+IFwiaHR0cDovL2xvY2FsaG9zdDo1MDAwL2EvYlwiXHJcbiAgICAgICAgLy8gMi4gQWJzb2x1dGUgcGF0aCBub3JtYWxpemF0aW9uIGUuZyBcIi9hL2JcIiAtPiBcImh0dHA6Ly9sb2NhbGhvc3Q6NTAwMC9hL2JcIlxyXG4gICAgICAgIC8vIDMuIE5ldHdvcmtwYXRoIHJlZmVyZW5jZSBub3JtYWxpemF0aW9uIGUuZyBcIi8vbG9jYWxob3N0OjUwMDAvYS9iXCIgLT4gXCJodHRwOi8vbG9jYWxob3N0OjUwMDAvYS9iXCJcclxuICAgICAgICB2YXIgYVRhZyA9IHdpbmRvdy5kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiYVwiKTtcclxuICAgICAgICBhVGFnLmhyZWYgPSB1cmw7XHJcbiAgICAgICAgdGhpcy5sb2dnZXIubG9nKExvZ0xldmVsLkluZm9ybWF0aW9uLCBcIk5vcm1hbGl6aW5nICdcIiArIHVybCArIFwiJyB0byAnXCIgKyBhVGFnLmhyZWYgKyBcIicuXCIpO1xyXG4gICAgICAgIHJldHVybiBhVGFnLmhyZWY7XHJcbiAgICB9O1xyXG4gICAgSHR0cENvbm5lY3Rpb24ucHJvdG90eXBlLnJlc29sdmVOZWdvdGlhdGVVcmwgPSBmdW5jdGlvbiAodXJsKSB7XHJcbiAgICAgICAgdmFyIGluZGV4ID0gdXJsLmluZGV4T2YoXCI/XCIpO1xyXG4gICAgICAgIHZhciBuZWdvdGlhdGVVcmwgPSB1cmwuc3Vic3RyaW5nKDAsIGluZGV4ID09PSAtMSA/IHVybC5sZW5ndGggOiBpbmRleCk7XHJcbiAgICAgICAgaWYgKG5lZ290aWF0ZVVybFtuZWdvdGlhdGVVcmwubGVuZ3RoIC0gMV0gIT09IFwiL1wiKSB7XHJcbiAgICAgICAgICAgIG5lZ290aWF0ZVVybCArPSBcIi9cIjtcclxuICAgICAgICB9XHJcbiAgICAgICAgbmVnb3RpYXRlVXJsICs9IFwibmVnb3RpYXRlXCI7XHJcbiAgICAgICAgbmVnb3RpYXRlVXJsICs9IGluZGV4ID09PSAtMSA/IFwiXCIgOiB1cmwuc3Vic3RyaW5nKGluZGV4KTtcclxuICAgICAgICByZXR1cm4gbmVnb3RpYXRlVXJsO1xyXG4gICAgfTtcclxuICAgIHJldHVybiBIdHRwQ29ubmVjdGlvbjtcclxufSgpKTtcclxuZXhwb3J0IHsgSHR0cENvbm5lY3Rpb24gfTtcclxuZnVuY3Rpb24gdHJhbnNwb3J0TWF0Y2hlcyhyZXF1ZXN0ZWRUcmFuc3BvcnQsIGFjdHVhbFRyYW5zcG9ydCkge1xyXG4gICAgcmV0dXJuICFyZXF1ZXN0ZWRUcmFuc3BvcnQgfHwgKChhY3R1YWxUcmFuc3BvcnQgJiByZXF1ZXN0ZWRUcmFuc3BvcnQpICE9PSAwKTtcclxufVxyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1IdHRwQ29ubmVjdGlvbi5qcy5tYXAiLCIvLyBDb3B5cmlnaHQgKGMpIC5ORVQgRm91bmRhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMC4gU2VlIExpY2Vuc2UudHh0IGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXHJcbmltcG9ydCB7IE1lc3NhZ2VUeXBlIH0gZnJvbSBcIi4vSUh1YlByb3RvY29sXCI7XHJcbmltcG9ydCB7IExvZ0xldmVsIH0gZnJvbSBcIi4vSUxvZ2dlclwiO1xyXG5pbXBvcnQgeyBUcmFuc2ZlckZvcm1hdCB9IGZyb20gXCIuL0lUcmFuc3BvcnRcIjtcclxuaW1wb3J0IHsgTnVsbExvZ2dlciB9IGZyb20gXCIuL0xvZ2dlcnNcIjtcclxuaW1wb3J0IHsgVGV4dE1lc3NhZ2VGb3JtYXQgfSBmcm9tIFwiLi9UZXh0TWVzc2FnZUZvcm1hdFwiO1xyXG52YXIgSlNPTl9IVUJfUFJPVE9DT0xfTkFNRSA9IFwianNvblwiO1xyXG4vKiogSW1wbGVtZW50cyB0aGUgSlNPTiBIdWIgUHJvdG9jb2wuICovXHJcbnZhciBKc29uSHViUHJvdG9jb2wgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBKc29uSHViUHJvdG9jb2woKSB7XHJcbiAgICAgICAgLyoqIEBpbmhlcml0RG9jICovXHJcbiAgICAgICAgdGhpcy5uYW1lID0gSlNPTl9IVUJfUFJPVE9DT0xfTkFNRTtcclxuICAgICAgICAvKiogQGluaGVyaXREb2MgKi9cclxuICAgICAgICB0aGlzLnZlcnNpb24gPSAxO1xyXG4gICAgICAgIC8qKiBAaW5oZXJpdERvYyAqL1xyXG4gICAgICAgIHRoaXMudHJhbnNmZXJGb3JtYXQgPSBUcmFuc2ZlckZvcm1hdC5UZXh0O1xyXG4gICAgfVxyXG4gICAgLyoqIENyZWF0ZXMgYW4gYXJyYXkgb2Yge0BsaW5rIEBhc3BuZXQvc2lnbmFsci5IdWJNZXNzYWdlfSBvYmplY3RzIGZyb20gdGhlIHNwZWNpZmllZCBzZXJpYWxpemVkIHJlcHJlc2VudGF0aW9uLlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBpbnB1dCBBIHN0cmluZyBjb250YWluaW5nIHRoZSBzZXJpYWxpemVkIHJlcHJlc2VudGF0aW9uLlxyXG4gICAgICogQHBhcmFtIHtJTG9nZ2VyfSBsb2dnZXIgQSBsb2dnZXIgdGhhdCB3aWxsIGJlIHVzZWQgdG8gbG9nIG1lc3NhZ2VzIHRoYXQgb2NjdXIgZHVyaW5nIHBhcnNpbmcuXHJcbiAgICAgKi9cclxuICAgIEpzb25IdWJQcm90b2NvbC5wcm90b3R5cGUucGFyc2VNZXNzYWdlcyA9IGZ1bmN0aW9uIChpbnB1dCwgbG9nZ2VyKSB7XHJcbiAgICAgICAgLy8gVGhlIGludGVyZmFjZSBkb2VzIGFsbG93IFwiQXJyYXlCdWZmZXJcIiB0byBiZSBwYXNzZWQgaW4sIGJ1dCB0aGlzIGltcGxlbWVudGF0aW9uIGRvZXMgbm90LiBTbyBsZXQncyB0aHJvdyBhIHVzZWZ1bCBlcnJvci5cclxuICAgICAgICBpZiAodHlwZW9mIGlucHV0ICE9PSBcInN0cmluZ1wiKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkludmFsaWQgaW5wdXQgZm9yIEpTT04gaHViIHByb3RvY29sLiBFeHBlY3RlZCBhIHN0cmluZy5cIik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICghaW5wdXQpIHtcclxuICAgICAgICAgICAgcmV0dXJuIFtdO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAobG9nZ2VyID09PSBudWxsKSB7XHJcbiAgICAgICAgICAgIGxvZ2dlciA9IE51bGxMb2dnZXIuaW5zdGFuY2U7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIFBhcnNlIHRoZSBtZXNzYWdlc1xyXG4gICAgICAgIHZhciBtZXNzYWdlcyA9IFRleHRNZXNzYWdlRm9ybWF0LnBhcnNlKGlucHV0KTtcclxuICAgICAgICB2YXIgaHViTWVzc2FnZXMgPSBbXTtcclxuICAgICAgICBmb3IgKHZhciBfaSA9IDAsIG1lc3NhZ2VzXzEgPSBtZXNzYWdlczsgX2kgPCBtZXNzYWdlc18xLmxlbmd0aDsgX2krKykge1xyXG4gICAgICAgICAgICB2YXIgbWVzc2FnZSA9IG1lc3NhZ2VzXzFbX2ldO1xyXG4gICAgICAgICAgICB2YXIgcGFyc2VkTWVzc2FnZSA9IEpTT04ucGFyc2UobWVzc2FnZSk7XHJcbiAgICAgICAgICAgIGlmICh0eXBlb2YgcGFyc2VkTWVzc2FnZS50eXBlICE9PSBcIm51bWJlclwiKSB7XHJcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIHBheWxvYWQuXCIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHN3aXRjaCAocGFyc2VkTWVzc2FnZS50eXBlKSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlIE1lc3NhZ2VUeXBlLkludm9jYXRpb246XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5pc0ludm9jYXRpb25NZXNzYWdlKHBhcnNlZE1lc3NhZ2UpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSBNZXNzYWdlVHlwZS5TdHJlYW1JdGVtOlxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaXNTdHJlYW1JdGVtTWVzc2FnZShwYXJzZWRNZXNzYWdlKTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgTWVzc2FnZVR5cGUuQ29tcGxldGlvbjpcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmlzQ29tcGxldGlvbk1lc3NhZ2UocGFyc2VkTWVzc2FnZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIE1lc3NhZ2VUeXBlLlBpbmc6XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gU2luZ2xlIHZhbHVlLCBubyBuZWVkIHRvIHZhbGlkYXRlXHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIE1lc3NhZ2VUeXBlLkNsb3NlOlxyXG4gICAgICAgICAgICAgICAgICAgIC8vIEFsbCBvcHRpb25hbCB2YWx1ZXMsIG5vIG5lZWQgdG8gdmFsaWRhdGVcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gRnV0dXJlIHByb3RvY29sIGNoYW5nZXMgY2FuIGFkZCBtZXNzYWdlIHR5cGVzLCBvbGQgY2xpZW50cyBjYW4gaWdub3JlIHRoZW1cclxuICAgICAgICAgICAgICAgICAgICBsb2dnZXIubG9nKExvZ0xldmVsLkluZm9ybWF0aW9uLCBcIlVua25vd24gbWVzc2FnZSB0eXBlICdcIiArIHBhcnNlZE1lc3NhZ2UudHlwZSArIFwiJyBpZ25vcmVkLlwiKTtcclxuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBodWJNZXNzYWdlcy5wdXNoKHBhcnNlZE1lc3NhZ2UpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gaHViTWVzc2FnZXM7XHJcbiAgICB9O1xyXG4gICAgLyoqIFdyaXRlcyB0aGUgc3BlY2lmaWVkIHtAbGluayBAYXNwbmV0L3NpZ25hbHIuSHViTWVzc2FnZX0gdG8gYSBzdHJpbmcgYW5kIHJldHVybnMgaXQuXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHtIdWJNZXNzYWdlfSBtZXNzYWdlIFRoZSBtZXNzYWdlIHRvIHdyaXRlLlxyXG4gICAgICogQHJldHVybnMge3N0cmluZ30gQSBzdHJpbmcgY29udGFpbmluZyB0aGUgc2VyaWFsaXplZCByZXByZXNlbnRhdGlvbiBvZiB0aGUgbWVzc2FnZS5cclxuICAgICAqL1xyXG4gICAgSnNvbkh1YlByb3RvY29sLnByb3RvdHlwZS53cml0ZU1lc3NhZ2UgPSBmdW5jdGlvbiAobWVzc2FnZSkge1xyXG4gICAgICAgIHJldHVybiBUZXh0TWVzc2FnZUZvcm1hdC53cml0ZShKU09OLnN0cmluZ2lmeShtZXNzYWdlKSk7XHJcbiAgICB9O1xyXG4gICAgSnNvbkh1YlByb3RvY29sLnByb3RvdHlwZS5pc0ludm9jYXRpb25NZXNzYWdlID0gZnVuY3Rpb24gKG1lc3NhZ2UpIHtcclxuICAgICAgICB0aGlzLmFzc2VydE5vdEVtcHR5U3RyaW5nKG1lc3NhZ2UudGFyZ2V0LCBcIkludmFsaWQgcGF5bG9hZCBmb3IgSW52b2NhdGlvbiBtZXNzYWdlLlwiKTtcclxuICAgICAgICBpZiAobWVzc2FnZS5pbnZvY2F0aW9uSWQgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICB0aGlzLmFzc2VydE5vdEVtcHR5U3RyaW5nKG1lc3NhZ2UuaW52b2NhdGlvbklkLCBcIkludmFsaWQgcGF5bG9hZCBmb3IgSW52b2NhdGlvbiBtZXNzYWdlLlwiKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgSnNvbkh1YlByb3RvY29sLnByb3RvdHlwZS5pc1N0cmVhbUl0ZW1NZXNzYWdlID0gZnVuY3Rpb24gKG1lc3NhZ2UpIHtcclxuICAgICAgICB0aGlzLmFzc2VydE5vdEVtcHR5U3RyaW5nKG1lc3NhZ2UuaW52b2NhdGlvbklkLCBcIkludmFsaWQgcGF5bG9hZCBmb3IgU3RyZWFtSXRlbSBtZXNzYWdlLlwiKTtcclxuICAgICAgICBpZiAobWVzc2FnZS5pdGVtID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCBwYXlsb2FkIGZvciBTdHJlYW1JdGVtIG1lc3NhZ2UuXCIpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBKc29uSHViUHJvdG9jb2wucHJvdG90eXBlLmlzQ29tcGxldGlvbk1lc3NhZ2UgPSBmdW5jdGlvbiAobWVzc2FnZSkge1xyXG4gICAgICAgIGlmIChtZXNzYWdlLnJlc3VsdCAmJiBtZXNzYWdlLmVycm9yKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkludmFsaWQgcGF5bG9hZCBmb3IgQ29tcGxldGlvbiBtZXNzYWdlLlwiKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKCFtZXNzYWdlLnJlc3VsdCAmJiBtZXNzYWdlLmVycm9yKSB7XHJcbiAgICAgICAgICAgIHRoaXMuYXNzZXJ0Tm90RW1wdHlTdHJpbmcobWVzc2FnZS5lcnJvciwgXCJJbnZhbGlkIHBheWxvYWQgZm9yIENvbXBsZXRpb24gbWVzc2FnZS5cIik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuYXNzZXJ0Tm90RW1wdHlTdHJpbmcobWVzc2FnZS5pbnZvY2F0aW9uSWQsIFwiSW52YWxpZCBwYXlsb2FkIGZvciBDb21wbGV0aW9uIG1lc3NhZ2UuXCIpO1xyXG4gICAgfTtcclxuICAgIEpzb25IdWJQcm90b2NvbC5wcm90b3R5cGUuYXNzZXJ0Tm90RW1wdHlTdHJpbmcgPSBmdW5jdGlvbiAodmFsdWUsIGVycm9yTWVzc2FnZSkge1xyXG4gICAgICAgIGlmICh0eXBlb2YgdmFsdWUgIT09IFwic3RyaW5nXCIgfHwgdmFsdWUgPT09IFwiXCIpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGVycm9yTWVzc2FnZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIHJldHVybiBKc29uSHViUHJvdG9jb2w7XHJcbn0oKSk7XHJcbmV4cG9ydCB7IEpzb25IdWJQcm90b2NvbCB9O1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1Kc29uSHViUHJvdG9jb2wuanMubWFwIiwiLy8gQ29weXJpZ2h0IChjKSAuTkVUIEZvdW5kYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAuIFNlZSBMaWNlbnNlLnR4dCBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxyXG5pbXBvcnQgeyBIdHRwQ29ubmVjdGlvbiB9IGZyb20gXCIuL0h0dHBDb25uZWN0aW9uXCI7XHJcbmltcG9ydCB7IEh1YkNvbm5lY3Rpb24gfSBmcm9tIFwiLi9IdWJDb25uZWN0aW9uXCI7XHJcbmltcG9ydCB7IEpzb25IdWJQcm90b2NvbCB9IGZyb20gXCIuL0pzb25IdWJQcm90b2NvbFwiO1xyXG5pbXBvcnQgeyBOdWxsTG9nZ2VyIH0gZnJvbSBcIi4vTG9nZ2Vyc1wiO1xyXG5pbXBvcnQgeyBBcmcsIENvbnNvbGVMb2dnZXIgfSBmcm9tIFwiLi9VdGlsc1wiO1xyXG4vKiogQSBidWlsZGVyIGZvciBjb25maWd1cmluZyB7QGxpbmsgQGFzcG5ldC9zaWduYWxyLkh1YkNvbm5lY3Rpb259IGluc3RhbmNlcy4gKi9cclxudmFyIEh1YkNvbm5lY3Rpb25CdWlsZGVyID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gSHViQ29ubmVjdGlvbkJ1aWxkZXIoKSB7XHJcbiAgICB9XHJcbiAgICBIdWJDb25uZWN0aW9uQnVpbGRlci5wcm90b3R5cGUuY29uZmlndXJlTG9nZ2luZyA9IGZ1bmN0aW9uIChsb2dnaW5nKSB7XHJcbiAgICAgICAgQXJnLmlzUmVxdWlyZWQobG9nZ2luZywgXCJsb2dnaW5nXCIpO1xyXG4gICAgICAgIGlmIChpc0xvZ2dlcihsb2dnaW5nKSkge1xyXG4gICAgICAgICAgICB0aGlzLmxvZ2dlciA9IGxvZ2dpbmc7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLmxvZ2dlciA9IG5ldyBDb25zb2xlTG9nZ2VyKGxvZ2dpbmcpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH07XHJcbiAgICBIdWJDb25uZWN0aW9uQnVpbGRlci5wcm90b3R5cGUud2l0aFVybCA9IGZ1bmN0aW9uICh1cmwsIHRyYW5zcG9ydFR5cGVPck9wdGlvbnMpIHtcclxuICAgICAgICBBcmcuaXNSZXF1aXJlZCh1cmwsIFwidXJsXCIpO1xyXG4gICAgICAgIHRoaXMudXJsID0gdXJsO1xyXG4gICAgICAgIC8vIEZsb3ctdHlwaW5nIGtub3dzIHdoZXJlIGl0J3MgYXQuIFNpbmNlIEh0dHBUcmFuc3BvcnRUeXBlIGlzIGEgbnVtYmVyIGFuZCBJSHR0cENvbm5lY3Rpb25PcHRpb25zIGlzIGd1YXJhbnRlZWRcclxuICAgICAgICAvLyB0byBiZSBhbiBvYmplY3QsIHdlIGtub3cgKGFzIGRvZXMgVHlwZVNjcmlwdCkgdGhpcyBjb21wYXJpc29uIGlzIGFsbCB3ZSBuZWVkIHRvIGZpZ3VyZSBvdXQgd2hpY2ggb3ZlcmxvYWQgd2FzIGNhbGxlZC5cclxuICAgICAgICBpZiAodHlwZW9mIHRyYW5zcG9ydFR5cGVPck9wdGlvbnMgPT09IFwib2JqZWN0XCIpIHtcclxuICAgICAgICAgICAgdGhpcy5odHRwQ29ubmVjdGlvbk9wdGlvbnMgPSB0cmFuc3BvcnRUeXBlT3JPcHRpb25zO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5odHRwQ29ubmVjdGlvbk9wdGlvbnMgPSB7XHJcbiAgICAgICAgICAgICAgICB0cmFuc3BvcnQ6IHRyYW5zcG9ydFR5cGVPck9wdGlvbnMsXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfTtcclxuICAgIC8qKiBDb25maWd1cmVzIHRoZSB7QGxpbmsgQGFzcG5ldC9zaWduYWxyLkh1YkNvbm5lY3Rpb259IHRvIHVzZSB0aGUgc3BlY2lmaWVkIEh1YiBQcm90b2NvbC5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0ge0lIdWJQcm90b2NvbH0gcHJvdG9jb2wgVGhlIHtAbGluayBAYXNwbmV0L3NpZ25hbHIuSUh1YlByb3RvY29sfSBpbXBsZW1lbnRhdGlvbiB0byB1c2UuXHJcbiAgICAgKi9cclxuICAgIEh1YkNvbm5lY3Rpb25CdWlsZGVyLnByb3RvdHlwZS53aXRoSHViUHJvdG9jb2wgPSBmdW5jdGlvbiAocHJvdG9jb2wpIHtcclxuICAgICAgICBBcmcuaXNSZXF1aXJlZChwcm90b2NvbCwgXCJwcm90b2NvbFwiKTtcclxuICAgICAgICB0aGlzLnByb3RvY29sID0gcHJvdG9jb2w7XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9O1xyXG4gICAgLyoqIENyZWF0ZXMgYSB7QGxpbmsgQGFzcG5ldC9zaWduYWxyLkh1YkNvbm5lY3Rpb259IGZyb20gdGhlIGNvbmZpZ3VyYXRpb24gb3B0aW9ucyBzcGVjaWZpZWQgaW4gdGhpcyBidWlsZGVyLlxyXG4gICAgICpcclxuICAgICAqIEByZXR1cm5zIHtIdWJDb25uZWN0aW9ufSBUaGUgY29uZmlndXJlZCB7QGxpbmsgQGFzcG5ldC9zaWduYWxyLkh1YkNvbm5lY3Rpb259LlxyXG4gICAgICovXHJcbiAgICBIdWJDb25uZWN0aW9uQnVpbGRlci5wcm90b3R5cGUuYnVpbGQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgLy8gSWYgaHR0cENvbm5lY3Rpb25PcHRpb25zIGhhcyBhIGxvZ2dlciwgdXNlIGl0LiBPdGhlcndpc2UsIG92ZXJyaWRlIGl0IHdpdGggdGhlIG9uZVxyXG4gICAgICAgIC8vIHByb3ZpZGVkIHRvIGNvbmZpZ3VyZUxvZ2dlclxyXG4gICAgICAgIHZhciBodHRwQ29ubmVjdGlvbk9wdGlvbnMgPSB0aGlzLmh0dHBDb25uZWN0aW9uT3B0aW9ucyB8fCB7fTtcclxuICAgICAgICAvLyBJZiBpdCdzICdudWxsJywgdGhlIHVzZXIgKipleHBsaWNpdGx5KiogYXNrZWQgZm9yIG51bGwsIGRvbid0IG1lc3Mgd2l0aCBpdC5cclxuICAgICAgICBpZiAoaHR0cENvbm5lY3Rpb25PcHRpb25zLmxvZ2dlciA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIC8vIElmIG91ciBsb2dnZXIgaXMgdW5kZWZpbmVkIG9yIG51bGwsIHRoYXQncyBPSywgdGhlIEh0dHBDb25uZWN0aW9uIGNvbnN0cnVjdG9yIHdpbGwgaGFuZGxlIGl0LlxyXG4gICAgICAgICAgICBodHRwQ29ubmVjdGlvbk9wdGlvbnMubG9nZ2VyID0gdGhpcy5sb2dnZXI7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIE5vdyBjcmVhdGUgdGhlIGNvbm5lY3Rpb25cclxuICAgICAgICBpZiAoIXRoaXMudXJsKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIlRoZSAnSHViQ29ubmVjdGlvbkJ1aWxkZXIud2l0aFVybCcgbWV0aG9kIG11c3QgYmUgY2FsbGVkIGJlZm9yZSBidWlsZGluZyB0aGUgY29ubmVjdGlvbi5cIik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciBjb25uZWN0aW9uID0gbmV3IEh0dHBDb25uZWN0aW9uKHRoaXMudXJsLCBodHRwQ29ubmVjdGlvbk9wdGlvbnMpO1xyXG4gICAgICAgIHJldHVybiBIdWJDb25uZWN0aW9uLmNyZWF0ZShjb25uZWN0aW9uLCB0aGlzLmxvZ2dlciB8fCBOdWxsTG9nZ2VyLmluc3RhbmNlLCB0aGlzLnByb3RvY29sIHx8IG5ldyBKc29uSHViUHJvdG9jb2woKSk7XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIEh1YkNvbm5lY3Rpb25CdWlsZGVyO1xyXG59KCkpO1xyXG5leHBvcnQgeyBIdWJDb25uZWN0aW9uQnVpbGRlciB9O1xyXG5mdW5jdGlvbiBpc0xvZ2dlcihsb2dnZXIpIHtcclxuICAgIHJldHVybiBsb2dnZXIubG9nICE9PSB1bmRlZmluZWQ7XHJcbn1cclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9SHViQ29ubmVjdGlvbkJ1aWxkZXIuanMubWFwIiwiaW1wb3J0ICogYXMgc2lnbmFsUiBmcm9tIFwiQGFzcG5ldC9zaWduYWxyXCI7XG5pbXBvcnQgKiBhcyB0aXRsZUNhcmQgZnJvbSBcIi4vY2xhc3Nlcy90aXRsZUNhcmRNb2RlbFwiO1xuXG5leHBvcnQgY29uc3Qgc3RhcnRBcHAgPSAoKSA9PiB7XG5cbiAgICBjb25zdCBjb25uZWN0aW9uID0gbmV3IHNpZ25hbFIuSHViQ29ubmVjdGlvbkJ1aWxkZXIoKVxuICAgICAgICAud2l0aFVybChcIi9odWJcIilcbiAgICAgICAgLmNvbmZpZ3VyZUxvZ2dpbmcoc2lnbmFsUi5Mb2dMZXZlbC5JbmZvcm1hdGlvbilcbiAgICAgICAgLmJ1aWxkKCk7XG5cbiAgICBjb25uZWN0aW9uLnN0YXJ0KCkuY2F0Y2goZXJyID0+IGNvbnNvbGUubG9nKFwiQ2F1Z2h0IGVycm9yOiBcIiwgZXJyKSk7XG5cbiAgICBjb25uZWN0aW9uLm9uKFwic2hvd1RpdGxlQ2FyZFwiLCAodGl0bGVDYXJkOiB0aXRsZUNhcmQuTW9kZWwpID0+IHtcbiAgICAgICAgLy9kb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImxvZ29cIikuc3JjID0gdGl0bGVDYXJkLmltYWdlVXJsO1xuICAgICAgICBjb25zb2xlLmxvZyhcIkdvdCBzaG93VGl0bGVDYXJkIG1lc3NhZ2UsIG1vZGVsOlwiLCB0aXRsZUNhcmQpO1xuICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInRpdGxlXCIpLmlubmVyVGV4dCA9IHRpdGxlQ2FyZC50aXRsZTtcbiAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJzdWJUaXRsZVwiKS5pbm5lclRleHQgPSB0aXRsZUNhcmQuc3ViVGl0bGU7XG4gICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwidGl0bGVDYXJkXCIpLmNsYXNzTGlzdC5hZGQoXCJ2aXNpYmxlXCIpO1xuICAgIH0pO1xuXG4gICAgY29ubmVjdGlvbi5vbihcImhpZGVUaXRsZUNhcmRcIiwgKCkgPT4ge1xuICAgICAgICBjb25zb2xlLmxvZyhcIkdvdCBoaWRlVGl0bGVDYXJkIG1lc3NhZ2UsIGhpZGluZy4uLlwiKTtcbiAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJ0aXRsZUNhcmRcIikuY2xhc3NMaXN0LnJlbW92ZShcInZpc2libGVcIik7XG4gICAgfSk7XG59IiwiaW1wb3J0ICogYXMgaGFuZGxlQ29ubmVjdGlvbiBmcm9tIFwiLi9oYW5kbGVDb25uZWN0aW9uXCI7XHJcblxyXG5oYW5kbGVDb25uZWN0aW9uLnN0YXJ0QXBwKCk7Il0sInNvdXJjZVJvb3QiOiIifQ==